/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { QueryComplexity } from "nexus/dist/plugins/queryComplexityPlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Role: "BUILDER" | "CAPTAIN" | "GUEST"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  Member: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    role: NexusGenEnums['Role']; // Role!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Mutation: {};
  Query: {};
  Session: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expiresAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    teamId?: string | null; // String
    token: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Team: { // root type
    acronym?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    avatar?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    isAdmin: boolean; // Boolean!
    lastName: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Member: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    role: NexusGenEnums['Role']; // Role!
    team: NexusGenRootTypes['Team']; // Team!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['Session']; // Session!
    logout: NexusGenRootTypes['Session']; // Session!
    setSessionTeam: NexusGenRootTypes['Session']; // Session!
  }
  Query: { // field return type
    session: NexusGenRootTypes['Session'] | null; // Session
    teams: NexusGenRootTypes['Team'][]; // [Team!]!
  }
  Session: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expiresAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    member: NexusGenRootTypes['Member'] | null; // Member
    team: NexusGenRootTypes['Team'] | null; // Team
    teamId: string | null; // String
    token: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Team: { // field return type
    acronym: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    members: NexusGenRootTypes['Member'][]; // [Member!]!
    name: string; // String!
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // field return type
    avatar: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    isAdmin: boolean; // Boolean!
    lastName: string; // String!
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    teams: NexusGenRootTypes['Member'][]; // [Member!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Member: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    role: 'Role'
    team: 'Team'
    teamId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Mutation: { // field return type name
    login: 'Session'
    logout: 'Session'
    setSessionTeam: 'Session'
  }
  Query: { // field return type name
    session: 'Session'
    teams: 'Team'
  }
  Session: { // field return type name
    createdAt: 'DateTime'
    expiresAt: 'DateTime'
    id: 'ID'
    member: 'Member'
    team: 'Team'
    teamId: 'String'
    token: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Team: { // field return type name
    acronym: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    members: 'Member'
    name: 'String'
    sessions: 'Session'
    updatedAt: 'DateTime'
  }
  User: { // field return type name
    avatar: 'String'
    createdAt: 'DateTime'
    displayName: 'String'
    email: 'String'
    firstName: 'String'
    id: 'ID'
    isAdmin: 'Boolean'
    lastName: 'String'
    sessions: 'Session'
    teams: 'Member'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      email: string; // String!
      isPermanent: boolean; // Boolean!
      password: string; // String!
    }
    logout: { // args
      token: string; // String!
    }
    setSessionTeam: { // args
      teamId: string; // String!
      token: string; // String!
    }
  }
  Query: {
    session: { // args
      token: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    /**
     * The complexity for an individual field. Return a number
     * or a function that returns a number to specify the
     * complexity for this field.
     */
    complexity?: QueryComplexity<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}