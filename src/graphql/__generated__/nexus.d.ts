/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { ApiContext } from "./../../lib/apiContext"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { QueryComplexity } from "nexus/dist/plugins/queryComplexityPlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  ProjectStatus: "BUILDING" | "BUILT" | "CANCELLED" | "PLANNED" | "PLANNING" | "READY" | "STARTING"
  ProjectType: "DECOR" | "FALLWALL" | "FIELD_CIRCLE" | "FIELD_CROSS_L2" | "FIELD_FLAT" | "FIELD_L1" | "FIELD_L2" | "FIELD_M50" | "HANDSET" | "OTHER" | "SPIRAL" | "STRUCTURE" | "WALL_CUBE" | "WALL_OCTO" | "WALL_S" | "WALL_SPEED" | "WALL_T" | "WALL_X"
  Role: "BUILDER" | "CAPTAIN" | "GUEST"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Attribute: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  AttributeList: { // root type
    amount: number; // Int!
    attributeId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  AttributesOnProject: { // root type
    amount: number; // Int!
    attributeId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    projectId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  AttributesOnSubtheme: { // root type
    amount: number; // Int!
    attributeId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    subthemeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Event: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Member: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    role: NexusGenEnums['Role']; // Role!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Mutation: {};
  Project: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    number: number; // Int!
    slug: string; // String!
    status: NexusGenEnums['ProjectStatus']; // ProjectStatus!
    subNumber: number; // Int!
    subthemeId: string; // String!
    supervisorId: string; // String!
    type: NexusGenEnums['ProjectType']; // ProjectType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  Session: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expiresAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    teamId?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Stat: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  StatsOnProject: { // root type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    projectId: string; // String!
    statId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Stone: { // root type
    alias: string; // String!
    alias2?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    hex: string; // String!
    hex2?: string | null; // String
    id: string; // ID!
    name: string; // String!
    order: number; // Int!
    stoneTypeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  StoneList: { // root type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    stoneId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  StoneType: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    order: number; // Int!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  StonesOnProject: { // root type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    projectId: string; // String!
    stoneId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  StonesOnSubtheme: { // root type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    stoneId: string; // String!
    subthemeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Subtheme: { // root type
    color: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    eventId: string; // String!
    id: string; // ID!
    name: string; // String!
    order: number; // Int!
    slug: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Team: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    avatar?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    isAdmin: boolean; // Boolean!
    lastName: string; // String!
    slug: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Attribute: { // field return type
    attributeLists: NexusGenRootTypes['AttributeList'][]; // [AttributeList!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    projects: NexusGenRootTypes['AttributesOnProject'][]; // [AttributesOnProject!]!
    subthemes: NexusGenRootTypes['AttributesOnSubtheme'][]; // [AttributesOnSubtheme!]!
    team: NexusGenRootTypes['Team']; // Team!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  AttributeList: { // field return type
    amount: number; // Int!
    attribute: NexusGenRootTypes['Attribute']; // Attribute!
    attributeId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  AttributesOnProject: { // field return type
    amount: number; // Int!
    attribute: NexusGenRootTypes['Attribute']; // Attribute!
    attributeId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    project: NexusGenRootTypes['Project']; // Project!
    projectId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  AttributesOnSubtheme: { // field return type
    amount: number; // Int!
    attribute: NexusGenRootTypes['Attribute']; // Attribute!
    attributeId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    subtheme: NexusGenRootTypes['Subtheme']; // Subtheme!
    subthemeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Event: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    slug: string; // String!
    subthemes: NexusGenRootTypes['Subtheme'][]; // [Subtheme!]!
    team: NexusGenRootTypes['Team']; // Team!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Member: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    role: NexusGenEnums['Role']; // Role!
    team: NexusGenRootTypes['Team']; // Team!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Mutation: { // field return type
    login: string; // String!
    logout: NexusGenRootTypes['Session']; // Session!
    setSessionTeam: NexusGenRootTypes['Session']; // Session!
    updateStoneList: NexusGenRootTypes['StoneList'] | null; // StoneList
  }
  Project: { // field return type
    attributes: NexusGenRootTypes['AttributesOnProject'][]; // [AttributesOnProject!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    number: number; // Int!
    slug: string; // String!
    stats: NexusGenRootTypes['StatsOnProject'][]; // [StatsOnProject!]!
    status: NexusGenEnums['ProjectStatus']; // ProjectStatus!
    stones: NexusGenRootTypes['StonesOnProject'][]; // [StonesOnProject!]!
    subNumber: number; // Int!
    subtheme: NexusGenRootTypes['Subtheme']; // Subtheme!
    subthemeId: string; // String!
    supervisor: NexusGenRootTypes['User']; // User!
    supervisorId: string; // String!
    type: NexusGenEnums['ProjectType']; // ProjectType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    event: NexusGenRootTypes['Event'] | null; // Event
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    session: NexusGenRootTypes['Session'] | null; // Session
    stoneList: NexusGenRootTypes['StoneList'] | null; // StoneList
    stoneListUsers: NexusGenRootTypes['User'][]; // [User!]!
    stoneTypes: NexusGenRootTypes['StoneType'][]; // [StoneType!]!
    stones: NexusGenRootTypes['Stone'][]; // [Stone!]!
    teams: NexusGenRootTypes['Team'][]; // [Team!]!
    user: NexusGenRootTypes['User'] | null; // User
    userStoneList: NexusGenRootTypes['StoneList'][]; // [StoneList!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Session: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expiresAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    member: NexusGenRootTypes['Member'] | null; // Member
    team: NexusGenRootTypes['Team'] | null; // Team
    teamId: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Stat: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    projects: NexusGenRootTypes['StatsOnProject'][]; // [StatsOnProject!]!
    team: NexusGenRootTypes['Team']; // Team!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  StatsOnProject: { // field return type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    project: NexusGenRootTypes['Project']; // Project!
    projectId: string; // String!
    stat: NexusGenRootTypes['Stat']; // Stat!
    statId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Stone: { // field return type
    alias: string; // String!
    alias2: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    hex: string; // String!
    hex2: string | null; // String
    id: string; // ID!
    name: string; // String!
    order: number; // Int!
    projects: NexusGenRootTypes['StonesOnProject'][]; // [StonesOnProject!]!
    stoneLists: NexusGenRootTypes['StoneList'][]; // [StoneList!]!
    stoneType: NexusGenRootTypes['StoneType']; // StoneType!
    stoneTypeId: string; // String!
    subthemes: NexusGenRootTypes['StonesOnSubtheme'][]; // [StonesOnSubtheme!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  StoneList: { // field return type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    stone: NexusGenRootTypes['Stone']; // Stone!
    stoneId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  StoneType: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    order: number; // Int!
    stones: NexusGenRootTypes['Stone'][]; // [Stone!]!
    team: NexusGenRootTypes['Team']; // Team!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  StonesOnProject: { // field return type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    project: NexusGenRootTypes['Project']; // Project!
    projectId: string; // String!
    stone: NexusGenRootTypes['Stone']; // Stone!
    stoneId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  StonesOnSubtheme: { // field return type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    stone: NexusGenRootTypes['Stone']; // Stone!
    stoneId: string; // String!
    subtheme: NexusGenRootTypes['Subtheme']; // Subtheme!
    subthemeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Subtheme: { // field return type
    attributes: NexusGenRootTypes['AttributesOnSubtheme'][]; // [AttributesOnSubtheme!]!
    color: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    event: NexusGenRootTypes['Event']; // Event!
    eventId: string; // String!
    id: string; // ID!
    name: string; // String!
    order: number; // Int!
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
    slug: string; // String!
    stones: NexusGenRootTypes['StonesOnSubtheme'][]; // [StonesOnSubtheme!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Team: { // field return type
    attributes: NexusGenRootTypes['Attribute'][]; // [Attribute!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    id: string; // ID!
    members: NexusGenRootTypes['Member'][]; // [Member!]!
    name: string; // String!
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    stats: NexusGenRootTypes['Stat'][]; // [Stat!]!
    stoneTypes: NexusGenRootTypes['StoneType'][]; // [StoneType!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // field return type
    attributeLists: NexusGenRootTypes['AttributeList'][]; // [AttributeList!]!
    attributesOnProjects: NexusGenRootTypes['AttributesOnProject'][]; // [AttributesOnProject!]!
    attributesOnSubthemes: NexusGenRootTypes['AttributesOnSubtheme'][]; // [AttributesOnSubtheme!]!
    avatar: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    isAdmin: boolean; // Boolean!
    lastName: string; // String!
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    slug: string; // String!
    stoneLists: NexusGenRootTypes['StoneList'][]; // [StoneList!]!
    stonesOnProjects: NexusGenRootTypes['StonesOnProject'][]; // [StonesOnProject!]!
    stonesOnSubthemes: NexusGenRootTypes['StonesOnSubtheme'][]; // [StonesOnSubtheme!]!
    teams: NexusGenRootTypes['Member'][]; // [Member!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Attribute: { // field return type name
    attributeLists: 'AttributeList'
    createdAt: 'DateTime'
    id: 'ID'
    name: 'String'
    projects: 'AttributesOnProject'
    subthemes: 'AttributesOnSubtheme'
    team: 'Team'
    teamId: 'String'
    updatedAt: 'DateTime'
  }
  AttributeList: { // field return type name
    amount: 'Int'
    attribute: 'Attribute'
    attributeId: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  AttributesOnProject: { // field return type name
    amount: 'Int'
    attribute: 'Attribute'
    attributeId: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    project: 'Project'
    projectId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  AttributesOnSubtheme: { // field return type name
    amount: 'Int'
    attribute: 'Attribute'
    attributeId: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    subtheme: 'Subtheme'
    subthemeId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Event: { // field return type name
    createdAt: 'DateTime'
    date: 'DateTime'
    id: 'ID'
    name: 'String'
    slug: 'String'
    subthemes: 'Subtheme'
    team: 'Team'
    teamId: 'String'
    updatedAt: 'DateTime'
  }
  Member: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    role: 'Role'
    team: 'Team'
    teamId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Mutation: { // field return type name
    login: 'String'
    logout: 'Session'
    setSessionTeam: 'Session'
    updateStoneList: 'StoneList'
  }
  Project: { // field return type name
    attributes: 'AttributesOnProject'
    createdAt: 'DateTime'
    description: 'String'
    id: 'ID'
    name: 'String'
    number: 'Int'
    slug: 'String'
    stats: 'StatsOnProject'
    status: 'ProjectStatus'
    stones: 'StonesOnProject'
    subNumber: 'Int'
    subtheme: 'Subtheme'
    subthemeId: 'String'
    supervisor: 'User'
    supervisorId: 'String'
    type: 'ProjectType'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    event: 'Event'
    events: 'Event'
    session: 'Session'
    stoneList: 'StoneList'
    stoneListUsers: 'User'
    stoneTypes: 'StoneType'
    stones: 'Stone'
    teams: 'Team'
    user: 'User'
    userStoneList: 'StoneList'
    users: 'User'
  }
  Session: { // field return type name
    createdAt: 'DateTime'
    expiresAt: 'DateTime'
    id: 'ID'
    member: 'Member'
    team: 'Team'
    teamId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Stat: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    name: 'String'
    projects: 'StatsOnProject'
    team: 'Team'
    teamId: 'String'
    updatedAt: 'DateTime'
  }
  StatsOnProject: { // field return type name
    amount: 'Int'
    createdAt: 'DateTime'
    id: 'ID'
    project: 'Project'
    projectId: 'String'
    stat: 'Stat'
    statId: 'String'
    updatedAt: 'DateTime'
  }
  Stone: { // field return type name
    alias: 'String'
    alias2: 'String'
    createdAt: 'DateTime'
    description: 'String'
    hex: 'String'
    hex2: 'String'
    id: 'ID'
    name: 'String'
    order: 'Int'
    projects: 'StonesOnProject'
    stoneLists: 'StoneList'
    stoneType: 'StoneType'
    stoneTypeId: 'String'
    subthemes: 'StonesOnSubtheme'
    updatedAt: 'DateTime'
  }
  StoneList: { // field return type name
    amount: 'Int'
    createdAt: 'DateTime'
    id: 'ID'
    stone: 'Stone'
    stoneId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  StoneType: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'ID'
    name: 'String'
    order: 'Int'
    stones: 'Stone'
    team: 'Team'
    teamId: 'String'
    updatedAt: 'DateTime'
  }
  StonesOnProject: { // field return type name
    amount: 'Int'
    createdAt: 'DateTime'
    id: 'ID'
    project: 'Project'
    projectId: 'String'
    stone: 'Stone'
    stoneId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  StonesOnSubtheme: { // field return type name
    amount: 'Int'
    createdAt: 'DateTime'
    id: 'ID'
    stone: 'Stone'
    stoneId: 'String'
    subtheme: 'Subtheme'
    subthemeId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Subtheme: { // field return type name
    attributes: 'AttributesOnSubtheme'
    color: 'String'
    createdAt: 'DateTime'
    event: 'Event'
    eventId: 'String'
    id: 'ID'
    name: 'String'
    order: 'Int'
    projects: 'Project'
    slug: 'String'
    stones: 'StonesOnSubtheme'
    updatedAt: 'DateTime'
  }
  Team: { // field return type name
    attributes: 'Attribute'
    createdAt: 'DateTime'
    events: 'Event'
    id: 'ID'
    members: 'Member'
    name: 'String'
    sessions: 'Session'
    stats: 'Stat'
    stoneTypes: 'StoneType'
    updatedAt: 'DateTime'
  }
  User: { // field return type name
    attributeLists: 'AttributeList'
    attributesOnProjects: 'AttributesOnProject'
    attributesOnSubthemes: 'AttributesOnSubtheme'
    avatar: 'String'
    createdAt: 'DateTime'
    displayName: 'String'
    email: 'String'
    firstName: 'String'
    id: 'ID'
    isAdmin: 'Boolean'
    lastName: 'String'
    projects: 'Project'
    sessions: 'Session'
    slug: 'String'
    stoneLists: 'StoneList'
    stonesOnProjects: 'StonesOnProject'
    stonesOnSubthemes: 'StonesOnSubtheme'
    teams: 'Member'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      email: string; // String!
      isPermanent: boolean; // Boolean!
      password: string; // String!
    }
    setSessionTeam: { // args
      teamId: string; // String!
    }
    updateStoneList: { // args
      amount: number; // Int!
      stoneId: string; // String!
      userId: string; // String!
    }
  }
  Query: {
    event: { // args
      eventSlug: string; // String!
    }
    session: { // args
      token: string; // String!
    }
    stoneList: { // args
      stoneId: string; // String!
      userId: string; // String!
    }
    user: { // args
      userSlug: string; // String!
    }
    userStoneList: { // args
      userSlug: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ApiContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    /**
     * The complexity for an individual field. Return a number
     * or a function that returns a number to specify the
     * complexity for this field.
     */
    complexity?: QueryComplexity<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}