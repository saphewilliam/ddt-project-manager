# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attribute {
  _count: AttributeCount
  createdAt: DateTime!
  id: String!
  inventory(cursor: AttributeInventoryWhereUniqueInput, distinct: [AttributeInventoryScalarFieldEnum!], orderBy: [AttributeInventoryOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeInventoryWhereInput): [AttributeInventory!]!
  inventoryHistory(cursor: AttributeInventoryHistoryWhereUniqueInput, distinct: [AttributeInventoryHistoryScalarFieldEnum!], orderBy: [AttributeInventoryHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeInventoryHistoryWhereInput): [AttributeInventoryHistory!]!
  name: String!
  namePlural: String!
  projectParts(cursor: AttributesOnProjectPartWhereUniqueInput, distinct: [AttributesOnProjectPartScalarFieldEnum!], orderBy: [AttributesOnProjectPartOrderByWithRelationInput!], skip: Int, take: Int, where: AttributesOnProjectPartWhereInput): [AttributesOnProjectPart!]!
  subthemes(cursor: AttributesOnSubthemeWhereUniqueInput, distinct: [AttributesOnSubthemeScalarFieldEnum!], orderBy: [AttributesOnSubthemeOrderByWithRelationInput!], skip: Int, take: Int, where: AttributesOnSubthemeWhereInput): [AttributesOnSubtheme!]!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
}

type AttributeCount {
  inventory: Int!
  inventoryHistory: Int!
  projectParts: Int!
  subthemes: Int!
}

input AttributeCreateInput {
  inventory: AttributeInventoryCreateNestedManyWithoutAttributeInput
  inventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  projectParts: AttributesOnProjectPartCreateNestedManyWithoutAttributeInput
  subthemes: AttributesOnSubthemeCreateNestedManyWithoutAttributeInput
}

input AttributeCreateManyTeamInput {
  name: String!
  namePlural: String!
}

input AttributeCreateManyTeamInputEnvelope {
  data: [AttributeCreateManyTeamInput!]!
  skipDuplicates: Boolean
}

input AttributeCreateNestedManyWithoutTeamInput {
  connect: [AttributeWhereUniqueInput!]
  connectOrCreate: [AttributeCreateOrConnectWithoutTeamInput!]
  create: [AttributeCreateWithoutTeamInput!]
  createMany: AttributeCreateManyTeamInputEnvelope
}

input AttributeCreateNestedOneWithoutInventoryHistoryInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutInventoryHistoryInput
  create: AttributeCreateWithoutInventoryHistoryInput
}

input AttributeCreateNestedOneWithoutInventoryInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutInventoryInput
  create: AttributeCreateWithoutInventoryInput
}

input AttributeCreateNestedOneWithoutProjectPartsInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutProjectPartsInput
  create: AttributeCreateWithoutProjectPartsInput
}

input AttributeCreateNestedOneWithoutSubthemesInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutSubthemesInput
  create: AttributeCreateWithoutSubthemesInput
}

input AttributeCreateOrConnectWithoutInventoryHistoryInput {
  create: AttributeCreateWithoutInventoryHistoryInput!
  where: AttributeWhereUniqueInput!
}

input AttributeCreateOrConnectWithoutInventoryInput {
  create: AttributeCreateWithoutInventoryInput!
  where: AttributeWhereUniqueInput!
}

input AttributeCreateOrConnectWithoutProjectPartsInput {
  create: AttributeCreateWithoutProjectPartsInput!
  where: AttributeWhereUniqueInput!
}

input AttributeCreateOrConnectWithoutSubthemesInput {
  create: AttributeCreateWithoutSubthemesInput!
  where: AttributeWhereUniqueInput!
}

input AttributeCreateOrConnectWithoutTeamInput {
  create: AttributeCreateWithoutTeamInput!
  where: AttributeWhereUniqueInput!
}

input AttributeCreateWithoutInventoryHistoryInput {
  inventory: AttributeInventoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  projectParts: AttributesOnProjectPartCreateNestedManyWithoutAttributeInput
  subthemes: AttributesOnSubthemeCreateNestedManyWithoutAttributeInput
}

input AttributeCreateWithoutInventoryInput {
  inventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  projectParts: AttributesOnProjectPartCreateNestedManyWithoutAttributeInput
  subthemes: AttributesOnSubthemeCreateNestedManyWithoutAttributeInput
}

input AttributeCreateWithoutProjectPartsInput {
  inventory: AttributeInventoryCreateNestedManyWithoutAttributeInput
  inventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  subthemes: AttributesOnSubthemeCreateNestedManyWithoutAttributeInput
}

input AttributeCreateWithoutSubthemesInput {
  inventory: AttributeInventoryCreateNestedManyWithoutAttributeInput
  inventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  projectParts: AttributesOnProjectPartCreateNestedManyWithoutAttributeInput
}

input AttributeCreateWithoutTeamInput {
  inventory: AttributeInventoryCreateNestedManyWithoutAttributeInput
  inventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  projectParts: AttributesOnProjectPartCreateNestedManyWithoutAttributeInput
  subthemes: AttributesOnSubthemeCreateNestedManyWithoutAttributeInput
}

type AttributeInventory {
  amount: Int!
  attributeId: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  userId: String!
}

input AttributeInventoryCreateManyAttributeInput {
  amount: Int!
  userId: String!
}

input AttributeInventoryCreateManyAttributeInputEnvelope {
  data: [AttributeInventoryCreateManyAttributeInput!]!
  skipDuplicates: Boolean
}

input AttributeInventoryCreateManyUserInput {
  amount: Int!
  attributeId: String!
}

input AttributeInventoryCreateManyUserInputEnvelope {
  data: [AttributeInventoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AttributeInventoryCreateNestedManyWithoutAttributeInput {
  connect: [AttributeInventoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryCreateOrConnectWithoutAttributeInput!]
  create: [AttributeInventoryCreateWithoutAttributeInput!]
  createMany: AttributeInventoryCreateManyAttributeInputEnvelope
}

input AttributeInventoryCreateNestedManyWithoutUserInput {
  connect: [AttributeInventoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryCreateOrConnectWithoutUserInput!]
  create: [AttributeInventoryCreateWithoutUserInput!]
  createMany: AttributeInventoryCreateManyUserInputEnvelope
}

input AttributeInventoryCreateOrConnectWithoutAttributeInput {
  create: AttributeInventoryCreateWithoutAttributeInput!
  where: AttributeInventoryWhereUniqueInput!
}

input AttributeInventoryCreateOrConnectWithoutUserInput {
  create: AttributeInventoryCreateWithoutUserInput!
  where: AttributeInventoryWhereUniqueInput!
}

input AttributeInventoryCreateWithoutAttributeInput {
  amount: Int!
  user: UserCreateNestedOneWithoutAttributeInventoryInput!
}

input AttributeInventoryCreateWithoutUserInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutInventoryInput!
}

type AttributeInventoryHistory {
  attributeId: String!
  createdAt: DateTime!
  fieldName: String!
  id: String!
  newValue: String!
  oldValue: String!
  updatedAt: DateTime!
  userId: String!
}

input AttributeInventoryHistoryCreateManyAttributeInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  userId: String!
}

input AttributeInventoryHistoryCreateManyAttributeInputEnvelope {
  data: [AttributeInventoryHistoryCreateManyAttributeInput!]!
  skipDuplicates: Boolean
}

input AttributeInventoryHistoryCreateManyUserInput {
  attributeId: String!
  fieldName: String!
  newValue: String!
  oldValue: String!
}

input AttributeInventoryHistoryCreateManyUserInputEnvelope {
  data: [AttributeInventoryHistoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput {
  connect: [AttributeInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryHistoryCreateOrConnectWithoutAttributeInput!]
  create: [AttributeInventoryHistoryCreateWithoutAttributeInput!]
  createMany: AttributeInventoryHistoryCreateManyAttributeInputEnvelope
}

input AttributeInventoryHistoryCreateNestedManyWithoutUserInput {
  connect: [AttributeInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryHistoryCreateOrConnectWithoutUserInput!]
  create: [AttributeInventoryHistoryCreateWithoutUserInput!]
  createMany: AttributeInventoryHistoryCreateManyUserInputEnvelope
}

input AttributeInventoryHistoryCreateOrConnectWithoutAttributeInput {
  create: AttributeInventoryHistoryCreateWithoutAttributeInput!
  where: AttributeInventoryHistoryWhereUniqueInput!
}

input AttributeInventoryHistoryCreateOrConnectWithoutUserInput {
  create: AttributeInventoryHistoryCreateWithoutUserInput!
  where: AttributeInventoryHistoryWhereUniqueInput!
}

input AttributeInventoryHistoryCreateWithoutAttributeInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  user: UserCreateNestedOneWithoutAttributeInventoryHistoryInput!
}

input AttributeInventoryHistoryCreateWithoutUserInput {
  attribute: AttributeCreateNestedOneWithoutInventoryHistoryInput!
  fieldName: String!
  newValue: String!
  oldValue: String!
}

input AttributeInventoryHistoryListRelationFilter {
  every: AttributeInventoryHistoryWhereInput
  none: AttributeInventoryHistoryWhereInput
  some: AttributeInventoryHistoryWhereInput
}

input AttributeInventoryHistoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributeInventoryHistoryOrderByWithRelationInput {
  attribute: AttributeOrderByWithRelationInput
  attributeId: SortOrder
  createdAt: SortOrder
  fieldName: SortOrder
  id: SortOrder
  newValue: SortOrder
  oldValue: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AttributeInventoryHistoryScalarFieldEnum {
  attributeId
  createdAt
  fieldName
  id
  newValue
  oldValue
  updatedAt
  userId
}

input AttributeInventoryHistoryWhereInput {
  AND: [AttributeInventoryHistoryWhereInput!]
  NOT: [AttributeInventoryHistoryWhereInput!]
  OR: [AttributeInventoryHistoryWhereInput!]
  attribute: AttributeRelationFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  fieldName: StringFilter
  id: StringFilter
  newValue: StringFilter
  oldValue: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AttributeInventoryHistoryWhereUniqueInput {
  id: String
}

input AttributeInventoryListRelationFilter {
  every: AttributeInventoryWhereInput
  none: AttributeInventoryWhereInput
  some: AttributeInventoryWhereInput
}

input AttributeInventoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributeInventoryOrderByWithRelationInput {
  amount: SortOrder
  attribute: AttributeOrderByWithRelationInput
  attributeId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AttributeInventoryScalarFieldEnum {
  amount
  attributeId
  createdAt
  id
  updatedAt
  userId
}

input AttributeInventoryWhereInput {
  AND: [AttributeInventoryWhereInput!]
  NOT: [AttributeInventoryWhereInput!]
  OR: [AttributeInventoryWhereInput!]
  amount: IntFilter
  attribute: AttributeRelationFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AttributeInventoryWhereUniqueInput {
  id: String
}

input AttributeListRelationFilter {
  every: AttributeWhereInput
  none: AttributeWhereInput
  some: AttributeWhereInput
}

input AttributeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributeOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  inventory: AttributeInventoryOrderByRelationAggregateInput
  inventoryHistory: AttributeInventoryHistoryOrderByRelationAggregateInput
  name: SortOrder
  namePlural: SortOrder
  projectParts: AttributesOnProjectPartOrderByRelationAggregateInput
  subthemes: AttributesOnSubthemeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input AttributeRelationFilter {
  is: AttributeWhereInput
  isNot: AttributeWhereInput
}

enum AttributeScalarFieldEnum {
  createdAt
  id
  name
  namePlural
  teamId
  updatedAt
}

input AttributeWhereInput {
  AND: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  inventory: AttributeInventoryListRelationFilter
  inventoryHistory: AttributeInventoryHistoryListRelationFilter
  name: StringFilter
  namePlural: StringFilter
  projectParts: AttributesOnProjectPartListRelationFilter
  subthemes: AttributesOnSubthemeListRelationFilter
  updatedAt: DateTimeFilter
}

input AttributeWhereUniqueInput {
  id: String
}

type AttributesOnProjectPart {
  amount: Int!
  attributeId: String!
  createdAt: DateTime!
  id: String!
  projectPartId: String!
  updatedAt: DateTime!
  userId: String!
}

input AttributesOnProjectPartCreateManyAttributeInput {
  amount: Int!
  projectPartId: String!
  userId: String!
}

input AttributesOnProjectPartCreateManyAttributeInputEnvelope {
  data: [AttributesOnProjectPartCreateManyAttributeInput!]!
  skipDuplicates: Boolean
}

input AttributesOnProjectPartCreateManyProjectPartInput {
  amount: Int!
  attributeId: String!
  userId: String!
}

input AttributesOnProjectPartCreateManyProjectPartInputEnvelope {
  data: [AttributesOnProjectPartCreateManyProjectPartInput!]!
  skipDuplicates: Boolean
}

input AttributesOnProjectPartCreateManyUserInput {
  amount: Int!
  attributeId: String!
  projectPartId: String!
}

input AttributesOnProjectPartCreateManyUserInputEnvelope {
  data: [AttributesOnProjectPartCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AttributesOnProjectPartCreateNestedManyWithoutAttributeInput {
  connect: [AttributesOnProjectPartWhereUniqueInput!]
  connectOrCreate: [AttributesOnProjectPartCreateOrConnectWithoutAttributeInput!]
  create: [AttributesOnProjectPartCreateWithoutAttributeInput!]
  createMany: AttributesOnProjectPartCreateManyAttributeInputEnvelope
}

input AttributesOnProjectPartCreateNestedManyWithoutProjectPartInput {
  connect: [AttributesOnProjectPartWhereUniqueInput!]
  connectOrCreate: [AttributesOnProjectPartCreateOrConnectWithoutProjectPartInput!]
  create: [AttributesOnProjectPartCreateWithoutProjectPartInput!]
  createMany: AttributesOnProjectPartCreateManyProjectPartInputEnvelope
}

input AttributesOnProjectPartCreateNestedManyWithoutUserInput {
  connect: [AttributesOnProjectPartWhereUniqueInput!]
  connectOrCreate: [AttributesOnProjectPartCreateOrConnectWithoutUserInput!]
  create: [AttributesOnProjectPartCreateWithoutUserInput!]
  createMany: AttributesOnProjectPartCreateManyUserInputEnvelope
}

input AttributesOnProjectPartCreateOrConnectWithoutAttributeInput {
  create: AttributesOnProjectPartCreateWithoutAttributeInput!
  where: AttributesOnProjectPartWhereUniqueInput!
}

input AttributesOnProjectPartCreateOrConnectWithoutProjectPartInput {
  create: AttributesOnProjectPartCreateWithoutProjectPartInput!
  where: AttributesOnProjectPartWhereUniqueInput!
}

input AttributesOnProjectPartCreateOrConnectWithoutUserInput {
  create: AttributesOnProjectPartCreateWithoutUserInput!
  where: AttributesOnProjectPartWhereUniqueInput!
}

input AttributesOnProjectPartCreateWithoutAttributeInput {
  amount: Int!
  projectPart: ProjectPartCreateNestedOneWithoutAttributesInput!
  user: UserCreateNestedOneWithoutAttributesOnProjectPartsInput!
}

input AttributesOnProjectPartCreateWithoutProjectPartInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutProjectPartsInput!
  user: UserCreateNestedOneWithoutAttributesOnProjectPartsInput!
}

input AttributesOnProjectPartCreateWithoutUserInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutProjectPartsInput!
  projectPart: ProjectPartCreateNestedOneWithoutAttributesInput!
}

input AttributesOnProjectPartListRelationFilter {
  every: AttributesOnProjectPartWhereInput
  none: AttributesOnProjectPartWhereInput
  some: AttributesOnProjectPartWhereInput
}

input AttributesOnProjectPartOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributesOnProjectPartOrderByWithRelationInput {
  amount: SortOrder
  attribute: AttributeOrderByWithRelationInput
  attributeId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  projectPart: ProjectPartOrderByWithRelationInput
  projectPartId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AttributesOnProjectPartScalarFieldEnum {
  amount
  attributeId
  createdAt
  id
  projectPartId
  updatedAt
  userId
}

input AttributesOnProjectPartWhereInput {
  AND: [AttributesOnProjectPartWhereInput!]
  NOT: [AttributesOnProjectPartWhereInput!]
  OR: [AttributesOnProjectPartWhereInput!]
  amount: IntFilter
  attribute: AttributeRelationFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  projectPart: ProjectPartRelationFilter
  projectPartId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AttributesOnProjectPartWhereUniqueInput {
  id: String
}

type AttributesOnSubtheme {
  amount: Int!
  attributeId: String!
  createdAt: DateTime!
  id: String!
  subthemeId: String!
  updatedAt: DateTime!
  userId: String!
}

input AttributesOnSubthemeCreateManyAttributeInput {
  amount: Int!
  subthemeId: String!
  userId: String!
}

input AttributesOnSubthemeCreateManyAttributeInputEnvelope {
  data: [AttributesOnSubthemeCreateManyAttributeInput!]!
  skipDuplicates: Boolean
}

input AttributesOnSubthemeCreateManySubthemeInput {
  amount: Int!
  attributeId: String!
  userId: String!
}

input AttributesOnSubthemeCreateManySubthemeInputEnvelope {
  data: [AttributesOnSubthemeCreateManySubthemeInput!]!
  skipDuplicates: Boolean
}

input AttributesOnSubthemeCreateManyUserInput {
  amount: Int!
  attributeId: String!
  subthemeId: String!
}

input AttributesOnSubthemeCreateManyUserInputEnvelope {
  data: [AttributesOnSubthemeCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AttributesOnSubthemeCreateNestedManyWithoutAttributeInput {
  connect: [AttributesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [AttributesOnSubthemeCreateOrConnectWithoutAttributeInput!]
  create: [AttributesOnSubthemeCreateWithoutAttributeInput!]
  createMany: AttributesOnSubthemeCreateManyAttributeInputEnvelope
}

input AttributesOnSubthemeCreateNestedManyWithoutSubthemeInput {
  connect: [AttributesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [AttributesOnSubthemeCreateOrConnectWithoutSubthemeInput!]
  create: [AttributesOnSubthemeCreateWithoutSubthemeInput!]
  createMany: AttributesOnSubthemeCreateManySubthemeInputEnvelope
}

input AttributesOnSubthemeCreateNestedManyWithoutUserInput {
  connect: [AttributesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [AttributesOnSubthemeCreateOrConnectWithoutUserInput!]
  create: [AttributesOnSubthemeCreateWithoutUserInput!]
  createMany: AttributesOnSubthemeCreateManyUserInputEnvelope
}

input AttributesOnSubthemeCreateOrConnectWithoutAttributeInput {
  create: AttributesOnSubthemeCreateWithoutAttributeInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeCreateOrConnectWithoutSubthemeInput {
  create: AttributesOnSubthemeCreateWithoutSubthemeInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeCreateOrConnectWithoutUserInput {
  create: AttributesOnSubthemeCreateWithoutUserInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeCreateWithoutAttributeInput {
  amount: Int!
  subtheme: SubthemeCreateNestedOneWithoutAttributesInput!
  user: UserCreateNestedOneWithoutAttributesOnSubthemesInput!
}

input AttributesOnSubthemeCreateWithoutSubthemeInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutSubthemesInput!
  user: UserCreateNestedOneWithoutAttributesOnSubthemesInput!
}

input AttributesOnSubthemeCreateWithoutUserInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutSubthemesInput!
  subtheme: SubthemeCreateNestedOneWithoutAttributesInput!
}

input AttributesOnSubthemeListRelationFilter {
  every: AttributesOnSubthemeWhereInput
  none: AttributesOnSubthemeWhereInput
  some: AttributesOnSubthemeWhereInput
}

input AttributesOnSubthemeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributesOnSubthemeOrderByWithRelationInput {
  amount: SortOrder
  attribute: AttributeOrderByWithRelationInput
  attributeId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  subtheme: SubthemeOrderByWithRelationInput
  subthemeId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AttributesOnSubthemeScalarFieldEnum {
  amount
  attributeId
  createdAt
  id
  subthemeId
  updatedAt
  userId
}

input AttributesOnSubthemeWhereInput {
  AND: [AttributesOnSubthemeWhereInput!]
  NOT: [AttributesOnSubthemeWhereInput!]
  OR: [AttributesOnSubthemeWhereInput!]
  amount: IntFilter
  attribute: AttributeRelationFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  subtheme: SubthemeRelationFilter
  subthemeId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AttributesOnSubthemeWhereUniqueInput {
  id: String
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumProjectStatusFilter {
  equals: ProjectStatus
  in: [ProjectStatus!]
  not: NestedEnumProjectStatusFilter
  notIn: [ProjectStatus!]
}

input EnumProjectTypeFilter {
  equals: ProjectType
  in: [ProjectType!]
  not: NestedEnumProjectTypeFilter
  notIn: [ProjectType!]
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

type Event {
  _count: EventCount
  createdAt: DateTime!
  date: DateTime!
  id: String!
  img: String!
  name: String!
  slug: String!
  teamId: String!
  updatedAt: DateTime!
}

type EventCount {
  subthemes: Int!
}

input EventCreateManyTeamInput {
  date: DateTime!
  img: String!
  name: String!
  slug: String!
}

input EventCreateManyTeamInputEnvelope {
  data: [EventCreateManyTeamInput!]!
  skipDuplicates: Boolean
}

input EventCreateNestedManyWithoutTeamInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutTeamInput!]
  create: [EventCreateWithoutTeamInput!]
  createMany: EventCreateManyTeamInputEnvelope
}

input EventCreateNestedOneWithoutSubthemesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutSubthemesInput
  create: EventCreateWithoutSubthemesInput
}

input EventCreateOrConnectWithoutSubthemesInput {
  create: EventCreateWithoutSubthemesInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutTeamInput {
  create: EventCreateWithoutTeamInput!
  where: EventWhereUniqueInput!
}

input EventCreateWithoutSubthemesInput {
  date: DateTime!
  img: String!
  name: String!
  slug: String!
}

input EventCreateWithoutTeamInput {
  date: DateTime!
  img: String!
  name: String!
  slug: String!
  subthemes: SubthemeCreateNestedManyWithoutEventInput
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

input EventOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByWithRelationInput {
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  img: SortOrder
  name: SortOrder
  slug: SortOrder
  subthemes: SubthemeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input EventRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

enum EventScalarFieldEnum {
  createdAt
  date
  id
  img
  name
  slug
  teamId
  updatedAt
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  createdAt: DateTimeFilter
  date: DateTimeFilter
  id: StringFilter
  img: StringFilter
  name: StringFilter
  slug: StringFilter
  subthemes: SubthemeListRelationFilter
  updatedAt: DateTimeFilter
}

input EventWhereUniqueInput {
  id: String
  slug: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonNullableFilter {
  equals: JSON
  not: JSON
}

type Member {
  createdAt: DateTime!
  id: String!
  role: Role!
  teamId: String!
  updatedAt: DateTime!
  userId: String!
}

input MemberCreateManyTeamInput {
  role: Role!
  userId: String!
}

input MemberCreateManyTeamInputEnvelope {
  data: [MemberCreateManyTeamInput!]!
  skipDuplicates: Boolean
}

input MemberCreateManyUserInput {
  role: Role!
}

input MemberCreateManyUserInputEnvelope {
  data: [MemberCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MemberCreateNestedManyWithoutTeamInput {
  connect: [MemberWhereUniqueInput!]
  connectOrCreate: [MemberCreateOrConnectWithoutTeamInput!]
  create: [MemberCreateWithoutTeamInput!]
  createMany: MemberCreateManyTeamInputEnvelope
}

input MemberCreateNestedManyWithoutUserInput {
  connect: [MemberWhereUniqueInput!]
  connectOrCreate: [MemberCreateOrConnectWithoutUserInput!]
  create: [MemberCreateWithoutUserInput!]
  createMany: MemberCreateManyUserInputEnvelope
}

input MemberCreateOrConnectWithoutTeamInput {
  create: MemberCreateWithoutTeamInput!
  where: MemberWhereUniqueInput!
}

input MemberCreateOrConnectWithoutUserInput {
  create: MemberCreateWithoutUserInput!
  where: MemberWhereUniqueInput!
}

input MemberCreateWithoutTeamInput {
  role: Role!
  user: UserCreateNestedOneWithoutTeamsInput!
}

input MemberCreateWithoutUserInput {
  role: Role!
}

input MemberListRelationFilter {
  every: MemberWhereInput
  none: MemberWhereInput
  some: MemberWhereInput
}

input MemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input MemberOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum MemberScalarFieldEnum {
  createdAt
  id
  role
  teamId
  updatedAt
  userId
}

input MemberUserIdTeamIdCompoundUniqueInput {
  teamId: String!
  userId: String!
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input MemberWhereUniqueInput {
  id: String
  userId_teamId: MemberUserIdTeamIdCompoundUniqueInput
}

type Mutation {
  createAttribute(data: AttributeCreateInput!): Attribute!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumProjectStatusFilter {
  equals: ProjectStatus
  in: [ProjectStatus!]
  not: NestedEnumProjectStatusFilter
  notIn: [ProjectStatus!]
}

input NestedEnumProjectTypeFilter {
  equals: ProjectType
  in: [ProjectType!]
  not: NestedEnumProjectTypeFilter
  notIn: [ProjectType!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input ProjectCreateManyCreatedByInput {
  description: JSON
  name: String!
  number: Int!
  slug: String!
  status: ProjectStatus!
  subthemeId: String!
  supervisorId: String
}

input ProjectCreateManyCreatedByInputEnvelope {
  data: [ProjectCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManySubthemeInput {
  createdById: String
  description: JSON
  name: String!
  number: Int!
  slug: String!
  status: ProjectStatus!
  supervisorId: String
}

input ProjectCreateManySubthemeInputEnvelope {
  data: [ProjectCreateManySubthemeInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManySupervisorInput {
  createdById: String
  description: JSON
  name: String!
  number: Int!
  slug: String!
  status: ProjectStatus!
  subthemeId: String!
}

input ProjectCreateManySupervisorInputEnvelope {
  data: [ProjectCreateManySupervisorInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateNestedManyWithoutCreatedByInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutCreatedByInput!]
  create: [ProjectCreateWithoutCreatedByInput!]
  createMany: ProjectCreateManyCreatedByInputEnvelope
}

input ProjectCreateNestedManyWithoutSubthemeInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSubthemeInput!]
  create: [ProjectCreateWithoutSubthemeInput!]
  createMany: ProjectCreateManySubthemeInputEnvelope
}

input ProjectCreateNestedManyWithoutSupervisorInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSupervisorInput!]
  create: [ProjectCreateWithoutSupervisorInput!]
  createMany: ProjectCreateManySupervisorInputEnvelope
}

input ProjectCreateNestedOneWithoutHistoryInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutHistoryInput
  create: ProjectCreateWithoutHistoryInput
}

input ProjectCreateNestedOneWithoutPartsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutPartsInput
  create: ProjectCreateWithoutPartsInput
}

input ProjectCreateNestedOneWithoutStatsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutStatsInput
  create: ProjectCreateWithoutStatsInput
}

input ProjectCreateOrConnectWithoutCreatedByInput {
  create: ProjectCreateWithoutCreatedByInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutHistoryInput {
  create: ProjectCreateWithoutHistoryInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutPartsInput {
  create: ProjectCreateWithoutPartsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutStatsInput {
  create: ProjectCreateWithoutStatsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutSubthemeInput {
  create: ProjectCreateWithoutSubthemeInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutSupervisorInput {
  create: ProjectCreateWithoutSupervisorInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutCreatedByInput {
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateWithoutHistoryInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateWithoutPartsInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateWithoutStatsInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateWithoutSubthemeInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateWithoutSupervisorInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
}

input ProjectHistoryCreateManyProjectInput {
  fieldName: String!
  newValue: String!
  oldValue: String
  userId: String!
}

input ProjectHistoryCreateManyProjectInputEnvelope {
  data: [ProjectHistoryCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input ProjectHistoryCreateManyUserInput {
  fieldName: String!
  newValue: String!
  oldValue: String
  projectId: String!
}

input ProjectHistoryCreateManyUserInputEnvelope {
  data: [ProjectHistoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ProjectHistoryCreateNestedManyWithoutProjectInput {
  connect: [ProjectHistoryWhereUniqueInput!]
  connectOrCreate: [ProjectHistoryCreateOrConnectWithoutProjectInput!]
  create: [ProjectHistoryCreateWithoutProjectInput!]
  createMany: ProjectHistoryCreateManyProjectInputEnvelope
}

input ProjectHistoryCreateNestedManyWithoutUserInput {
  connect: [ProjectHistoryWhereUniqueInput!]
  connectOrCreate: [ProjectHistoryCreateOrConnectWithoutUserInput!]
  create: [ProjectHistoryCreateWithoutUserInput!]
  createMany: ProjectHistoryCreateManyUserInputEnvelope
}

input ProjectHistoryCreateOrConnectWithoutProjectInput {
  create: ProjectHistoryCreateWithoutProjectInput!
  where: ProjectHistoryWhereUniqueInput!
}

input ProjectHistoryCreateOrConnectWithoutUserInput {
  create: ProjectHistoryCreateWithoutUserInput!
  where: ProjectHistoryWhereUniqueInput!
}

input ProjectHistoryCreateWithoutProjectInput {
  fieldName: String!
  newValue: String!
  oldValue: String
  user: UserCreateNestedOneWithoutProjectHistoryInput!
}

input ProjectHistoryCreateWithoutUserInput {
  fieldName: String!
  newValue: String!
  oldValue: String
  project: ProjectCreateNestedOneWithoutHistoryInput!
}

input ProjectHistoryListRelationFilter {
  every: ProjectHistoryWhereInput
  none: ProjectHistoryWhereInput
  some: ProjectHistoryWhereInput
}

input ProjectHistoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProjectHistoryWhereInput {
  AND: [ProjectHistoryWhereInput!]
  NOT: [ProjectHistoryWhereInput!]
  OR: [ProjectHistoryWhereInput!]
  createdAt: DateTimeFilter
  fieldName: StringFilter
  id: StringFilter
  newValue: StringFilter
  oldValue: StringNullableFilter
  project: ProjectRelationFilter
  projectId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ProjectHistoryWhereUniqueInput {
  id: String
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

input ProjectOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProjectOrderByWithRelationInput {
  createdAt: SortOrder
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  description: SortOrder
  history: ProjectHistoryOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  number: SortOrder
  parts: ProjectPartOrderByRelationAggregateInput
  slug: SortOrder
  stats: StatsOnProjectOrderByRelationAggregateInput
  status: SortOrder
  subtheme: SubthemeOrderByWithRelationInput
  subthemeId: SortOrder
  supervisor: UserOrderByWithRelationInput
  supervisorId: SortOrder
  updatedAt: SortOrder
}

input ProjectPartCreateManyProjectInput {
  description: String
  name: String!
  number: Int!
  slug: String!
  type: ProjectType!
}

input ProjectPartCreateManyProjectInputEnvelope {
  data: [ProjectPartCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input ProjectPartCreateNestedManyWithoutProjectInput {
  connect: [ProjectPartWhereUniqueInput!]
  connectOrCreate: [ProjectPartCreateOrConnectWithoutProjectInput!]
  create: [ProjectPartCreateWithoutProjectInput!]
  createMany: ProjectPartCreateManyProjectInputEnvelope
}

input ProjectPartCreateNestedOneWithoutAttributesInput {
  connect: ProjectPartWhereUniqueInput
  connectOrCreate: ProjectPartCreateOrConnectWithoutAttributesInput
  create: ProjectPartCreateWithoutAttributesInput
}

input ProjectPartCreateNestedOneWithoutStonesInput {
  connect: ProjectPartWhereUniqueInput
  connectOrCreate: ProjectPartCreateOrConnectWithoutStonesInput
  create: ProjectPartCreateWithoutStonesInput
}

input ProjectPartCreateOrConnectWithoutAttributesInput {
  create: ProjectPartCreateWithoutAttributesInput!
  where: ProjectPartWhereUniqueInput!
}

input ProjectPartCreateOrConnectWithoutProjectInput {
  create: ProjectPartCreateWithoutProjectInput!
  where: ProjectPartWhereUniqueInput!
}

input ProjectPartCreateOrConnectWithoutStonesInput {
  create: ProjectPartCreateWithoutStonesInput!
  where: ProjectPartWhereUniqueInput!
}

input ProjectPartCreateWithoutAttributesInput {
  description: String
  name: String!
  number: Int!
  project: ProjectCreateNestedOneWithoutPartsInput!
  slug: String!
  stones: StonesOnProjectPartCreateNestedManyWithoutProjectPartInput
  type: ProjectType!
}

input ProjectPartCreateWithoutProjectInput {
  attributes: AttributesOnProjectPartCreateNestedManyWithoutProjectPartInput
  description: String
  name: String!
  number: Int!
  slug: String!
  stones: StonesOnProjectPartCreateNestedManyWithoutProjectPartInput
  type: ProjectType!
}

input ProjectPartCreateWithoutStonesInput {
  attributes: AttributesOnProjectPartCreateNestedManyWithoutProjectPartInput
  description: String
  name: String!
  number: Int!
  project: ProjectCreateNestedOneWithoutPartsInput!
  slug: String!
  type: ProjectType!
}

input ProjectPartListRelationFilter {
  every: ProjectPartWhereInput
  none: ProjectPartWhereInput
  some: ProjectPartWhereInput
}

input ProjectPartOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProjectPartOrderByWithRelationInput {
  attributes: AttributesOnProjectPartOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  number: SortOrder
  project: ProjectOrderByWithRelationInput
  projectId: SortOrder
  slug: SortOrder
  stones: StonesOnProjectPartOrderByRelationAggregateInput
  type: SortOrder
  updatedAt: SortOrder
}

input ProjectPartRelationFilter {
  is: ProjectPartWhereInput
  isNot: ProjectPartWhereInput
}

input ProjectPartWhereInput {
  AND: [ProjectPartWhereInput!]
  NOT: [ProjectPartWhereInput!]
  OR: [ProjectPartWhereInput!]
  attributes: AttributesOnProjectPartListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  number: IntFilter
  project: ProjectRelationFilter
  projectId: StringFilter
  slug: StringFilter
  stones: StonesOnProjectPartListRelationFilter
  type: EnumProjectTypeFilter
  updatedAt: DateTimeFilter
}

input ProjectPartWhereUniqueInput {
  id: String
  slug: String
}

input ProjectRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

enum ProjectStatus {
  BUILDING
  BUILT
  CANCELLED
  COUNTED
  DESIGNED
  DESIGNING
  PLANNED
  READY
}

enum ProjectType {
  DECOR
  FALLWALL
  FIELD_CIRCLE
  FIELD_CROSS_L1
  FIELD_CROSS_L2
  FIELD_CROSS_M50
  FIELD_FLAT
  FIELD_L1
  FIELD_L2
  FIELD_M50
  FREE_HAND
  OTHER
  SPIRAL
  STRUCTURE
  WALL_CUBE
  WALL_OCTO
  WALL_S
  WALL_SPEED
  WALL_T
  WALL_X
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  createdAt: DateTimeFilter
  createdBy: UserRelationFilter
  createdById: StringNullableFilter
  description: JsonNullableFilter
  history: ProjectHistoryListRelationFilter
  id: StringFilter
  name: StringFilter
  number: IntFilter
  parts: ProjectPartListRelationFilter
  slug: StringFilter
  stats: StatsOnProjectListRelationFilter
  status: EnumProjectStatusFilter
  subtheme: SubthemeRelationFilter
  subthemeId: StringFilter
  supervisor: UserRelationFilter
  supervisorId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ProjectWhereUniqueInput {
  id: String
  slug: String
}

type Query {
  attributes(cursor: AttributeWhereUniqueInput, distinct: [AttributeScalarFieldEnum!], orderBy: [AttributeOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeWhereInput): [Attribute!]!
  teams(cursor: TeamWhereUniqueInput, distinct: [TeamScalarFieldEnum!], orderBy: [TeamOrderByWithRelationInput!], skip: Int, take: Int, where: TeamWhereInput): [Team!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  BUILDER
  CAPTAIN
  GUEST
}

type Session {
  createdAt: DateTime!
  expiresAt: DateTime
  id: String!
  teamId: String
  token: String!
  updatedAt: DateTime!
  userId: String!
}

input SessionCreateManyUserInput {
  expiresAt: DateTime
  teamId: String
  token: String!
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  expiresAt: DateTime
  team: TeamCreateNestedOneWithoutSessionsInput
  token: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SessionOrderByWithRelationInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  team: TeamOrderByWithRelationInput
  teamId: SortOrder
  token: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  createdAt
  expiresAt
  id
  teamId
  token
  updatedAt
  userId
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  id: StringFilter
  team: TeamRelationFilter
  teamId: StringNullableFilter
  token: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SessionWhereUniqueInput {
  id: String
  token: String
}

enum SortOrder {
  asc
  desc
}

type Stat {
  _count: StatCount
  createdAt: DateTime!
  id: String!
  name: String!
  teamId: String!
  updatedAt: DateTime!
}

type StatCount {
  projects: Int!
}

input StatCreateManyTeamInput {
  name: String!
}

input StatCreateManyTeamInputEnvelope {
  data: [StatCreateManyTeamInput!]!
  skipDuplicates: Boolean
}

input StatCreateNestedManyWithoutTeamInput {
  connect: [StatWhereUniqueInput!]
  connectOrCreate: [StatCreateOrConnectWithoutTeamInput!]
  create: [StatCreateWithoutTeamInput!]
  createMany: StatCreateManyTeamInputEnvelope
}

input StatCreateNestedOneWithoutProjectsInput {
  connect: StatWhereUniqueInput
  connectOrCreate: StatCreateOrConnectWithoutProjectsInput
  create: StatCreateWithoutProjectsInput
}

input StatCreateOrConnectWithoutProjectsInput {
  create: StatCreateWithoutProjectsInput!
  where: StatWhereUniqueInput!
}

input StatCreateOrConnectWithoutTeamInput {
  create: StatCreateWithoutTeamInput!
  where: StatWhereUniqueInput!
}

input StatCreateWithoutProjectsInput {
  name: String!
}

input StatCreateWithoutTeamInput {
  name: String!
  projects: StatsOnProjectCreateNestedManyWithoutStatInput
}

input StatListRelationFilter {
  every: StatWhereInput
  none: StatWhereInput
  some: StatWhereInput
}

input StatOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  projects: StatsOnProjectOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input StatRelationFilter {
  is: StatWhereInput
  isNot: StatWhereInput
}

enum StatScalarFieldEnum {
  createdAt
  id
  name
  teamId
  updatedAt
}

input StatWhereInput {
  AND: [StatWhereInput!]
  NOT: [StatWhereInput!]
  OR: [StatWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  projects: StatsOnProjectListRelationFilter
  updatedAt: DateTimeFilter
}

input StatWhereUniqueInput {
  id: String
}

input StatsOnProjectCreateManyProjectInput {
  statId: String!
  value: String!
}

input StatsOnProjectCreateManyProjectInputEnvelope {
  data: [StatsOnProjectCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input StatsOnProjectCreateManyStatInput {
  projectId: String!
  value: String!
}

input StatsOnProjectCreateManyStatInputEnvelope {
  data: [StatsOnProjectCreateManyStatInput!]!
  skipDuplicates: Boolean
}

input StatsOnProjectCreateNestedManyWithoutProjectInput {
  connect: [StatsOnProjectWhereUniqueInput!]
  connectOrCreate: [StatsOnProjectCreateOrConnectWithoutProjectInput!]
  create: [StatsOnProjectCreateWithoutProjectInput!]
  createMany: StatsOnProjectCreateManyProjectInputEnvelope
}

input StatsOnProjectCreateNestedManyWithoutStatInput {
  connect: [StatsOnProjectWhereUniqueInput!]
  connectOrCreate: [StatsOnProjectCreateOrConnectWithoutStatInput!]
  create: [StatsOnProjectCreateWithoutStatInput!]
  createMany: StatsOnProjectCreateManyStatInputEnvelope
}

input StatsOnProjectCreateOrConnectWithoutProjectInput {
  create: StatsOnProjectCreateWithoutProjectInput!
  where: StatsOnProjectWhereUniqueInput!
}

input StatsOnProjectCreateOrConnectWithoutStatInput {
  create: StatsOnProjectCreateWithoutStatInput!
  where: StatsOnProjectWhereUniqueInput!
}

input StatsOnProjectCreateWithoutProjectInput {
  stat: StatCreateNestedOneWithoutProjectsInput!
  value: String!
}

input StatsOnProjectCreateWithoutStatInput {
  project: ProjectCreateNestedOneWithoutStatsInput!
  value: String!
}

input StatsOnProjectListRelationFilter {
  every: StatsOnProjectWhereInput
  none: StatsOnProjectWhereInput
  some: StatsOnProjectWhereInput
}

input StatsOnProjectOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatsOnProjectWhereInput {
  AND: [StatsOnProjectWhereInput!]
  NOT: [StatsOnProjectWhereInput!]
  OR: [StatsOnProjectWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  project: ProjectRelationFilter
  projectId: StringFilter
  stat: StatRelationFilter
  statId: StringFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input StatsOnProjectWhereUniqueInput {
  id: String
}

input StoneCreateManyStoneTypeInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  name: String!
  order: Int!
}

input StoneCreateManyStoneTypeInputEnvelope {
  data: [StoneCreateManyStoneTypeInput!]!
  skipDuplicates: Boolean
}

input StoneCreateNestedManyWithoutStoneTypeInput {
  connect: [StoneWhereUniqueInput!]
  connectOrCreate: [StoneCreateOrConnectWithoutStoneTypeInput!]
  create: [StoneCreateWithoutStoneTypeInput!]
  createMany: StoneCreateManyStoneTypeInputEnvelope
}

input StoneCreateNestedOneWithoutHistoryInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutHistoryInput
  create: StoneCreateWithoutHistoryInput
}

input StoneCreateNestedOneWithoutInventoryInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutInventoryInput
  create: StoneCreateWithoutInventoryInput
}

input StoneCreateNestedOneWithoutProjectPartsInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutProjectPartsInput
  create: StoneCreateWithoutProjectPartsInput
}

input StoneCreateNestedOneWithoutSubthemesInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutSubthemesInput
  create: StoneCreateWithoutSubthemesInput
}

input StoneCreateOrConnectWithoutHistoryInput {
  create: StoneCreateWithoutHistoryInput!
  where: StoneWhereUniqueInput!
}

input StoneCreateOrConnectWithoutInventoryInput {
  create: StoneCreateWithoutInventoryInput!
  where: StoneWhereUniqueInput!
}

input StoneCreateOrConnectWithoutProjectPartsInput {
  create: StoneCreateWithoutProjectPartsInput!
  where: StoneWhereUniqueInput!
}

input StoneCreateOrConnectWithoutStoneTypeInput {
  create: StoneCreateWithoutStoneTypeInput!
  where: StoneWhereUniqueInput!
}

input StoneCreateOrConnectWithoutSubthemesInput {
  create: StoneCreateWithoutSubthemesInput!
  where: StoneWhereUniqueInput!
}

input StoneCreateWithoutHistoryInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  inventory: StoneInventoryCreateNestedManyWithoutStoneInput
  name: String!
  order: Int!
  projectParts: StonesOnProjectPartCreateNestedManyWithoutStoneInput
  stoneType: StoneTypeCreateNestedOneWithoutStonesInput!
  subthemes: StonesOnSubthemeCreateNestedManyWithoutStoneInput
}

input StoneCreateWithoutInventoryInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  history: StoneInventoryHistoryCreateNestedManyWithoutStoneInput
  name: String!
  order: Int!
  projectParts: StonesOnProjectPartCreateNestedManyWithoutStoneInput
  stoneType: StoneTypeCreateNestedOneWithoutStonesInput!
  subthemes: StonesOnSubthemeCreateNestedManyWithoutStoneInput
}

input StoneCreateWithoutProjectPartsInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  history: StoneInventoryHistoryCreateNestedManyWithoutStoneInput
  inventory: StoneInventoryCreateNestedManyWithoutStoneInput
  name: String!
  order: Int!
  stoneType: StoneTypeCreateNestedOneWithoutStonesInput!
  subthemes: StonesOnSubthemeCreateNestedManyWithoutStoneInput
}

input StoneCreateWithoutStoneTypeInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  history: StoneInventoryHistoryCreateNestedManyWithoutStoneInput
  inventory: StoneInventoryCreateNestedManyWithoutStoneInput
  name: String!
  order: Int!
  projectParts: StonesOnProjectPartCreateNestedManyWithoutStoneInput
  subthemes: StonesOnSubthemeCreateNestedManyWithoutStoneInput
}

input StoneCreateWithoutSubthemesInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  history: StoneInventoryHistoryCreateNestedManyWithoutStoneInput
  inventory: StoneInventoryCreateNestedManyWithoutStoneInput
  name: String!
  order: Int!
  projectParts: StonesOnProjectPartCreateNestedManyWithoutStoneInput
  stoneType: StoneTypeCreateNestedOneWithoutStonesInput!
}

input StoneInventoryCreateManyStoneInput {
  amount: Int!
  userId: String!
}

input StoneInventoryCreateManyStoneInputEnvelope {
  data: [StoneInventoryCreateManyStoneInput!]!
  skipDuplicates: Boolean
}

input StoneInventoryCreateManyUserInput {
  amount: Int!
  stoneId: String!
}

input StoneInventoryCreateManyUserInputEnvelope {
  data: [StoneInventoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StoneInventoryCreateNestedManyWithoutStoneInput {
  connect: [StoneInventoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryCreateOrConnectWithoutStoneInput!]
  create: [StoneInventoryCreateWithoutStoneInput!]
  createMany: StoneInventoryCreateManyStoneInputEnvelope
}

input StoneInventoryCreateNestedManyWithoutUserInput {
  connect: [StoneInventoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryCreateOrConnectWithoutUserInput!]
  create: [StoneInventoryCreateWithoutUserInput!]
  createMany: StoneInventoryCreateManyUserInputEnvelope
}

input StoneInventoryCreateOrConnectWithoutStoneInput {
  create: StoneInventoryCreateWithoutStoneInput!
  where: StoneInventoryWhereUniqueInput!
}

input StoneInventoryCreateOrConnectWithoutUserInput {
  create: StoneInventoryCreateWithoutUserInput!
  where: StoneInventoryWhereUniqueInput!
}

input StoneInventoryCreateWithoutStoneInput {
  amount: Int!
  user: UserCreateNestedOneWithoutStoneInventoryInput!
}

input StoneInventoryCreateWithoutUserInput {
  amount: Int!
  stone: StoneCreateNestedOneWithoutInventoryInput!
}

input StoneInventoryHistoryCreateManyStoneInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  userId: String!
}

input StoneInventoryHistoryCreateManyStoneInputEnvelope {
  data: [StoneInventoryHistoryCreateManyStoneInput!]!
  skipDuplicates: Boolean
}

input StoneInventoryHistoryCreateManyUserInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  stoneId: String!
}

input StoneInventoryHistoryCreateManyUserInputEnvelope {
  data: [StoneInventoryHistoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StoneInventoryHistoryCreateNestedManyWithoutStoneInput {
  connect: [StoneInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryHistoryCreateOrConnectWithoutStoneInput!]
  create: [StoneInventoryHistoryCreateWithoutStoneInput!]
  createMany: StoneInventoryHistoryCreateManyStoneInputEnvelope
}

input StoneInventoryHistoryCreateNestedManyWithoutUserInput {
  connect: [StoneInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryHistoryCreateOrConnectWithoutUserInput!]
  create: [StoneInventoryHistoryCreateWithoutUserInput!]
  createMany: StoneInventoryHistoryCreateManyUserInputEnvelope
}

input StoneInventoryHistoryCreateOrConnectWithoutStoneInput {
  create: StoneInventoryHistoryCreateWithoutStoneInput!
  where: StoneInventoryHistoryWhereUniqueInput!
}

input StoneInventoryHistoryCreateOrConnectWithoutUserInput {
  create: StoneInventoryHistoryCreateWithoutUserInput!
  where: StoneInventoryHistoryWhereUniqueInput!
}

input StoneInventoryHistoryCreateWithoutStoneInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  user: UserCreateNestedOneWithoutStoneInventoryHistoryInput!
}

input StoneInventoryHistoryCreateWithoutUserInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  stone: StoneCreateNestedOneWithoutHistoryInput!
}

input StoneInventoryHistoryListRelationFilter {
  every: StoneInventoryHistoryWhereInput
  none: StoneInventoryHistoryWhereInput
  some: StoneInventoryHistoryWhereInput
}

input StoneInventoryHistoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input StoneInventoryHistoryWhereInput {
  AND: [StoneInventoryHistoryWhereInput!]
  NOT: [StoneInventoryHistoryWhereInput!]
  OR: [StoneInventoryHistoryWhereInput!]
  createdAt: DateTimeFilter
  fieldName: StringFilter
  id: StringFilter
  newValue: StringFilter
  oldValue: StringFilter
  stone: StoneRelationFilter
  stoneId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StoneInventoryHistoryWhereUniqueInput {
  id: String
}

input StoneInventoryListRelationFilter {
  every: StoneInventoryWhereInput
  none: StoneInventoryWhereInput
  some: StoneInventoryWhereInput
}

input StoneInventoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input StoneInventoryWhereInput {
  AND: [StoneInventoryWhereInput!]
  NOT: [StoneInventoryWhereInput!]
  OR: [StoneInventoryWhereInput!]
  amount: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  stone: StoneRelationFilter
  stoneId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StoneInventoryWhereUniqueInput {
  id: String
}

input StoneListRelationFilter {
  every: StoneWhereInput
  none: StoneWhereInput
  some: StoneWhereInput
}

input StoneOrderByRelationAggregateInput {
  _count: SortOrder
}

input StoneRelationFilter {
  is: StoneWhereInput
  isNot: StoneWhereInput
}

type StoneType {
  _count: StoneTypeCount
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  order: Int!
  teamId: String!
  updatedAt: DateTime!
}

type StoneTypeCount {
  stones: Int!
}

input StoneTypeCreateManyTeamInput {
  description: String
  name: String!
  order: Int!
}

input StoneTypeCreateManyTeamInputEnvelope {
  data: [StoneTypeCreateManyTeamInput!]!
  skipDuplicates: Boolean
}

input StoneTypeCreateNestedManyWithoutTeamInput {
  connect: [StoneTypeWhereUniqueInput!]
  connectOrCreate: [StoneTypeCreateOrConnectWithoutTeamInput!]
  create: [StoneTypeCreateWithoutTeamInput!]
  createMany: StoneTypeCreateManyTeamInputEnvelope
}

input StoneTypeCreateNestedOneWithoutStonesInput {
  connect: StoneTypeWhereUniqueInput
  connectOrCreate: StoneTypeCreateOrConnectWithoutStonesInput
  create: StoneTypeCreateWithoutStonesInput
}

input StoneTypeCreateOrConnectWithoutStonesInput {
  create: StoneTypeCreateWithoutStonesInput!
  where: StoneTypeWhereUniqueInput!
}

input StoneTypeCreateOrConnectWithoutTeamInput {
  create: StoneTypeCreateWithoutTeamInput!
  where: StoneTypeWhereUniqueInput!
}

input StoneTypeCreateWithoutStonesInput {
  description: String
  name: String!
  order: Int!
}

input StoneTypeCreateWithoutTeamInput {
  description: String
  name: String!
  order: Int!
  stones: StoneCreateNestedManyWithoutStoneTypeInput
}

input StoneTypeListRelationFilter {
  every: StoneTypeWhereInput
  none: StoneTypeWhereInput
  some: StoneTypeWhereInput
}

input StoneTypeOrderByRelationAggregateInput {
  _count: SortOrder
}

input StoneTypeOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  order: SortOrder
  stones: StoneOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input StoneTypeRelationFilter {
  is: StoneTypeWhereInput
  isNot: StoneTypeWhereInput
}

enum StoneTypeScalarFieldEnum {
  createdAt
  description
  id
  name
  order
  teamId
  updatedAt
}

input StoneTypeWhereInput {
  AND: [StoneTypeWhereInput!]
  NOT: [StoneTypeWhereInput!]
  OR: [StoneTypeWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  order: IntFilter
  stones: StoneListRelationFilter
  updatedAt: DateTimeFilter
}

input StoneTypeWhereUniqueInput {
  id: String
}

input StoneWhereInput {
  AND: [StoneWhereInput!]
  NOT: [StoneWhereInput!]
  OR: [StoneWhereInput!]
  alias: StringFilter
  alias2: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  hex: StringFilter
  hex2: StringNullableFilter
  history: StoneInventoryHistoryListRelationFilter
  id: StringFilter
  inventory: StoneInventoryListRelationFilter
  name: StringFilter
  order: IntFilter
  projectParts: StonesOnProjectPartListRelationFilter
  stoneType: StoneTypeRelationFilter
  stoneTypeId: StringFilter
  subthemes: StonesOnSubthemeListRelationFilter
  updatedAt: DateTimeFilter
}

input StoneWhereUniqueInput {
  id: String
}

input StonesOnProjectPartCreateManyProjectPartInput {
  amount: Int!
  stoneId: String!
  userId: String!
}

input StonesOnProjectPartCreateManyProjectPartInputEnvelope {
  data: [StonesOnProjectPartCreateManyProjectPartInput!]!
  skipDuplicates: Boolean
}

input StonesOnProjectPartCreateManyStoneInput {
  amount: Int!
  projectPartId: String!
  userId: String!
}

input StonesOnProjectPartCreateManyStoneInputEnvelope {
  data: [StonesOnProjectPartCreateManyStoneInput!]!
  skipDuplicates: Boolean
}

input StonesOnProjectPartCreateManyUserInput {
  amount: Int!
  projectPartId: String!
  stoneId: String!
}

input StonesOnProjectPartCreateManyUserInputEnvelope {
  data: [StonesOnProjectPartCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StonesOnProjectPartCreateNestedManyWithoutProjectPartInput {
  connect: [StonesOnProjectPartWhereUniqueInput!]
  connectOrCreate: [StonesOnProjectPartCreateOrConnectWithoutProjectPartInput!]
  create: [StonesOnProjectPartCreateWithoutProjectPartInput!]
  createMany: StonesOnProjectPartCreateManyProjectPartInputEnvelope
}

input StonesOnProjectPartCreateNestedManyWithoutStoneInput {
  connect: [StonesOnProjectPartWhereUniqueInput!]
  connectOrCreate: [StonesOnProjectPartCreateOrConnectWithoutStoneInput!]
  create: [StonesOnProjectPartCreateWithoutStoneInput!]
  createMany: StonesOnProjectPartCreateManyStoneInputEnvelope
}

input StonesOnProjectPartCreateNestedManyWithoutUserInput {
  connect: [StonesOnProjectPartWhereUniqueInput!]
  connectOrCreate: [StonesOnProjectPartCreateOrConnectWithoutUserInput!]
  create: [StonesOnProjectPartCreateWithoutUserInput!]
  createMany: StonesOnProjectPartCreateManyUserInputEnvelope
}

input StonesOnProjectPartCreateOrConnectWithoutProjectPartInput {
  create: StonesOnProjectPartCreateWithoutProjectPartInput!
  where: StonesOnProjectPartWhereUniqueInput!
}

input StonesOnProjectPartCreateOrConnectWithoutStoneInput {
  create: StonesOnProjectPartCreateWithoutStoneInput!
  where: StonesOnProjectPartWhereUniqueInput!
}

input StonesOnProjectPartCreateOrConnectWithoutUserInput {
  create: StonesOnProjectPartCreateWithoutUserInput!
  where: StonesOnProjectPartWhereUniqueInput!
}

input StonesOnProjectPartCreateWithoutProjectPartInput {
  amount: Int!
  stone: StoneCreateNestedOneWithoutProjectPartsInput!
  user: UserCreateNestedOneWithoutStonesOnProjectPartsInput!
}

input StonesOnProjectPartCreateWithoutStoneInput {
  amount: Int!
  projectPart: ProjectPartCreateNestedOneWithoutStonesInput!
  user: UserCreateNestedOneWithoutStonesOnProjectPartsInput!
}

input StonesOnProjectPartCreateWithoutUserInput {
  amount: Int!
  projectPart: ProjectPartCreateNestedOneWithoutStonesInput!
  stone: StoneCreateNestedOneWithoutProjectPartsInput!
}

input StonesOnProjectPartListRelationFilter {
  every: StonesOnProjectPartWhereInput
  none: StonesOnProjectPartWhereInput
  some: StonesOnProjectPartWhereInput
}

input StonesOnProjectPartOrderByRelationAggregateInput {
  _count: SortOrder
}

input StonesOnProjectPartWhereInput {
  AND: [StonesOnProjectPartWhereInput!]
  NOT: [StonesOnProjectPartWhereInput!]
  OR: [StonesOnProjectPartWhereInput!]
  amount: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  projectPart: ProjectPartRelationFilter
  projectPartId: StringFilter
  stone: StoneRelationFilter
  stoneId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StonesOnProjectPartWhereUniqueInput {
  id: String
}

input StonesOnSubthemeCreateManyStoneInput {
  amount: Int!
  subthemeId: String!
  userId: String!
}

input StonesOnSubthemeCreateManyStoneInputEnvelope {
  data: [StonesOnSubthemeCreateManyStoneInput!]!
  skipDuplicates: Boolean
}

input StonesOnSubthemeCreateManySubthemeInput {
  amount: Int!
  stoneId: String!
  userId: String!
}

input StonesOnSubthemeCreateManySubthemeInputEnvelope {
  data: [StonesOnSubthemeCreateManySubthemeInput!]!
  skipDuplicates: Boolean
}

input StonesOnSubthemeCreateManyUserInput {
  amount: Int!
  stoneId: String!
  subthemeId: String!
}

input StonesOnSubthemeCreateManyUserInputEnvelope {
  data: [StonesOnSubthemeCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StonesOnSubthemeCreateNestedManyWithoutStoneInput {
  connect: [StonesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [StonesOnSubthemeCreateOrConnectWithoutStoneInput!]
  create: [StonesOnSubthemeCreateWithoutStoneInput!]
  createMany: StonesOnSubthemeCreateManyStoneInputEnvelope
}

input StonesOnSubthemeCreateNestedManyWithoutSubthemeInput {
  connect: [StonesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [StonesOnSubthemeCreateOrConnectWithoutSubthemeInput!]
  create: [StonesOnSubthemeCreateWithoutSubthemeInput!]
  createMany: StonesOnSubthemeCreateManySubthemeInputEnvelope
}

input StonesOnSubthemeCreateNestedManyWithoutUserInput {
  connect: [StonesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [StonesOnSubthemeCreateOrConnectWithoutUserInput!]
  create: [StonesOnSubthemeCreateWithoutUserInput!]
  createMany: StonesOnSubthemeCreateManyUserInputEnvelope
}

input StonesOnSubthemeCreateOrConnectWithoutStoneInput {
  create: StonesOnSubthemeCreateWithoutStoneInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeCreateOrConnectWithoutSubthemeInput {
  create: StonesOnSubthemeCreateWithoutSubthemeInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeCreateOrConnectWithoutUserInput {
  create: StonesOnSubthemeCreateWithoutUserInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeCreateWithoutStoneInput {
  amount: Int!
  subtheme: SubthemeCreateNestedOneWithoutStonesInput!
  user: UserCreateNestedOneWithoutStonesOnSubthemesInput!
}

input StonesOnSubthemeCreateWithoutSubthemeInput {
  amount: Int!
  stone: StoneCreateNestedOneWithoutSubthemesInput!
  user: UserCreateNestedOneWithoutStonesOnSubthemesInput!
}

input StonesOnSubthemeCreateWithoutUserInput {
  amount: Int!
  stone: StoneCreateNestedOneWithoutSubthemesInput!
  subtheme: SubthemeCreateNestedOneWithoutStonesInput!
}

input StonesOnSubthemeListRelationFilter {
  every: StonesOnSubthemeWhereInput
  none: StonesOnSubthemeWhereInput
  some: StonesOnSubthemeWhereInput
}

input StonesOnSubthemeOrderByRelationAggregateInput {
  _count: SortOrder
}

input StonesOnSubthemeWhereInput {
  AND: [StonesOnSubthemeWhereInput!]
  NOT: [StonesOnSubthemeWhereInput!]
  OR: [StonesOnSubthemeWhereInput!]
  amount: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  stone: StoneRelationFilter
  stoneId: StringFilter
  subtheme: SubthemeRelationFilter
  subthemeId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StonesOnSubthemeWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input SubthemeCreateManyEventInput {
  color: String!
  name: String!
  order: Int!
  slug: String!
}

input SubthemeCreateManyEventInputEnvelope {
  data: [SubthemeCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input SubthemeCreateNestedManyWithoutEventInput {
  connect: [SubthemeWhereUniqueInput!]
  connectOrCreate: [SubthemeCreateOrConnectWithoutEventInput!]
  create: [SubthemeCreateWithoutEventInput!]
  createMany: SubthemeCreateManyEventInputEnvelope
}

input SubthemeCreateNestedOneWithoutAttributesInput {
  connect: SubthemeWhereUniqueInput
  connectOrCreate: SubthemeCreateOrConnectWithoutAttributesInput
  create: SubthemeCreateWithoutAttributesInput
}

input SubthemeCreateNestedOneWithoutProjectsInput {
  connect: SubthemeWhereUniqueInput
  connectOrCreate: SubthemeCreateOrConnectWithoutProjectsInput
  create: SubthemeCreateWithoutProjectsInput
}

input SubthemeCreateNestedOneWithoutStonesInput {
  connect: SubthemeWhereUniqueInput
  connectOrCreate: SubthemeCreateOrConnectWithoutStonesInput
  create: SubthemeCreateWithoutStonesInput
}

input SubthemeCreateOrConnectWithoutAttributesInput {
  create: SubthemeCreateWithoutAttributesInput!
  where: SubthemeWhereUniqueInput!
}

input SubthemeCreateOrConnectWithoutEventInput {
  create: SubthemeCreateWithoutEventInput!
  where: SubthemeWhereUniqueInput!
}

input SubthemeCreateOrConnectWithoutProjectsInput {
  create: SubthemeCreateWithoutProjectsInput!
  where: SubthemeWhereUniqueInput!
}

input SubthemeCreateOrConnectWithoutStonesInput {
  create: SubthemeCreateWithoutStonesInput!
  where: SubthemeWhereUniqueInput!
}

input SubthemeCreateWithoutAttributesInput {
  color: String!
  event: EventCreateNestedOneWithoutSubthemesInput!
  name: String!
  order: Int!
  projects: ProjectCreateNestedManyWithoutSubthemeInput
  slug: String!
  stones: StonesOnSubthemeCreateNestedManyWithoutSubthemeInput
}

input SubthemeCreateWithoutEventInput {
  attributes: AttributesOnSubthemeCreateNestedManyWithoutSubthemeInput
  color: String!
  name: String!
  order: Int!
  projects: ProjectCreateNestedManyWithoutSubthemeInput
  slug: String!
  stones: StonesOnSubthemeCreateNestedManyWithoutSubthemeInput
}

input SubthemeCreateWithoutProjectsInput {
  attributes: AttributesOnSubthemeCreateNestedManyWithoutSubthemeInput
  color: String!
  event: EventCreateNestedOneWithoutSubthemesInput!
  name: String!
  order: Int!
  slug: String!
  stones: StonesOnSubthemeCreateNestedManyWithoutSubthemeInput
}

input SubthemeCreateWithoutStonesInput {
  attributes: AttributesOnSubthemeCreateNestedManyWithoutSubthemeInput
  color: String!
  event: EventCreateNestedOneWithoutSubthemesInput!
  name: String!
  order: Int!
  projects: ProjectCreateNestedManyWithoutSubthemeInput
  slug: String!
}

input SubthemeListRelationFilter {
  every: SubthemeWhereInput
  none: SubthemeWhereInput
  some: SubthemeWhereInput
}

input SubthemeOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubthemeOrderByWithRelationInput {
  attributes: AttributesOnSubthemeOrderByRelationAggregateInput
  color: SortOrder
  createdAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  name: SortOrder
  order: SortOrder
  projects: ProjectOrderByRelationAggregateInput
  slug: SortOrder
  stones: StonesOnSubthemeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input SubthemeRelationFilter {
  is: SubthemeWhereInput
  isNot: SubthemeWhereInput
}

input SubthemeWhereInput {
  AND: [SubthemeWhereInput!]
  NOT: [SubthemeWhereInput!]
  OR: [SubthemeWhereInput!]
  attributes: AttributesOnSubthemeListRelationFilter
  color: StringFilter
  createdAt: DateTimeFilter
  event: EventRelationFilter
  eventId: StringFilter
  id: StringFilter
  name: StringFilter
  order: IntFilter
  projects: ProjectListRelationFilter
  slug: StringFilter
  stones: StonesOnSubthemeListRelationFilter
  updatedAt: DateTimeFilter
}

input SubthemeWhereUniqueInput {
  id: String
  slug: String
}

type Team {
  _count: TeamCount
  attributes(cursor: AttributeWhereUniqueInput, distinct: [AttributeScalarFieldEnum!], orderBy: [AttributeOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeWhereInput): [Attribute!]!
  createdAt: DateTime!
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  id: String!
  members(cursor: MemberWhereUniqueInput, distinct: [MemberScalarFieldEnum!], orderBy: [MemberOrderByWithRelationInput!], skip: Int, take: Int, where: MemberWhereInput): [Member!]!
  name: String!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  stats(cursor: StatWhereUniqueInput, distinct: [StatScalarFieldEnum!], orderBy: [StatOrderByWithRelationInput!], skip: Int, take: Int, where: StatWhereInput): [Stat!]!
  stoneTypes(cursor: StoneTypeWhereUniqueInput, distinct: [StoneTypeScalarFieldEnum!], orderBy: [StoneTypeOrderByWithRelationInput!], skip: Int, take: Int, where: StoneTypeWhereInput): [StoneType!]!
  updatedAt: DateTime!
}

type TeamCount {
  attributes: Int!
  events: Int!
  members: Int!
  sessions: Int!
  stats: Int!
  stoneTypes: Int!
}

input TeamCreateNestedOneWithoutSessionsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutSessionsInput
  create: TeamCreateWithoutSessionsInput
}

input TeamCreateOrConnectWithoutSessionsInput {
  create: TeamCreateWithoutSessionsInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateWithoutSessionsInput {
  attributes: AttributeCreateNestedManyWithoutTeamInput
  events: EventCreateNestedManyWithoutTeamInput
  members: MemberCreateNestedManyWithoutTeamInput
  name: String!
  stats: StatCreateNestedManyWithoutTeamInput
  stoneTypes: StoneTypeCreateNestedManyWithoutTeamInput
}

input TeamOrderByWithRelationInput {
  attributes: AttributeOrderByRelationAggregateInput
  createdAt: SortOrder
  events: EventOrderByRelationAggregateInput
  id: SortOrder
  members: MemberOrderByRelationAggregateInput
  name: SortOrder
  sessions: SessionOrderByRelationAggregateInput
  stats: StatOrderByRelationAggregateInput
  stoneTypes: StoneTypeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input TeamRelationFilter {
  is: TeamWhereInput
  isNot: TeamWhereInput
}

enum TeamScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  attributes: AttributeListRelationFilter
  createdAt: DateTimeFilter
  events: EventListRelationFilter
  id: StringFilter
  members: MemberListRelationFilter
  name: StringFilter
  sessions: SessionListRelationFilter
  stats: StatListRelationFilter
  stoneTypes: StoneTypeListRelationFilter
  updatedAt: DateTimeFilter
}

input TeamWhereUniqueInput {
  id: String
}

input UserCreateNestedOneWithoutAttributeInventoryHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributeInventoryHistoryInput
  create: UserCreateWithoutAttributeInventoryHistoryInput
}

input UserCreateNestedOneWithoutAttributeInventoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributeInventoryInput
  create: UserCreateWithoutAttributeInventoryInput
}

input UserCreateNestedOneWithoutAttributesOnProjectPartsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributesOnProjectPartsInput
  create: UserCreateWithoutAttributesOnProjectPartsInput
}

input UserCreateNestedOneWithoutAttributesOnSubthemesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributesOnSubthemesInput
  create: UserCreateWithoutAttributesOnSubthemesInput
}

input UserCreateNestedOneWithoutCreatedProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatedProjectsInput
  create: UserCreateWithoutCreatedProjectsInput
}

input UserCreateNestedOneWithoutProjectHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectHistoryInput
  create: UserCreateWithoutProjectHistoryInput
}

input UserCreateNestedOneWithoutStoneInventoryHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStoneInventoryHistoryInput
  create: UserCreateWithoutStoneInventoryHistoryInput
}

input UserCreateNestedOneWithoutStoneInventoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStoneInventoryInput
  create: UserCreateWithoutStoneInventoryInput
}

input UserCreateNestedOneWithoutStonesOnProjectPartsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStonesOnProjectPartsInput
  create: UserCreateWithoutStonesOnProjectPartsInput
}

input UserCreateNestedOneWithoutStonesOnSubthemesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStonesOnSubthemesInput
  create: UserCreateWithoutStonesOnSubthemesInput
}

input UserCreateNestedOneWithoutSupervisingProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSupervisingProjectsInput
  create: UserCreateWithoutSupervisingProjectsInput
}

input UserCreateNestedOneWithoutTeamsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTeamsInput
  create: UserCreateWithoutTeamsInput
}

input UserCreateOrConnectWithoutAttributeInventoryHistoryInput {
  create: UserCreateWithoutAttributeInventoryHistoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAttributeInventoryInput {
  create: UserCreateWithoutAttributeInventoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAttributesOnProjectPartsInput {
  create: UserCreateWithoutAttributesOnProjectPartsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAttributesOnSubthemesInput {
  create: UserCreateWithoutAttributesOnSubthemesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCreatedProjectsInput {
  create: UserCreateWithoutCreatedProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProjectHistoryInput {
  create: UserCreateWithoutProjectHistoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStoneInventoryHistoryInput {
  create: UserCreateWithoutStoneInventoryHistoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStoneInventoryInput {
  create: UserCreateWithoutStoneInventoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStonesOnProjectPartsInput {
  create: UserCreateWithoutStonesOnProjectPartsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStonesOnSubthemesInput {
  create: UserCreateWithoutStonesOnSubthemesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSupervisingProjectsInput {
  create: UserCreateWithoutSupervisingProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTeamsInput {
  create: UserCreateWithoutTeamsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAttributeInventoryHistoryInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutAttributeInventoryInput {
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutAttributesOnProjectPartsInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutAttributesOnSubthemesInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutCreatedProjectsInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutProjectHistoryInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStoneInventoryHistoryInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStoneInventoryInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStonesOnProjectPartsInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStonesOnSubthemesInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSupervisingProjectsInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutTeamsInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectPartCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectPartCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
}

input UserOrderByWithRelationInput {
  attributeInventory: AttributeInventoryOrderByRelationAggregateInput
  attributeInventoryHistory: AttributeInventoryHistoryOrderByRelationAggregateInput
  attributesOnProjectParts: AttributesOnProjectPartOrderByRelationAggregateInput
  attributesOnSubthemes: AttributesOnSubthemeOrderByRelationAggregateInput
  avatar: SortOrder
  createdAt: SortOrder
  createdProjects: ProjectOrderByRelationAggregateInput
  displayName: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  lastName: SortOrder
  password: SortOrder
  projectHistory: ProjectHistoryOrderByRelationAggregateInput
  sessions: SessionOrderByRelationAggregateInput
  slug: SortOrder
  stoneInventory: StoneInventoryOrderByRelationAggregateInput
  stoneInventoryHistory: StoneInventoryHistoryOrderByRelationAggregateInput
  stonesOnProjectParts: StonesOnProjectPartOrderByRelationAggregateInput
  stonesOnSubthemes: StonesOnSubthemeOrderByRelationAggregateInput
  supervisingProjects: ProjectOrderByRelationAggregateInput
  teams: MemberOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  attributeInventory: AttributeInventoryListRelationFilter
  attributeInventoryHistory: AttributeInventoryHistoryListRelationFilter
  attributesOnProjectParts: AttributesOnProjectPartListRelationFilter
  attributesOnSubthemes: AttributesOnSubthemeListRelationFilter
  avatar: StringNullableFilter
  createdAt: DateTimeFilter
  createdProjects: ProjectListRelationFilter
  displayName: StringFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  isAdmin: BoolFilter
  lastName: StringFilter
  password: StringNullableFilter
  projectHistory: ProjectHistoryListRelationFilter
  sessions: SessionListRelationFilter
  slug: StringFilter
  stoneInventory: StoneInventoryListRelationFilter
  stoneInventoryHistory: StoneInventoryHistoryListRelationFilter
  stonesOnProjectParts: StonesOnProjectPartListRelationFilter
  stonesOnSubthemes: StonesOnSubthemeListRelationFilter
  supervisingProjects: ProjectListRelationFilter
  teams: MemberListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  slug: String
}
