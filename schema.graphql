# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attribute {
  _count: AttributeCount
  createdAt: DateTime!
  id: String!
  inventory(cursor: AttributeInventoryWhereUniqueInput, distinct: [AttributeInventoryScalarFieldEnum!], orderBy: [AttributeInventoryOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeInventoryWhereInput): [AttributeInventory!]!
  inventoryHistory(cursor: AttributeInventoryHistoryWhereUniqueInput, distinct: [AttributeInventoryHistoryScalarFieldEnum!], orderBy: [AttributeInventoryHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeInventoryHistoryWhereInput): [AttributeInventoryHistory!]!
  name: String!
  namePlural: String!
  projectParts(cursor: AttributesOnProjectWhereUniqueInput, distinct: [AttributesOnProjectScalarFieldEnum!], orderBy: [AttributesOnProjectOrderByWithRelationInput!], skip: Int, take: Int, where: AttributesOnProjectWhereInput): [AttributesOnProject!]!
  subthemes(cursor: AttributesOnSubthemeWhereUniqueInput, distinct: [AttributesOnSubthemeScalarFieldEnum!], orderBy: [AttributesOnSubthemeOrderByWithRelationInput!], skip: Int, take: Int, where: AttributesOnSubthemeWhereInput): [AttributesOnSubtheme!]!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
}

type AttributeCount {
  inventory: Int!
  inventoryHistory: Int!
  projectParts: Int!
  subthemes: Int!
}

input AttributeCreateInput {
  inventory: AttributeInventoryCreateNestedManyWithoutAttributeInput
  inventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  projectParts: AttributesOnProjectCreateNestedManyWithoutAttributeInput
  subthemes: AttributesOnSubthemeCreateNestedManyWithoutAttributeInput
}

input AttributeCreateNestedOneWithoutInventoryHistoryInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutInventoryHistoryInput
  create: AttributeCreateWithoutInventoryHistoryInput
}

input AttributeCreateNestedOneWithoutInventoryInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutInventoryInput
  create: AttributeCreateWithoutInventoryInput
}

input AttributeCreateNestedOneWithoutProjectPartsInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutProjectPartsInput
  create: AttributeCreateWithoutProjectPartsInput
}

input AttributeCreateNestedOneWithoutSubthemesInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutSubthemesInput
  create: AttributeCreateWithoutSubthemesInput
}

input AttributeCreateOrConnectWithoutInventoryHistoryInput {
  create: AttributeCreateWithoutInventoryHistoryInput!
  where: AttributeWhereUniqueInput!
}

input AttributeCreateOrConnectWithoutInventoryInput {
  create: AttributeCreateWithoutInventoryInput!
  where: AttributeWhereUniqueInput!
}

input AttributeCreateOrConnectWithoutProjectPartsInput {
  create: AttributeCreateWithoutProjectPartsInput!
  where: AttributeWhereUniqueInput!
}

input AttributeCreateOrConnectWithoutSubthemesInput {
  create: AttributeCreateWithoutSubthemesInput!
  where: AttributeWhereUniqueInput!
}

input AttributeCreateWithoutInventoryHistoryInput {
  inventory: AttributeInventoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  projectParts: AttributesOnProjectCreateNestedManyWithoutAttributeInput
  subthemes: AttributesOnSubthemeCreateNestedManyWithoutAttributeInput
}

input AttributeCreateWithoutInventoryInput {
  inventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  projectParts: AttributesOnProjectCreateNestedManyWithoutAttributeInput
  subthemes: AttributesOnSubthemeCreateNestedManyWithoutAttributeInput
}

input AttributeCreateWithoutProjectPartsInput {
  inventory: AttributeInventoryCreateNestedManyWithoutAttributeInput
  inventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  subthemes: AttributesOnSubthemeCreateNestedManyWithoutAttributeInput
}

input AttributeCreateWithoutSubthemesInput {
  inventory: AttributeInventoryCreateNestedManyWithoutAttributeInput
  inventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput
  name: String!
  namePlural: String!
  projectParts: AttributesOnProjectCreateNestedManyWithoutAttributeInput
}

type AttributeInventory {
  amount: Int!
  attributeId: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  userId: String!
}

input AttributeInventoryCreateManyAttributeInput {
  amount: Int!
  userId: String!
}

input AttributeInventoryCreateManyAttributeInputEnvelope {
  data: [AttributeInventoryCreateManyAttributeInput!]!
  skipDuplicates: Boolean
}

input AttributeInventoryCreateManyUserInput {
  amount: Int!
  attributeId: String!
}

input AttributeInventoryCreateManyUserInputEnvelope {
  data: [AttributeInventoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AttributeInventoryCreateNestedManyWithoutAttributeInput {
  connect: [AttributeInventoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryCreateOrConnectWithoutAttributeInput!]
  create: [AttributeInventoryCreateWithoutAttributeInput!]
  createMany: AttributeInventoryCreateManyAttributeInputEnvelope
}

input AttributeInventoryCreateNestedManyWithoutUserInput {
  connect: [AttributeInventoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryCreateOrConnectWithoutUserInput!]
  create: [AttributeInventoryCreateWithoutUserInput!]
  createMany: AttributeInventoryCreateManyUserInputEnvelope
}

input AttributeInventoryCreateOrConnectWithoutAttributeInput {
  create: AttributeInventoryCreateWithoutAttributeInput!
  where: AttributeInventoryWhereUniqueInput!
}

input AttributeInventoryCreateOrConnectWithoutUserInput {
  create: AttributeInventoryCreateWithoutUserInput!
  where: AttributeInventoryWhereUniqueInput!
}

input AttributeInventoryCreateWithoutAttributeInput {
  amount: Int!
  user: UserCreateNestedOneWithoutAttributeInventoryInput!
}

input AttributeInventoryCreateWithoutUserInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutInventoryInput!
}

type AttributeInventoryHistory {
  attributeId: String!
  createdAt: DateTime!
  fieldName: String!
  id: String!
  newValue: String!
  oldValue: String!
  updatedAt: DateTime!
  userId: String!
}

input AttributeInventoryHistoryCreateManyAttributeInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  userId: String!
}

input AttributeInventoryHistoryCreateManyAttributeInputEnvelope {
  data: [AttributeInventoryHistoryCreateManyAttributeInput!]!
  skipDuplicates: Boolean
}

input AttributeInventoryHistoryCreateManyUserInput {
  attributeId: String!
  fieldName: String!
  newValue: String!
  oldValue: String!
}

input AttributeInventoryHistoryCreateManyUserInputEnvelope {
  data: [AttributeInventoryHistoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AttributeInventoryHistoryCreateNestedManyWithoutAttributeInput {
  connect: [AttributeInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryHistoryCreateOrConnectWithoutAttributeInput!]
  create: [AttributeInventoryHistoryCreateWithoutAttributeInput!]
  createMany: AttributeInventoryHistoryCreateManyAttributeInputEnvelope
}

input AttributeInventoryHistoryCreateNestedManyWithoutUserInput {
  connect: [AttributeInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryHistoryCreateOrConnectWithoutUserInput!]
  create: [AttributeInventoryHistoryCreateWithoutUserInput!]
  createMany: AttributeInventoryHistoryCreateManyUserInputEnvelope
}

input AttributeInventoryHistoryCreateOrConnectWithoutAttributeInput {
  create: AttributeInventoryHistoryCreateWithoutAttributeInput!
  where: AttributeInventoryHistoryWhereUniqueInput!
}

input AttributeInventoryHistoryCreateOrConnectWithoutUserInput {
  create: AttributeInventoryHistoryCreateWithoutUserInput!
  where: AttributeInventoryHistoryWhereUniqueInput!
}

input AttributeInventoryHistoryCreateWithoutAttributeInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  user: UserCreateNestedOneWithoutAttributeInventoryHistoryInput!
}

input AttributeInventoryHistoryCreateWithoutUserInput {
  attribute: AttributeCreateNestedOneWithoutInventoryHistoryInput!
  fieldName: String!
  newValue: String!
  oldValue: String!
}

input AttributeInventoryHistoryListRelationFilter {
  every: AttributeInventoryHistoryWhereInput
  none: AttributeInventoryHistoryWhereInput
  some: AttributeInventoryHistoryWhereInput
}

input AttributeInventoryHistoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributeInventoryHistoryOrderByWithRelationInput {
  attribute: AttributeOrderByWithRelationInput
  attributeId: SortOrder
  createdAt: SortOrder
  fieldName: SortOrder
  id: SortOrder
  newValue: SortOrder
  oldValue: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AttributeInventoryHistoryScalarFieldEnum {
  attributeId
  createdAt
  fieldName
  id
  newValue
  oldValue
  updatedAt
  userId
}

input AttributeInventoryHistoryScalarWhereInput {
  AND: [AttributeInventoryHistoryScalarWhereInput!]
  NOT: [AttributeInventoryHistoryScalarWhereInput!]
  OR: [AttributeInventoryHistoryScalarWhereInput!]
  attributeId: StringFilter
  createdAt: DateTimeFilter
  fieldName: StringFilter
  id: StringFilter
  newValue: StringFilter
  oldValue: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AttributeInventoryHistoryUpdateManyMutationInput {
  fieldName: StringFieldUpdateOperationsInput
  newValue: StringFieldUpdateOperationsInput
  oldValue: StringFieldUpdateOperationsInput
}

input AttributeInventoryHistoryUpdateManyWithWhereWithoutAttributeInput {
  data: AttributeInventoryHistoryUpdateManyMutationInput!
  where: AttributeInventoryHistoryScalarWhereInput!
}

input AttributeInventoryHistoryUpdateManyWithWhereWithoutUserInput {
  data: AttributeInventoryHistoryUpdateManyMutationInput!
  where: AttributeInventoryHistoryScalarWhereInput!
}

input AttributeInventoryHistoryUpdateManyWithoutAttributeInput {
  connect: [AttributeInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryHistoryCreateOrConnectWithoutAttributeInput!]
  create: [AttributeInventoryHistoryCreateWithoutAttributeInput!]
  createMany: AttributeInventoryHistoryCreateManyAttributeInputEnvelope
  delete: [AttributeInventoryHistoryWhereUniqueInput!]
  deleteMany: [AttributeInventoryHistoryScalarWhereInput!]
  disconnect: [AttributeInventoryHistoryWhereUniqueInput!]
  set: [AttributeInventoryHistoryWhereUniqueInput!]
  update: [AttributeInventoryHistoryUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [AttributeInventoryHistoryUpdateManyWithWhereWithoutAttributeInput!]
  upsert: [AttributeInventoryHistoryUpsertWithWhereUniqueWithoutAttributeInput!]
}

input AttributeInventoryHistoryUpdateManyWithoutUserInput {
  connect: [AttributeInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryHistoryCreateOrConnectWithoutUserInput!]
  create: [AttributeInventoryHistoryCreateWithoutUserInput!]
  createMany: AttributeInventoryHistoryCreateManyUserInputEnvelope
  delete: [AttributeInventoryHistoryWhereUniqueInput!]
  deleteMany: [AttributeInventoryHistoryScalarWhereInput!]
  disconnect: [AttributeInventoryHistoryWhereUniqueInput!]
  set: [AttributeInventoryHistoryWhereUniqueInput!]
  update: [AttributeInventoryHistoryUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AttributeInventoryHistoryUpdateManyWithWhereWithoutUserInput!]
  upsert: [AttributeInventoryHistoryUpsertWithWhereUniqueWithoutUserInput!]
}

input AttributeInventoryHistoryUpdateWithWhereUniqueWithoutAttributeInput {
  data: AttributeInventoryHistoryUpdateWithoutAttributeInput!
  where: AttributeInventoryHistoryWhereUniqueInput!
}

input AttributeInventoryHistoryUpdateWithWhereUniqueWithoutUserInput {
  data: AttributeInventoryHistoryUpdateWithoutUserInput!
  where: AttributeInventoryHistoryWhereUniqueInput!
}

input AttributeInventoryHistoryUpdateWithoutAttributeInput {
  fieldName: StringFieldUpdateOperationsInput
  newValue: StringFieldUpdateOperationsInput
  oldValue: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAttributeInventoryHistoryInput
}

input AttributeInventoryHistoryUpdateWithoutUserInput {
  attribute: AttributeUpdateOneRequiredWithoutInventoryHistoryInput
  fieldName: StringFieldUpdateOperationsInput
  newValue: StringFieldUpdateOperationsInput
  oldValue: StringFieldUpdateOperationsInput
}

input AttributeInventoryHistoryUpsertWithWhereUniqueWithoutAttributeInput {
  create: AttributeInventoryHistoryCreateWithoutAttributeInput!
  update: AttributeInventoryHistoryUpdateWithoutAttributeInput!
  where: AttributeInventoryHistoryWhereUniqueInput!
}

input AttributeInventoryHistoryUpsertWithWhereUniqueWithoutUserInput {
  create: AttributeInventoryHistoryCreateWithoutUserInput!
  update: AttributeInventoryHistoryUpdateWithoutUserInput!
  where: AttributeInventoryHistoryWhereUniqueInput!
}

input AttributeInventoryHistoryWhereInput {
  AND: [AttributeInventoryHistoryWhereInput!]
  NOT: [AttributeInventoryHistoryWhereInput!]
  OR: [AttributeInventoryHistoryWhereInput!]
  attribute: AttributeRelationFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  fieldName: StringFilter
  id: StringFilter
  newValue: StringFilter
  oldValue: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AttributeInventoryHistoryWhereUniqueInput {
  id: String
}

input AttributeInventoryListRelationFilter {
  every: AttributeInventoryWhereInput
  none: AttributeInventoryWhereInput
  some: AttributeInventoryWhereInput
}

input AttributeInventoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributeInventoryOrderByWithRelationInput {
  amount: SortOrder
  attribute: AttributeOrderByWithRelationInput
  attributeId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AttributeInventoryScalarFieldEnum {
  amount
  attributeId
  createdAt
  id
  updatedAt
  userId
}

input AttributeInventoryScalarWhereInput {
  AND: [AttributeInventoryScalarWhereInput!]
  NOT: [AttributeInventoryScalarWhereInput!]
  OR: [AttributeInventoryScalarWhereInput!]
  amount: IntFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AttributeInventoryUpdateManyMutationInput {
  amount: IntFieldUpdateOperationsInput
}

input AttributeInventoryUpdateManyWithWhereWithoutAttributeInput {
  data: AttributeInventoryUpdateManyMutationInput!
  where: AttributeInventoryScalarWhereInput!
}

input AttributeInventoryUpdateManyWithWhereWithoutUserInput {
  data: AttributeInventoryUpdateManyMutationInput!
  where: AttributeInventoryScalarWhereInput!
}

input AttributeInventoryUpdateManyWithoutAttributeInput {
  connect: [AttributeInventoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryCreateOrConnectWithoutAttributeInput!]
  create: [AttributeInventoryCreateWithoutAttributeInput!]
  createMany: AttributeInventoryCreateManyAttributeInputEnvelope
  delete: [AttributeInventoryWhereUniqueInput!]
  deleteMany: [AttributeInventoryScalarWhereInput!]
  disconnect: [AttributeInventoryWhereUniqueInput!]
  set: [AttributeInventoryWhereUniqueInput!]
  update: [AttributeInventoryUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [AttributeInventoryUpdateManyWithWhereWithoutAttributeInput!]
  upsert: [AttributeInventoryUpsertWithWhereUniqueWithoutAttributeInput!]
}

input AttributeInventoryUpdateManyWithoutUserInput {
  connect: [AttributeInventoryWhereUniqueInput!]
  connectOrCreate: [AttributeInventoryCreateOrConnectWithoutUserInput!]
  create: [AttributeInventoryCreateWithoutUserInput!]
  createMany: AttributeInventoryCreateManyUserInputEnvelope
  delete: [AttributeInventoryWhereUniqueInput!]
  deleteMany: [AttributeInventoryScalarWhereInput!]
  disconnect: [AttributeInventoryWhereUniqueInput!]
  set: [AttributeInventoryWhereUniqueInput!]
  update: [AttributeInventoryUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AttributeInventoryUpdateManyWithWhereWithoutUserInput!]
  upsert: [AttributeInventoryUpsertWithWhereUniqueWithoutUserInput!]
}

input AttributeInventoryUpdateWithWhereUniqueWithoutAttributeInput {
  data: AttributeInventoryUpdateWithoutAttributeInput!
  where: AttributeInventoryWhereUniqueInput!
}

input AttributeInventoryUpdateWithWhereUniqueWithoutUserInput {
  data: AttributeInventoryUpdateWithoutUserInput!
  where: AttributeInventoryWhereUniqueInput!
}

input AttributeInventoryUpdateWithoutAttributeInput {
  amount: IntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAttributeInventoryInput
}

input AttributeInventoryUpdateWithoutUserInput {
  amount: IntFieldUpdateOperationsInput
  attribute: AttributeUpdateOneRequiredWithoutInventoryInput
}

input AttributeInventoryUpsertWithWhereUniqueWithoutAttributeInput {
  create: AttributeInventoryCreateWithoutAttributeInput!
  update: AttributeInventoryUpdateWithoutAttributeInput!
  where: AttributeInventoryWhereUniqueInput!
}

input AttributeInventoryUpsertWithWhereUniqueWithoutUserInput {
  create: AttributeInventoryCreateWithoutUserInput!
  update: AttributeInventoryUpdateWithoutUserInput!
  where: AttributeInventoryWhereUniqueInput!
}

input AttributeInventoryWhereInput {
  AND: [AttributeInventoryWhereInput!]
  NOT: [AttributeInventoryWhereInput!]
  OR: [AttributeInventoryWhereInput!]
  amount: IntFilter
  attribute: AttributeRelationFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AttributeInventoryWhereUniqueInput {
  id: String
}

input AttributeListRelationFilter {
  every: AttributeWhereInput
  none: AttributeWhereInput
  some: AttributeWhereInput
}

input AttributeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributeOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  inventory: AttributeInventoryOrderByRelationAggregateInput
  inventoryHistory: AttributeInventoryHistoryOrderByRelationAggregateInput
  name: SortOrder
  namePlural: SortOrder
  projectParts: AttributesOnProjectOrderByRelationAggregateInput
  subthemes: AttributesOnSubthemeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input AttributeRelationFilter {
  is: AttributeWhereInput
  isNot: AttributeWhereInput
}

enum AttributeScalarFieldEnum {
  createdAt
  id
  name
  namePlural
  teamId
  updatedAt
}

input AttributeUpdateOneRequiredWithoutInventoryHistoryInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutInventoryHistoryInput
  create: AttributeCreateWithoutInventoryHistoryInput
  update: AttributeUpdateWithoutInventoryHistoryInput
  upsert: AttributeUpsertWithoutInventoryHistoryInput
}

input AttributeUpdateOneRequiredWithoutInventoryInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutInventoryInput
  create: AttributeCreateWithoutInventoryInput
  update: AttributeUpdateWithoutInventoryInput
  upsert: AttributeUpsertWithoutInventoryInput
}

input AttributeUpdateOneRequiredWithoutProjectPartsInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutProjectPartsInput
  create: AttributeCreateWithoutProjectPartsInput
  update: AttributeUpdateWithoutProjectPartsInput
  upsert: AttributeUpsertWithoutProjectPartsInput
}

input AttributeUpdateOneRequiredWithoutSubthemesInput {
  connect: AttributeWhereUniqueInput
  connectOrCreate: AttributeCreateOrConnectWithoutSubthemesInput
  create: AttributeCreateWithoutSubthemesInput
  update: AttributeUpdateWithoutSubthemesInput
  upsert: AttributeUpsertWithoutSubthemesInput
}

input AttributeUpdateWithoutInventoryHistoryInput {
  inventory: AttributeInventoryUpdateManyWithoutAttributeInput
  name: StringFieldUpdateOperationsInput
  namePlural: StringFieldUpdateOperationsInput
  projectParts: AttributesOnProjectUpdateManyWithoutAttributeInput
  subthemes: AttributesOnSubthemeUpdateManyWithoutAttributeInput
}

input AttributeUpdateWithoutInventoryInput {
  inventoryHistory: AttributeInventoryHistoryUpdateManyWithoutAttributeInput
  name: StringFieldUpdateOperationsInput
  namePlural: StringFieldUpdateOperationsInput
  projectParts: AttributesOnProjectUpdateManyWithoutAttributeInput
  subthemes: AttributesOnSubthemeUpdateManyWithoutAttributeInput
}

input AttributeUpdateWithoutProjectPartsInput {
  inventory: AttributeInventoryUpdateManyWithoutAttributeInput
  inventoryHistory: AttributeInventoryHistoryUpdateManyWithoutAttributeInput
  name: StringFieldUpdateOperationsInput
  namePlural: StringFieldUpdateOperationsInput
  subthemes: AttributesOnSubthemeUpdateManyWithoutAttributeInput
}

input AttributeUpdateWithoutSubthemesInput {
  inventory: AttributeInventoryUpdateManyWithoutAttributeInput
  inventoryHistory: AttributeInventoryHistoryUpdateManyWithoutAttributeInput
  name: StringFieldUpdateOperationsInput
  namePlural: StringFieldUpdateOperationsInput
  projectParts: AttributesOnProjectUpdateManyWithoutAttributeInput
}

input AttributeUpsertWithoutInventoryHistoryInput {
  create: AttributeCreateWithoutInventoryHistoryInput!
  update: AttributeUpdateWithoutInventoryHistoryInput!
}

input AttributeUpsertWithoutInventoryInput {
  create: AttributeCreateWithoutInventoryInput!
  update: AttributeUpdateWithoutInventoryInput!
}

input AttributeUpsertWithoutProjectPartsInput {
  create: AttributeCreateWithoutProjectPartsInput!
  update: AttributeUpdateWithoutProjectPartsInput!
}

input AttributeUpsertWithoutSubthemesInput {
  create: AttributeCreateWithoutSubthemesInput!
  update: AttributeUpdateWithoutSubthemesInput!
}

input AttributeWhereInput {
  AND: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  inventory: AttributeInventoryListRelationFilter
  inventoryHistory: AttributeInventoryHistoryListRelationFilter
  name: StringFilter
  namePlural: StringFilter
  projectParts: AttributesOnProjectListRelationFilter
  subthemes: AttributesOnSubthemeListRelationFilter
  updatedAt: DateTimeFilter
}

input AttributeWhereUniqueInput {
  id: String
}

type AttributesOnProject {
  amount: Int!
  attributeId: String!
  createdAt: DateTime!
  id: String!
  projectPartId: String!
  updatedAt: DateTime!
  userId: String!
}

input AttributesOnProjectCreateManyAttributeInput {
  amount: Int!
  projectPartId: String!
  userId: String!
}

input AttributesOnProjectCreateManyAttributeInputEnvelope {
  data: [AttributesOnProjectCreateManyAttributeInput!]!
  skipDuplicates: Boolean
}

input AttributesOnProjectCreateManyProjectPartInput {
  amount: Int!
  attributeId: String!
  userId: String!
}

input AttributesOnProjectCreateManyProjectPartInputEnvelope {
  data: [AttributesOnProjectCreateManyProjectPartInput!]!
  skipDuplicates: Boolean
}

input AttributesOnProjectCreateManyUserInput {
  amount: Int!
  attributeId: String!
  projectPartId: String!
}

input AttributesOnProjectCreateManyUserInputEnvelope {
  data: [AttributesOnProjectCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AttributesOnProjectCreateNestedManyWithoutAttributeInput {
  connect: [AttributesOnProjectWhereUniqueInput!]
  connectOrCreate: [AttributesOnProjectCreateOrConnectWithoutAttributeInput!]
  create: [AttributesOnProjectCreateWithoutAttributeInput!]
  createMany: AttributesOnProjectCreateManyAttributeInputEnvelope
}

input AttributesOnProjectCreateNestedManyWithoutProjectPartInput {
  connect: [AttributesOnProjectWhereUniqueInput!]
  connectOrCreate: [AttributesOnProjectCreateOrConnectWithoutProjectPartInput!]
  create: [AttributesOnProjectCreateWithoutProjectPartInput!]
  createMany: AttributesOnProjectCreateManyProjectPartInputEnvelope
}

input AttributesOnProjectCreateNestedManyWithoutUserInput {
  connect: [AttributesOnProjectWhereUniqueInput!]
  connectOrCreate: [AttributesOnProjectCreateOrConnectWithoutUserInput!]
  create: [AttributesOnProjectCreateWithoutUserInput!]
  createMany: AttributesOnProjectCreateManyUserInputEnvelope
}

input AttributesOnProjectCreateOrConnectWithoutAttributeInput {
  create: AttributesOnProjectCreateWithoutAttributeInput!
  where: AttributesOnProjectWhereUniqueInput!
}

input AttributesOnProjectCreateOrConnectWithoutProjectPartInput {
  create: AttributesOnProjectCreateWithoutProjectPartInput!
  where: AttributesOnProjectWhereUniqueInput!
}

input AttributesOnProjectCreateOrConnectWithoutUserInput {
  create: AttributesOnProjectCreateWithoutUserInput!
  where: AttributesOnProjectWhereUniqueInput!
}

input AttributesOnProjectCreateWithoutAttributeInput {
  amount: Int!
  projectPart: ProjectPartCreateNestedOneWithoutAttributesInput!
  user: UserCreateNestedOneWithoutAttributesOnProjectPartsInput!
}

input AttributesOnProjectCreateWithoutProjectPartInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutProjectPartsInput!
  user: UserCreateNestedOneWithoutAttributesOnProjectPartsInput!
}

input AttributesOnProjectCreateWithoutUserInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutProjectPartsInput!
  projectPart: ProjectPartCreateNestedOneWithoutAttributesInput!
}

input AttributesOnProjectListRelationFilter {
  every: AttributesOnProjectWhereInput
  none: AttributesOnProjectWhereInput
  some: AttributesOnProjectWhereInput
}

input AttributesOnProjectOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributesOnProjectOrderByWithRelationInput {
  amount: SortOrder
  attribute: AttributeOrderByWithRelationInput
  attributeId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  projectPart: ProjectPartOrderByWithRelationInput
  projectPartId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AttributesOnProjectScalarFieldEnum {
  amount
  attributeId
  createdAt
  id
  projectPartId
  updatedAt
  userId
}

input AttributesOnProjectScalarWhereInput {
  AND: [AttributesOnProjectScalarWhereInput!]
  NOT: [AttributesOnProjectScalarWhereInput!]
  OR: [AttributesOnProjectScalarWhereInput!]
  amount: IntFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  projectPartId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AttributesOnProjectUpdateManyMutationInput {
  amount: IntFieldUpdateOperationsInput
}

input AttributesOnProjectUpdateManyWithWhereWithoutAttributeInput {
  data: AttributesOnProjectUpdateManyMutationInput!
  where: AttributesOnProjectScalarWhereInput!
}

input AttributesOnProjectUpdateManyWithWhereWithoutProjectPartInput {
  data: AttributesOnProjectUpdateManyMutationInput!
  where: AttributesOnProjectScalarWhereInput!
}

input AttributesOnProjectUpdateManyWithWhereWithoutUserInput {
  data: AttributesOnProjectUpdateManyMutationInput!
  where: AttributesOnProjectScalarWhereInput!
}

input AttributesOnProjectUpdateManyWithoutAttributeInput {
  connect: [AttributesOnProjectWhereUniqueInput!]
  connectOrCreate: [AttributesOnProjectCreateOrConnectWithoutAttributeInput!]
  create: [AttributesOnProjectCreateWithoutAttributeInput!]
  createMany: AttributesOnProjectCreateManyAttributeInputEnvelope
  delete: [AttributesOnProjectWhereUniqueInput!]
  deleteMany: [AttributesOnProjectScalarWhereInput!]
  disconnect: [AttributesOnProjectWhereUniqueInput!]
  set: [AttributesOnProjectWhereUniqueInput!]
  update: [AttributesOnProjectUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [AttributesOnProjectUpdateManyWithWhereWithoutAttributeInput!]
  upsert: [AttributesOnProjectUpsertWithWhereUniqueWithoutAttributeInput!]
}

input AttributesOnProjectUpdateManyWithoutProjectPartInput {
  connect: [AttributesOnProjectWhereUniqueInput!]
  connectOrCreate: [AttributesOnProjectCreateOrConnectWithoutProjectPartInput!]
  create: [AttributesOnProjectCreateWithoutProjectPartInput!]
  createMany: AttributesOnProjectCreateManyProjectPartInputEnvelope
  delete: [AttributesOnProjectWhereUniqueInput!]
  deleteMany: [AttributesOnProjectScalarWhereInput!]
  disconnect: [AttributesOnProjectWhereUniqueInput!]
  set: [AttributesOnProjectWhereUniqueInput!]
  update: [AttributesOnProjectUpdateWithWhereUniqueWithoutProjectPartInput!]
  updateMany: [AttributesOnProjectUpdateManyWithWhereWithoutProjectPartInput!]
  upsert: [AttributesOnProjectUpsertWithWhereUniqueWithoutProjectPartInput!]
}

input AttributesOnProjectUpdateManyWithoutUserInput {
  connect: [AttributesOnProjectWhereUniqueInput!]
  connectOrCreate: [AttributesOnProjectCreateOrConnectWithoutUserInput!]
  create: [AttributesOnProjectCreateWithoutUserInput!]
  createMany: AttributesOnProjectCreateManyUserInputEnvelope
  delete: [AttributesOnProjectWhereUniqueInput!]
  deleteMany: [AttributesOnProjectScalarWhereInput!]
  disconnect: [AttributesOnProjectWhereUniqueInput!]
  set: [AttributesOnProjectWhereUniqueInput!]
  update: [AttributesOnProjectUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AttributesOnProjectUpdateManyWithWhereWithoutUserInput!]
  upsert: [AttributesOnProjectUpsertWithWhereUniqueWithoutUserInput!]
}

input AttributesOnProjectUpdateWithWhereUniqueWithoutAttributeInput {
  data: AttributesOnProjectUpdateWithoutAttributeInput!
  where: AttributesOnProjectWhereUniqueInput!
}

input AttributesOnProjectUpdateWithWhereUniqueWithoutProjectPartInput {
  data: AttributesOnProjectUpdateWithoutProjectPartInput!
  where: AttributesOnProjectWhereUniqueInput!
}

input AttributesOnProjectUpdateWithWhereUniqueWithoutUserInput {
  data: AttributesOnProjectUpdateWithoutUserInput!
  where: AttributesOnProjectWhereUniqueInput!
}

input AttributesOnProjectUpdateWithoutAttributeInput {
  amount: IntFieldUpdateOperationsInput
  projectPart: ProjectPartUpdateOneRequiredWithoutAttributesInput
  user: UserUpdateOneRequiredWithoutAttributesOnProjectPartsInput
}

input AttributesOnProjectUpdateWithoutProjectPartInput {
  amount: IntFieldUpdateOperationsInput
  attribute: AttributeUpdateOneRequiredWithoutProjectPartsInput
  user: UserUpdateOneRequiredWithoutAttributesOnProjectPartsInput
}

input AttributesOnProjectUpdateWithoutUserInput {
  amount: IntFieldUpdateOperationsInput
  attribute: AttributeUpdateOneRequiredWithoutProjectPartsInput
  projectPart: ProjectPartUpdateOneRequiredWithoutAttributesInput
}

input AttributesOnProjectUpsertWithWhereUniqueWithoutAttributeInput {
  create: AttributesOnProjectCreateWithoutAttributeInput!
  update: AttributesOnProjectUpdateWithoutAttributeInput!
  where: AttributesOnProjectWhereUniqueInput!
}

input AttributesOnProjectUpsertWithWhereUniqueWithoutProjectPartInput {
  create: AttributesOnProjectCreateWithoutProjectPartInput!
  update: AttributesOnProjectUpdateWithoutProjectPartInput!
  where: AttributesOnProjectWhereUniqueInput!
}

input AttributesOnProjectUpsertWithWhereUniqueWithoutUserInput {
  create: AttributesOnProjectCreateWithoutUserInput!
  update: AttributesOnProjectUpdateWithoutUserInput!
  where: AttributesOnProjectWhereUniqueInput!
}

input AttributesOnProjectWhereInput {
  AND: [AttributesOnProjectWhereInput!]
  NOT: [AttributesOnProjectWhereInput!]
  OR: [AttributesOnProjectWhereInput!]
  amount: IntFilter
  attribute: AttributeRelationFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  projectPart: ProjectPartRelationFilter
  projectPartId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AttributesOnProjectWhereUniqueInput {
  id: String
}

type AttributesOnSubtheme {
  amount: Int!
  attributeId: String!
  createdAt: DateTime!
  id: String!
  subthemeId: String!
  updatedAt: DateTime!
  userId: String!
}

input AttributesOnSubthemeCreateManyAttributeInput {
  amount: Int!
  subthemeId: String!
  userId: String!
}

input AttributesOnSubthemeCreateManyAttributeInputEnvelope {
  data: [AttributesOnSubthemeCreateManyAttributeInput!]!
  skipDuplicates: Boolean
}

input AttributesOnSubthemeCreateManySubthemeInput {
  amount: Int!
  attributeId: String!
  userId: String!
}

input AttributesOnSubthemeCreateManySubthemeInputEnvelope {
  data: [AttributesOnSubthemeCreateManySubthemeInput!]!
  skipDuplicates: Boolean
}

input AttributesOnSubthemeCreateManyUserInput {
  amount: Int!
  attributeId: String!
  subthemeId: String!
}

input AttributesOnSubthemeCreateManyUserInputEnvelope {
  data: [AttributesOnSubthemeCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AttributesOnSubthemeCreateNestedManyWithoutAttributeInput {
  connect: [AttributesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [AttributesOnSubthemeCreateOrConnectWithoutAttributeInput!]
  create: [AttributesOnSubthemeCreateWithoutAttributeInput!]
  createMany: AttributesOnSubthemeCreateManyAttributeInputEnvelope
}

input AttributesOnSubthemeCreateNestedManyWithoutSubthemeInput {
  connect: [AttributesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [AttributesOnSubthemeCreateOrConnectWithoutSubthemeInput!]
  create: [AttributesOnSubthemeCreateWithoutSubthemeInput!]
  createMany: AttributesOnSubthemeCreateManySubthemeInputEnvelope
}

input AttributesOnSubthemeCreateNestedManyWithoutUserInput {
  connect: [AttributesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [AttributesOnSubthemeCreateOrConnectWithoutUserInput!]
  create: [AttributesOnSubthemeCreateWithoutUserInput!]
  createMany: AttributesOnSubthemeCreateManyUserInputEnvelope
}

input AttributesOnSubthemeCreateOrConnectWithoutAttributeInput {
  create: AttributesOnSubthemeCreateWithoutAttributeInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeCreateOrConnectWithoutSubthemeInput {
  create: AttributesOnSubthemeCreateWithoutSubthemeInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeCreateOrConnectWithoutUserInput {
  create: AttributesOnSubthemeCreateWithoutUserInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeCreateWithoutAttributeInput {
  amount: Int!
  subtheme: SubthemeCreateNestedOneWithoutAttributesInput!
  user: UserCreateNestedOneWithoutAttributesOnSubthemesInput!
}

input AttributesOnSubthemeCreateWithoutSubthemeInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutSubthemesInput!
  user: UserCreateNestedOneWithoutAttributesOnSubthemesInput!
}

input AttributesOnSubthemeCreateWithoutUserInput {
  amount: Int!
  attribute: AttributeCreateNestedOneWithoutSubthemesInput!
  subtheme: SubthemeCreateNestedOneWithoutAttributesInput!
}

input AttributesOnSubthemeListRelationFilter {
  every: AttributesOnSubthemeWhereInput
  none: AttributesOnSubthemeWhereInput
  some: AttributesOnSubthemeWhereInput
}

input AttributesOnSubthemeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttributesOnSubthemeOrderByWithRelationInput {
  amount: SortOrder
  attribute: AttributeOrderByWithRelationInput
  attributeId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  subtheme: SubthemeOrderByWithRelationInput
  subthemeId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AttributesOnSubthemeScalarFieldEnum {
  amount
  attributeId
  createdAt
  id
  subthemeId
  updatedAt
  userId
}

input AttributesOnSubthemeScalarWhereInput {
  AND: [AttributesOnSubthemeScalarWhereInput!]
  NOT: [AttributesOnSubthemeScalarWhereInput!]
  OR: [AttributesOnSubthemeScalarWhereInput!]
  amount: IntFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  subthemeId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AttributesOnSubthemeUpdateManyMutationInput {
  amount: IntFieldUpdateOperationsInput
}

input AttributesOnSubthemeUpdateManyWithWhereWithoutAttributeInput {
  data: AttributesOnSubthemeUpdateManyMutationInput!
  where: AttributesOnSubthemeScalarWhereInput!
}

input AttributesOnSubthemeUpdateManyWithWhereWithoutSubthemeInput {
  data: AttributesOnSubthemeUpdateManyMutationInput!
  where: AttributesOnSubthemeScalarWhereInput!
}

input AttributesOnSubthemeUpdateManyWithWhereWithoutUserInput {
  data: AttributesOnSubthemeUpdateManyMutationInput!
  where: AttributesOnSubthemeScalarWhereInput!
}

input AttributesOnSubthemeUpdateManyWithoutAttributeInput {
  connect: [AttributesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [AttributesOnSubthemeCreateOrConnectWithoutAttributeInput!]
  create: [AttributesOnSubthemeCreateWithoutAttributeInput!]
  createMany: AttributesOnSubthemeCreateManyAttributeInputEnvelope
  delete: [AttributesOnSubthemeWhereUniqueInput!]
  deleteMany: [AttributesOnSubthemeScalarWhereInput!]
  disconnect: [AttributesOnSubthemeWhereUniqueInput!]
  set: [AttributesOnSubthemeWhereUniqueInput!]
  update: [AttributesOnSubthemeUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [AttributesOnSubthemeUpdateManyWithWhereWithoutAttributeInput!]
  upsert: [AttributesOnSubthemeUpsertWithWhereUniqueWithoutAttributeInput!]
}

input AttributesOnSubthemeUpdateManyWithoutSubthemeInput {
  connect: [AttributesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [AttributesOnSubthemeCreateOrConnectWithoutSubthemeInput!]
  create: [AttributesOnSubthemeCreateWithoutSubthemeInput!]
  createMany: AttributesOnSubthemeCreateManySubthemeInputEnvelope
  delete: [AttributesOnSubthemeWhereUniqueInput!]
  deleteMany: [AttributesOnSubthemeScalarWhereInput!]
  disconnect: [AttributesOnSubthemeWhereUniqueInput!]
  set: [AttributesOnSubthemeWhereUniqueInput!]
  update: [AttributesOnSubthemeUpdateWithWhereUniqueWithoutSubthemeInput!]
  updateMany: [AttributesOnSubthemeUpdateManyWithWhereWithoutSubthemeInput!]
  upsert: [AttributesOnSubthemeUpsertWithWhereUniqueWithoutSubthemeInput!]
}

input AttributesOnSubthemeUpdateManyWithoutUserInput {
  connect: [AttributesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [AttributesOnSubthemeCreateOrConnectWithoutUserInput!]
  create: [AttributesOnSubthemeCreateWithoutUserInput!]
  createMany: AttributesOnSubthemeCreateManyUserInputEnvelope
  delete: [AttributesOnSubthemeWhereUniqueInput!]
  deleteMany: [AttributesOnSubthemeScalarWhereInput!]
  disconnect: [AttributesOnSubthemeWhereUniqueInput!]
  set: [AttributesOnSubthemeWhereUniqueInput!]
  update: [AttributesOnSubthemeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AttributesOnSubthemeUpdateManyWithWhereWithoutUserInput!]
  upsert: [AttributesOnSubthemeUpsertWithWhereUniqueWithoutUserInput!]
}

input AttributesOnSubthemeUpdateWithWhereUniqueWithoutAttributeInput {
  data: AttributesOnSubthemeUpdateWithoutAttributeInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeUpdateWithWhereUniqueWithoutSubthemeInput {
  data: AttributesOnSubthemeUpdateWithoutSubthemeInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeUpdateWithWhereUniqueWithoutUserInput {
  data: AttributesOnSubthemeUpdateWithoutUserInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeUpdateWithoutAttributeInput {
  amount: IntFieldUpdateOperationsInput
  subtheme: SubthemeUpdateOneRequiredWithoutAttributesInput
  user: UserUpdateOneRequiredWithoutAttributesOnSubthemesInput
}

input AttributesOnSubthemeUpdateWithoutSubthemeInput {
  amount: IntFieldUpdateOperationsInput
  attribute: AttributeUpdateOneRequiredWithoutSubthemesInput
  user: UserUpdateOneRequiredWithoutAttributesOnSubthemesInput
}

input AttributesOnSubthemeUpdateWithoutUserInput {
  amount: IntFieldUpdateOperationsInput
  attribute: AttributeUpdateOneRequiredWithoutSubthemesInput
  subtheme: SubthemeUpdateOneRequiredWithoutAttributesInput
}

input AttributesOnSubthemeUpsertWithWhereUniqueWithoutAttributeInput {
  create: AttributesOnSubthemeCreateWithoutAttributeInput!
  update: AttributesOnSubthemeUpdateWithoutAttributeInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeUpsertWithWhereUniqueWithoutSubthemeInput {
  create: AttributesOnSubthemeCreateWithoutSubthemeInput!
  update: AttributesOnSubthemeUpdateWithoutSubthemeInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeUpsertWithWhereUniqueWithoutUserInput {
  create: AttributesOnSubthemeCreateWithoutUserInput!
  update: AttributesOnSubthemeUpdateWithoutUserInput!
  where: AttributesOnSubthemeWhereUniqueInput!
}

input AttributesOnSubthemeWhereInput {
  AND: [AttributesOnSubthemeWhereInput!]
  NOT: [AttributesOnSubthemeWhereInput!]
  OR: [AttributesOnSubthemeWhereInput!]
  amount: IntFilter
  attribute: AttributeRelationFilter
  attributeId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  subtheme: SubthemeRelationFilter
  subthemeId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AttributesOnSubthemeWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumProjectStatusFieldUpdateOperationsInput {
  set: ProjectStatus
}

input EnumProjectStatusFilter {
  equals: ProjectStatus
  in: [ProjectStatus!]
  not: NestedEnumProjectStatusFilter
  notIn: [ProjectStatus!]
}

input EnumProjectTypeFieldUpdateOperationsInput {
  set: ProjectType
}

input EnumProjectTypeFilter {
  equals: ProjectType
  in: [ProjectType!]
  not: NestedEnumProjectTypeFilter
  notIn: [ProjectType!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

type Event {
  _count: EventCount
  createdAt: DateTime!
  date: DateTime!
  id: String!
  img: String!
  name: String!
  slug: String!
  teamId: String!
  updatedAt: DateTime!
}

type EventCount {
  subthemes: Int!
}

input EventCreateNestedOneWithoutSubthemesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutSubthemesInput
  create: EventCreateWithoutSubthemesInput
}

input EventCreateOrConnectWithoutSubthemesInput {
  create: EventCreateWithoutSubthemesInput!
  where: EventWhereUniqueInput!
}

input EventCreateWithoutSubthemesInput {
  date: DateTime!
  img: String!
  name: String!
  slug: String!
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

input EventOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByWithRelationInput {
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  img: SortOrder
  name: SortOrder
  slug: SortOrder
  subthemes: SubthemeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input EventRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

enum EventScalarFieldEnum {
  createdAt
  date
  id
  img
  name
  slug
  teamId
  updatedAt
}

input EventUpdateOneRequiredWithoutSubthemesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutSubthemesInput
  create: EventCreateWithoutSubthemesInput
  update: EventUpdateWithoutSubthemesInput
  upsert: EventUpsertWithoutSubthemesInput
}

input EventUpdateWithoutSubthemesInput {
  date: DateTimeFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input EventUpsertWithoutSubthemesInput {
  create: EventCreateWithoutSubthemesInput!
  update: EventUpdateWithoutSubthemesInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  createdAt: DateTimeFilter
  date: DateTimeFilter
  id: StringFilter
  img: StringFilter
  name: StringFilter
  slug: StringFilter
  subthemes: SubthemeListRelationFilter
  updatedAt: DateTimeFilter
}

input EventWhereUniqueInput {
  id: String
  slug: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonNullableFilter {
  equals: JSON
  not: JSON
}

type Member {
  createdAt: DateTime!
  id: String!
  role: Role!
  teamId: String!
  updatedAt: DateTime!
  userId: String!
}

input MemberCreateManyUserInput {
  role: Role!
}

input MemberCreateManyUserInputEnvelope {
  data: [MemberCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MemberCreateNestedManyWithoutUserInput {
  connect: [MemberWhereUniqueInput!]
  connectOrCreate: [MemberCreateOrConnectWithoutUserInput!]
  create: [MemberCreateWithoutUserInput!]
  createMany: MemberCreateManyUserInputEnvelope
}

input MemberCreateOrConnectWithoutUserInput {
  create: MemberCreateWithoutUserInput!
  where: MemberWhereUniqueInput!
}

input MemberCreateWithoutUserInput {
  role: Role!
}

input MemberListRelationFilter {
  every: MemberWhereInput
  none: MemberWhereInput
  some: MemberWhereInput
}

input MemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input MemberOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum MemberScalarFieldEnum {
  createdAt
  id
  role
  teamId
  updatedAt
  userId
}

input MemberScalarWhereInput {
  AND: [MemberScalarWhereInput!]
  NOT: [MemberScalarWhereInput!]
  OR: [MemberScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MemberUpdateManyMutationInput {
  role: EnumRoleFieldUpdateOperationsInput
}

input MemberUpdateManyWithWhereWithoutUserInput {
  data: MemberUpdateManyMutationInput!
  where: MemberScalarWhereInput!
}

input MemberUpdateManyWithoutUserInput {
  connect: [MemberWhereUniqueInput!]
  connectOrCreate: [MemberCreateOrConnectWithoutUserInput!]
  create: [MemberCreateWithoutUserInput!]
  createMany: MemberCreateManyUserInputEnvelope
  delete: [MemberWhereUniqueInput!]
  deleteMany: [MemberScalarWhereInput!]
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  update: [MemberUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MemberUpdateManyWithWhereWithoutUserInput!]
  upsert: [MemberUpsertWithWhereUniqueWithoutUserInput!]
}

input MemberUpdateWithWhereUniqueWithoutUserInput {
  data: MemberUpdateWithoutUserInput!
  where: MemberWhereUniqueInput!
}

input MemberUpdateWithoutUserInput {
  role: EnumRoleFieldUpdateOperationsInput
}

input MemberUpsertWithWhereUniqueWithoutUserInput {
  create: MemberCreateWithoutUserInput!
  update: MemberUpdateWithoutUserInput!
  where: MemberWhereUniqueInput!
}

input MemberUserIdTeamIdCompoundUniqueInput {
  teamId: String!
  userId: String!
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input MemberWhereUniqueInput {
  id: String
  userId_teamId: MemberUserIdTeamIdCompoundUniqueInput
}

type Mutation {
  createAttribute(data: AttributeCreateInput!): Attribute!
  createProject(data: ProjectCreateInput!): Project!
  createUser(data: UserCreateInput!): User!

  """Create a new session for a user with an active account"""
  login(email: String!, isPermanent: Boolean!, password: String!): TokenPayload!

  """Invalidate the active session"""
  logout: Session!

  """Set the `team` field of the active session"""
  setSessionTeam(teamId: String!): Session!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumProjectStatusFilter {
  equals: ProjectStatus
  in: [ProjectStatus!]
  not: NestedEnumProjectStatusFilter
  notIn: [ProjectStatus!]
}

input NestedEnumProjectTypeFilter {
  equals: ProjectType
  in: [ProjectType!]
  not: NestedEnumProjectTypeFilter
  notIn: [ProjectType!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Project {
  _count: ProjectCount
  createdAt: DateTime!
  createdBy: User
  createdById: String
  description: JSON
  history(cursor: ProjectHistoryWhereUniqueInput, distinct: [ProjectHistoryScalarFieldEnum!], orderBy: [ProjectHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectHistoryWhereInput): [ProjectHistory!]!
  id: String!
  name: String!
  number: Int!
  parts(cursor: ProjectPartWhereUniqueInput, distinct: [ProjectPartScalarFieldEnum!], orderBy: [ProjectPartOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectPartWhereInput): [ProjectPart!]!
  slug: String!
  stats(cursor: StatsOnProjectWhereUniqueInput, distinct: [StatsOnProjectScalarFieldEnum!], orderBy: [StatsOnProjectOrderByWithRelationInput!], skip: Int, take: Int, where: StatsOnProjectWhereInput): [StatsOnProject!]!
  status: ProjectStatus!
  subtheme: Subtheme!
  subthemeId: String!
  supervisor: User
  supervisorId: String
  updatedAt: DateTime!
}

type ProjectCount {
  history: Int!
  parts: Int!
  stats: Int!
}

input ProjectCreateInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateManyCreatedByInput {
  description: JSON
  name: String!
  number: Int!
  slug: String!
  status: ProjectStatus!
  subthemeId: String!
  supervisorId: String
}

input ProjectCreateManyCreatedByInputEnvelope {
  data: [ProjectCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManySubthemeInput {
  createdById: String
  description: JSON
  name: String!
  number: Int!
  slug: String!
  status: ProjectStatus!
  supervisorId: String
}

input ProjectCreateManySubthemeInputEnvelope {
  data: [ProjectCreateManySubthemeInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManySupervisorInput {
  createdById: String
  description: JSON
  name: String!
  number: Int!
  slug: String!
  status: ProjectStatus!
  subthemeId: String!
}

input ProjectCreateManySupervisorInputEnvelope {
  data: [ProjectCreateManySupervisorInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateNestedManyWithoutCreatedByInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutCreatedByInput!]
  create: [ProjectCreateWithoutCreatedByInput!]
  createMany: ProjectCreateManyCreatedByInputEnvelope
}

input ProjectCreateNestedManyWithoutSubthemeInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSubthemeInput!]
  create: [ProjectCreateWithoutSubthemeInput!]
  createMany: ProjectCreateManySubthemeInputEnvelope
}

input ProjectCreateNestedManyWithoutSupervisorInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSupervisorInput!]
  create: [ProjectCreateWithoutSupervisorInput!]
  createMany: ProjectCreateManySupervisorInputEnvelope
}

input ProjectCreateNestedOneWithoutHistoryInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutHistoryInput
  create: ProjectCreateWithoutHistoryInput
}

input ProjectCreateNestedOneWithoutPartsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutPartsInput
  create: ProjectCreateWithoutPartsInput
}

input ProjectCreateOrConnectWithoutCreatedByInput {
  create: ProjectCreateWithoutCreatedByInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutHistoryInput {
  create: ProjectCreateWithoutHistoryInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutPartsInput {
  create: ProjectCreateWithoutPartsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutSubthemeInput {
  create: ProjectCreateWithoutSubthemeInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutSupervisorInput {
  create: ProjectCreateWithoutSupervisorInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutCreatedByInput {
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateWithoutHistoryInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateWithoutPartsInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateWithoutSubthemeInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  supervisor: UserCreateNestedOneWithoutSupervisingProjectsInput
}

input ProjectCreateWithoutSupervisorInput {
  createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryCreateNestedManyWithoutProjectInput
  name: String!
  number: Int!
  parts: ProjectPartCreateNestedManyWithoutProjectInput
  slug: String!
  stats: StatsOnProjectCreateNestedManyWithoutProjectInput
  status: ProjectStatus!
  subtheme: SubthemeCreateNestedOneWithoutProjectsInput!
}

type ProjectHistory {
  createdAt: DateTime!
  fieldName: String!
  id: String!
  newValue: String!
  oldValue: String
  projectId: String!
  updatedAt: DateTime!
  userId: String!
}

input ProjectHistoryCreateManyProjectInput {
  fieldName: String!
  newValue: String!
  oldValue: String
  userId: String!
}

input ProjectHistoryCreateManyProjectInputEnvelope {
  data: [ProjectHistoryCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input ProjectHistoryCreateManyUserInput {
  fieldName: String!
  newValue: String!
  oldValue: String
  projectId: String!
}

input ProjectHistoryCreateManyUserInputEnvelope {
  data: [ProjectHistoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ProjectHistoryCreateNestedManyWithoutProjectInput {
  connect: [ProjectHistoryWhereUniqueInput!]
  connectOrCreate: [ProjectHistoryCreateOrConnectWithoutProjectInput!]
  create: [ProjectHistoryCreateWithoutProjectInput!]
  createMany: ProjectHistoryCreateManyProjectInputEnvelope
}

input ProjectHistoryCreateNestedManyWithoutUserInput {
  connect: [ProjectHistoryWhereUniqueInput!]
  connectOrCreate: [ProjectHistoryCreateOrConnectWithoutUserInput!]
  create: [ProjectHistoryCreateWithoutUserInput!]
  createMany: ProjectHistoryCreateManyUserInputEnvelope
}

input ProjectHistoryCreateOrConnectWithoutProjectInput {
  create: ProjectHistoryCreateWithoutProjectInput!
  where: ProjectHistoryWhereUniqueInput!
}

input ProjectHistoryCreateOrConnectWithoutUserInput {
  create: ProjectHistoryCreateWithoutUserInput!
  where: ProjectHistoryWhereUniqueInput!
}

input ProjectHistoryCreateWithoutProjectInput {
  fieldName: String!
  newValue: String!
  oldValue: String
  user: UserCreateNestedOneWithoutProjectHistoryInput!
}

input ProjectHistoryCreateWithoutUserInput {
  fieldName: String!
  newValue: String!
  oldValue: String
  project: ProjectCreateNestedOneWithoutHistoryInput!
}

input ProjectHistoryListRelationFilter {
  every: ProjectHistoryWhereInput
  none: ProjectHistoryWhereInput
  some: ProjectHistoryWhereInput
}

input ProjectHistoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProjectHistoryOrderByWithRelationInput {
  createdAt: SortOrder
  fieldName: SortOrder
  id: SortOrder
  newValue: SortOrder
  oldValue: SortOrder
  project: ProjectOrderByWithRelationInput
  projectId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ProjectHistoryScalarFieldEnum {
  createdAt
  fieldName
  id
  newValue
  oldValue
  projectId
  updatedAt
  userId
}

input ProjectHistoryScalarWhereInput {
  AND: [ProjectHistoryScalarWhereInput!]
  NOT: [ProjectHistoryScalarWhereInput!]
  OR: [ProjectHistoryScalarWhereInput!]
  createdAt: DateTimeFilter
  fieldName: StringFilter
  id: StringFilter
  newValue: StringFilter
  oldValue: StringNullableFilter
  projectId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ProjectHistoryUpdateManyMutationInput {
  fieldName: StringFieldUpdateOperationsInput
  newValue: StringFieldUpdateOperationsInput
  oldValue: NullableStringFieldUpdateOperationsInput
}

input ProjectHistoryUpdateManyWithWhereWithoutProjectInput {
  data: ProjectHistoryUpdateManyMutationInput!
  where: ProjectHistoryScalarWhereInput!
}

input ProjectHistoryUpdateManyWithWhereWithoutUserInput {
  data: ProjectHistoryUpdateManyMutationInput!
  where: ProjectHistoryScalarWhereInput!
}

input ProjectHistoryUpdateManyWithoutProjectInput {
  connect: [ProjectHistoryWhereUniqueInput!]
  connectOrCreate: [ProjectHistoryCreateOrConnectWithoutProjectInput!]
  create: [ProjectHistoryCreateWithoutProjectInput!]
  createMany: ProjectHistoryCreateManyProjectInputEnvelope
  delete: [ProjectHistoryWhereUniqueInput!]
  deleteMany: [ProjectHistoryScalarWhereInput!]
  disconnect: [ProjectHistoryWhereUniqueInput!]
  set: [ProjectHistoryWhereUniqueInput!]
  update: [ProjectHistoryUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ProjectHistoryUpdateManyWithWhereWithoutProjectInput!]
  upsert: [ProjectHistoryUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectHistoryUpdateManyWithoutUserInput {
  connect: [ProjectHistoryWhereUniqueInput!]
  connectOrCreate: [ProjectHistoryCreateOrConnectWithoutUserInput!]
  create: [ProjectHistoryCreateWithoutUserInput!]
  createMany: ProjectHistoryCreateManyUserInputEnvelope
  delete: [ProjectHistoryWhereUniqueInput!]
  deleteMany: [ProjectHistoryScalarWhereInput!]
  disconnect: [ProjectHistoryWhereUniqueInput!]
  set: [ProjectHistoryWhereUniqueInput!]
  update: [ProjectHistoryUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProjectHistoryUpdateManyWithWhereWithoutUserInput!]
  upsert: [ProjectHistoryUpsertWithWhereUniqueWithoutUserInput!]
}

input ProjectHistoryUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectHistoryUpdateWithoutProjectInput!
  where: ProjectHistoryWhereUniqueInput!
}

input ProjectHistoryUpdateWithWhereUniqueWithoutUserInput {
  data: ProjectHistoryUpdateWithoutUserInput!
  where: ProjectHistoryWhereUniqueInput!
}

input ProjectHistoryUpdateWithoutProjectInput {
  fieldName: StringFieldUpdateOperationsInput
  newValue: StringFieldUpdateOperationsInput
  oldValue: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProjectHistoryInput
}

input ProjectHistoryUpdateWithoutUserInput {
  fieldName: StringFieldUpdateOperationsInput
  newValue: StringFieldUpdateOperationsInput
  oldValue: NullableStringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutHistoryInput
}

input ProjectHistoryUpsertWithWhereUniqueWithoutProjectInput {
  create: ProjectHistoryCreateWithoutProjectInput!
  update: ProjectHistoryUpdateWithoutProjectInput!
  where: ProjectHistoryWhereUniqueInput!
}

input ProjectHistoryUpsertWithWhereUniqueWithoutUserInput {
  create: ProjectHistoryCreateWithoutUserInput!
  update: ProjectHistoryUpdateWithoutUserInput!
  where: ProjectHistoryWhereUniqueInput!
}

input ProjectHistoryWhereInput {
  AND: [ProjectHistoryWhereInput!]
  NOT: [ProjectHistoryWhereInput!]
  OR: [ProjectHistoryWhereInput!]
  createdAt: DateTimeFilter
  fieldName: StringFilter
  id: StringFilter
  newValue: StringFilter
  oldValue: StringNullableFilter
  project: ProjectRelationFilter
  projectId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ProjectHistoryWhereUniqueInput {
  id: String
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

input ProjectOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProjectOrderByWithRelationInput {
  createdAt: SortOrder
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  description: SortOrder
  history: ProjectHistoryOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  number: SortOrder
  parts: ProjectPartOrderByRelationAggregateInput
  slug: SortOrder
  stats: StatsOnProjectOrderByRelationAggregateInput
  status: SortOrder
  subtheme: SubthemeOrderByWithRelationInput
  subthemeId: SortOrder
  supervisor: UserOrderByWithRelationInput
  supervisorId: SortOrder
  updatedAt: SortOrder
}

type ProjectPart {
  _count: ProjectPartCount
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  number: Int!
  projectId: String!
  slug: String!
  type: ProjectType!
  updatedAt: DateTime!
}

type ProjectPartCount {
  attributes: Int!
  stones: Int!
}

input ProjectPartCreateManyProjectInput {
  description: String
  name: String!
  number: Int!
  slug: String!
  type: ProjectType!
}

input ProjectPartCreateManyProjectInputEnvelope {
  data: [ProjectPartCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input ProjectPartCreateNestedManyWithoutProjectInput {
  connect: [ProjectPartWhereUniqueInput!]
  connectOrCreate: [ProjectPartCreateOrConnectWithoutProjectInput!]
  create: [ProjectPartCreateWithoutProjectInput!]
  createMany: ProjectPartCreateManyProjectInputEnvelope
}

input ProjectPartCreateNestedOneWithoutAttributesInput {
  connect: ProjectPartWhereUniqueInput
  connectOrCreate: ProjectPartCreateOrConnectWithoutAttributesInput
  create: ProjectPartCreateWithoutAttributesInput
}

input ProjectPartCreateNestedOneWithoutStonesInput {
  connect: ProjectPartWhereUniqueInput
  connectOrCreate: ProjectPartCreateOrConnectWithoutStonesInput
  create: ProjectPartCreateWithoutStonesInput
}

input ProjectPartCreateOrConnectWithoutAttributesInput {
  create: ProjectPartCreateWithoutAttributesInput!
  where: ProjectPartWhereUniqueInput!
}

input ProjectPartCreateOrConnectWithoutProjectInput {
  create: ProjectPartCreateWithoutProjectInput!
  where: ProjectPartWhereUniqueInput!
}

input ProjectPartCreateOrConnectWithoutStonesInput {
  create: ProjectPartCreateWithoutStonesInput!
  where: ProjectPartWhereUniqueInput!
}

input ProjectPartCreateWithoutAttributesInput {
  description: String
  name: String!
  number: Int!
  project: ProjectCreateNestedOneWithoutPartsInput!
  slug: String!
  stones: StonesOnProjectCreateNestedManyWithoutProjectPartInput
  type: ProjectType!
}

input ProjectPartCreateWithoutProjectInput {
  attributes: AttributesOnProjectCreateNestedManyWithoutProjectPartInput
  description: String
  name: String!
  number: Int!
  slug: String!
  stones: StonesOnProjectCreateNestedManyWithoutProjectPartInput
  type: ProjectType!
}

input ProjectPartCreateWithoutStonesInput {
  attributes: AttributesOnProjectCreateNestedManyWithoutProjectPartInput
  description: String
  name: String!
  number: Int!
  project: ProjectCreateNestedOneWithoutPartsInput!
  slug: String!
  type: ProjectType!
}

input ProjectPartListRelationFilter {
  every: ProjectPartWhereInput
  none: ProjectPartWhereInput
  some: ProjectPartWhereInput
}

input ProjectPartOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProjectPartOrderByWithRelationInput {
  attributes: AttributesOnProjectOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  number: SortOrder
  project: ProjectOrderByWithRelationInput
  projectId: SortOrder
  slug: SortOrder
  stones: StonesOnProjectOrderByRelationAggregateInput
  type: SortOrder
  updatedAt: SortOrder
}

input ProjectPartRelationFilter {
  is: ProjectPartWhereInput
  isNot: ProjectPartWhereInput
}

enum ProjectPartScalarFieldEnum {
  createdAt
  description
  id
  name
  number
  projectId
  slug
  type
  updatedAt
}

input ProjectPartScalarWhereInput {
  AND: [ProjectPartScalarWhereInput!]
  NOT: [ProjectPartScalarWhereInput!]
  OR: [ProjectPartScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  number: IntFilter
  projectId: StringFilter
  slug: StringFilter
  type: EnumProjectTypeFilter
  updatedAt: DateTimeFilter
}

input ProjectPartUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  type: EnumProjectTypeFieldUpdateOperationsInput
}

input ProjectPartUpdateManyWithWhereWithoutProjectInput {
  data: ProjectPartUpdateManyMutationInput!
  where: ProjectPartScalarWhereInput!
}

input ProjectPartUpdateManyWithoutProjectInput {
  connect: [ProjectPartWhereUniqueInput!]
  connectOrCreate: [ProjectPartCreateOrConnectWithoutProjectInput!]
  create: [ProjectPartCreateWithoutProjectInput!]
  createMany: ProjectPartCreateManyProjectInputEnvelope
  delete: [ProjectPartWhereUniqueInput!]
  deleteMany: [ProjectPartScalarWhereInput!]
  disconnect: [ProjectPartWhereUniqueInput!]
  set: [ProjectPartWhereUniqueInput!]
  update: [ProjectPartUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ProjectPartUpdateManyWithWhereWithoutProjectInput!]
  upsert: [ProjectPartUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectPartUpdateOneRequiredWithoutAttributesInput {
  connect: ProjectPartWhereUniqueInput
  connectOrCreate: ProjectPartCreateOrConnectWithoutAttributesInput
  create: ProjectPartCreateWithoutAttributesInput
  update: ProjectPartUpdateWithoutAttributesInput
  upsert: ProjectPartUpsertWithoutAttributesInput
}

input ProjectPartUpdateOneRequiredWithoutStonesInput {
  connect: ProjectPartWhereUniqueInput
  connectOrCreate: ProjectPartCreateOrConnectWithoutStonesInput
  create: ProjectPartCreateWithoutStonesInput
  update: ProjectPartUpdateWithoutStonesInput
  upsert: ProjectPartUpsertWithoutStonesInput
}

input ProjectPartUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectPartUpdateWithoutProjectInput!
  where: ProjectPartWhereUniqueInput!
}

input ProjectPartUpdateWithoutAttributesInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutPartsInput
  slug: StringFieldUpdateOperationsInput
  stones: StonesOnProjectUpdateManyWithoutProjectPartInput
  type: EnumProjectTypeFieldUpdateOperationsInput
}

input ProjectPartUpdateWithoutProjectInput {
  attributes: AttributesOnProjectUpdateManyWithoutProjectPartInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  stones: StonesOnProjectUpdateManyWithoutProjectPartInput
  type: EnumProjectTypeFieldUpdateOperationsInput
}

input ProjectPartUpdateWithoutStonesInput {
  attributes: AttributesOnProjectUpdateManyWithoutProjectPartInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutPartsInput
  slug: StringFieldUpdateOperationsInput
  type: EnumProjectTypeFieldUpdateOperationsInput
}

input ProjectPartUpsertWithWhereUniqueWithoutProjectInput {
  create: ProjectPartCreateWithoutProjectInput!
  update: ProjectPartUpdateWithoutProjectInput!
  where: ProjectPartWhereUniqueInput!
}

input ProjectPartUpsertWithoutAttributesInput {
  create: ProjectPartCreateWithoutAttributesInput!
  update: ProjectPartUpdateWithoutAttributesInput!
}

input ProjectPartUpsertWithoutStonesInput {
  create: ProjectPartCreateWithoutStonesInput!
  update: ProjectPartUpdateWithoutStonesInput!
}

input ProjectPartWhereInput {
  AND: [ProjectPartWhereInput!]
  NOT: [ProjectPartWhereInput!]
  OR: [ProjectPartWhereInput!]
  attributes: AttributesOnProjectListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  number: IntFilter
  project: ProjectRelationFilter
  projectId: StringFilter
  slug: StringFilter
  stones: StonesOnProjectListRelationFilter
  type: EnumProjectTypeFilter
  updatedAt: DateTimeFilter
}

input ProjectPartWhereUniqueInput {
  id: String
  slug: String
}

input ProjectRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

enum ProjectScalarFieldEnum {
  createdAt
  createdById
  description
  id
  name
  number
  slug
  status
  subthemeId
  supervisorId
  updatedAt
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  createdAt: DateTimeFilter
  createdById: StringNullableFilter
  description: JsonNullableFilter
  id: StringFilter
  name: StringFilter
  number: IntFilter
  slug: StringFilter
  status: EnumProjectStatusFilter
  subthemeId: StringFilter
  supervisorId: StringNullableFilter
  updatedAt: DateTimeFilter
}

enum ProjectStatus {
  BUILDING
  BUILT
  CANCELLED
  COUNTED
  DESIGNED
  DESIGNING
  PLANNED
  READY
}

enum ProjectType {
  DECOR
  FALLWALL
  FIELD_CIRCLE
  FIELD_CROSS_L1
  FIELD_CROSS_L2
  FIELD_CROSS_M50
  FIELD_FLAT
  FIELD_L1
  FIELD_L2
  FIELD_M50
  FREE_HAND
  OTHER
  SPIRAL
  STRUCTURE
  WALL_CUBE
  WALL_OCTO
  WALL_S
  WALL_SPEED
  WALL_T
  WALL_X
}

input ProjectUpdateInput {
  createdBy: UserUpdateOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  parts: ProjectPartUpdateManyWithoutProjectInput
  slug: StringFieldUpdateOperationsInput
  stats: StatsOnProjectUpdateManyWithoutProjectInput
  status: EnumProjectStatusFieldUpdateOperationsInput
  subtheme: SubthemeUpdateOneRequiredWithoutProjectsInput
  supervisor: UserUpdateOneWithoutSupervisingProjectsInput
}

input ProjectUpdateManyMutationInput {
  description: JSON
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: EnumProjectStatusFieldUpdateOperationsInput
}

input ProjectUpdateManyWithWhereWithoutCreatedByInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithWhereWithoutSubthemeInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithWhereWithoutSupervisorInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithoutCreatedByInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutCreatedByInput!]
  create: [ProjectCreateWithoutCreatedByInput!]
  createMany: ProjectCreateManyCreatedByInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ProjectUpdateManyWithoutSubthemeInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSubthemeInput!]
  create: [ProjectCreateWithoutSubthemeInput!]
  createMany: ProjectCreateManySubthemeInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutSubthemeInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutSubthemeInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutSubthemeInput!]
}

input ProjectUpdateManyWithoutSupervisorInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutSupervisorInput!]
  create: [ProjectCreateWithoutSupervisorInput!]
  createMany: ProjectCreateManySupervisorInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutSupervisorInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutSupervisorInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutSupervisorInput!]
}

input ProjectUpdateOneRequiredWithoutHistoryInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutHistoryInput
  create: ProjectCreateWithoutHistoryInput
  update: ProjectUpdateWithoutHistoryInput
  upsert: ProjectUpsertWithoutHistoryInput
}

input ProjectUpdateOneRequiredWithoutPartsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutPartsInput
  create: ProjectCreateWithoutPartsInput
  update: ProjectUpdateWithoutPartsInput
  upsert: ProjectUpsertWithoutPartsInput
}

input ProjectUpdateWithWhereUniqueWithoutCreatedByInput {
  data: ProjectUpdateWithoutCreatedByInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutSubthemeInput {
  data: ProjectUpdateWithoutSubthemeInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutSupervisorInput {
  data: ProjectUpdateWithoutSupervisorInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithoutCreatedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: JSON
  history: ProjectHistoryUpdateManyWithoutProjectInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  parts: ProjectPartUpdateManyWithoutProjectInput
  slug: StringFieldUpdateOperationsInput
  stats: StatsOnProjectUpdateManyWithoutProjectInput
  status: EnumProjectStatusFieldUpdateOperationsInput
  subtheme: SubthemeUpdateOneRequiredWithoutProjectsInput
  supervisor: UserUpdateOneWithoutSupervisingProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutHistoryInput {
  createdBy: UserUpdateOneWithoutCreatedProjectsInput
  description: JSON
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  parts: ProjectPartUpdateManyWithoutProjectInput
  slug: StringFieldUpdateOperationsInput
  stats: StatsOnProjectUpdateManyWithoutProjectInput
  status: EnumProjectStatusFieldUpdateOperationsInput
  subtheme: SubthemeUpdateOneRequiredWithoutProjectsInput
  supervisor: UserUpdateOneWithoutSupervisingProjectsInput
}

input ProjectUpdateWithoutPartsInput {
  createdBy: UserUpdateOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  stats: StatsOnProjectUpdateManyWithoutProjectInput
  status: EnumProjectStatusFieldUpdateOperationsInput
  subtheme: SubthemeUpdateOneRequiredWithoutProjectsInput
  supervisor: UserUpdateOneWithoutSupervisingProjectsInput
}

input ProjectUpdateWithoutSubthemeInput {
  createdBy: UserUpdateOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  parts: ProjectPartUpdateManyWithoutProjectInput
  slug: StringFieldUpdateOperationsInput
  stats: StatsOnProjectUpdateManyWithoutProjectInput
  status: EnumProjectStatusFieldUpdateOperationsInput
  supervisor: UserUpdateOneWithoutSupervisingProjectsInput
}

input ProjectUpdateWithoutSupervisorInput {
  createdBy: UserUpdateOneWithoutCreatedProjectsInput
  description: JSON
  history: ProjectHistoryUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  parts: ProjectPartUpdateManyWithoutProjectInput
  slug: StringFieldUpdateOperationsInput
  stats: StatsOnProjectUpdateManyWithoutProjectInput
  status: EnumProjectStatusFieldUpdateOperationsInput
  subtheme: SubthemeUpdateOneRequiredWithoutProjectsInput
}

input ProjectUpsertWithWhereUniqueWithoutCreatedByInput {
  create: ProjectCreateWithoutCreatedByInput!
  update: ProjectUpdateWithoutCreatedByInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutSubthemeInput {
  create: ProjectCreateWithoutSubthemeInput!
  update: ProjectUpdateWithoutSubthemeInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutSupervisorInput {
  create: ProjectCreateWithoutSupervisorInput!
  update: ProjectUpdateWithoutSupervisorInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutHistoryInput {
  create: ProjectCreateWithoutHistoryInput!
  update: ProjectUpdateWithoutHistoryInput!
}

input ProjectUpsertWithoutPartsInput {
  create: ProjectCreateWithoutPartsInput!
  update: ProjectUpdateWithoutPartsInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  createdAt: DateTimeFilter
  createdBy: UserRelationFilter
  createdById: StringNullableFilter
  description: JsonNullableFilter
  history: ProjectHistoryListRelationFilter
  id: StringFilter
  name: StringFilter
  number: IntFilter
  parts: ProjectPartListRelationFilter
  slug: StringFilter
  stats: StatsOnProjectListRelationFilter
  status: EnumProjectStatusFilter
  subtheme: SubthemeRelationFilter
  subthemeId: StringFilter
  supervisor: UserRelationFilter
  supervisorId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ProjectWhereUniqueInput {
  id: String
  slug: String
}

type Query {
  attributes(cursor: AttributeWhereUniqueInput, distinct: [AttributeScalarFieldEnum!], orderBy: [AttributeOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeWhereInput): [Attribute!]!
  project(where: ProjectWhereUniqueInput!): Project
  session(where: SessionWhereUniqueInput!): Session
  teams(cursor: TeamWhereUniqueInput, distinct: [TeamScalarFieldEnum!], orderBy: [TeamOrderByWithRelationInput!], skip: Int, take: Int, where: TeamWhereInput): [Team!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  BUILDER
  CAPTAIN
  GUEST
}

type Session {
  createdAt: DateTime!
  expiresAt: DateTime
  id: String!
  member: Member
  team: Team
  teamId: String
  token: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input SessionCreateManyUserInput {
  expiresAt: DateTime
  token: String!
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  expiresAt: DateTime
  token: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SessionOrderByWithRelationInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  token: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  createdAt
  expiresAt
  id
  teamId
  token
  updatedAt
  userId
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  id: StringFilter
  token: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input SessionUpdateManyMutationInput {
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  id: StringFilter
  token: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SessionWhereUniqueInput {
  id: String
  token: String
}

enum SortOrder {
  asc
  desc
}

type Stat {
  _count: StatCount
  createdAt: DateTime!
  id: String!
  name: String!
  teamId: String!
  updatedAt: DateTime!
}

type StatCount {
  projects: Int!
}

input StatCreateNestedOneWithoutProjectsInput {
  connect: StatWhereUniqueInput
  connectOrCreate: StatCreateOrConnectWithoutProjectsInput
  create: StatCreateWithoutProjectsInput
}

input StatCreateOrConnectWithoutProjectsInput {
  create: StatCreateWithoutProjectsInput!
  where: StatWhereUniqueInput!
}

input StatCreateWithoutProjectsInput {
  name: String!
}

input StatListRelationFilter {
  every: StatWhereInput
  none: StatWhereInput
  some: StatWhereInput
}

input StatOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  projects: StatsOnProjectOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input StatRelationFilter {
  is: StatWhereInput
  isNot: StatWhereInput
}

enum StatScalarFieldEnum {
  createdAt
  id
  name
  teamId
  updatedAt
}

input StatUpdateOneRequiredWithoutProjectsInput {
  connect: StatWhereUniqueInput
  connectOrCreate: StatCreateOrConnectWithoutProjectsInput
  create: StatCreateWithoutProjectsInput
  update: StatUpdateWithoutProjectsInput
  upsert: StatUpsertWithoutProjectsInput
}

input StatUpdateWithoutProjectsInput {
  name: StringFieldUpdateOperationsInput
}

input StatUpsertWithoutProjectsInput {
  create: StatCreateWithoutProjectsInput!
  update: StatUpdateWithoutProjectsInput!
}

input StatWhereInput {
  AND: [StatWhereInput!]
  NOT: [StatWhereInput!]
  OR: [StatWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  projects: StatsOnProjectListRelationFilter
  updatedAt: DateTimeFilter
}

input StatWhereUniqueInput {
  id: String
}

type StatsOnProject {
  createdAt: DateTime!
  id: String!
  projectId: String!
  statId: String!
  updatedAt: DateTime!
  value: String!
}

input StatsOnProjectCreateManyProjectInput {
  statId: String!
  value: String!
}

input StatsOnProjectCreateManyProjectInputEnvelope {
  data: [StatsOnProjectCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input StatsOnProjectCreateNestedManyWithoutProjectInput {
  connect: [StatsOnProjectWhereUniqueInput!]
  connectOrCreate: [StatsOnProjectCreateOrConnectWithoutProjectInput!]
  create: [StatsOnProjectCreateWithoutProjectInput!]
  createMany: StatsOnProjectCreateManyProjectInputEnvelope
}

input StatsOnProjectCreateOrConnectWithoutProjectInput {
  create: StatsOnProjectCreateWithoutProjectInput!
  where: StatsOnProjectWhereUniqueInput!
}

input StatsOnProjectCreateWithoutProjectInput {
  stat: StatCreateNestedOneWithoutProjectsInput!
  value: String!
}

input StatsOnProjectListRelationFilter {
  every: StatsOnProjectWhereInput
  none: StatsOnProjectWhereInput
  some: StatsOnProjectWhereInput
}

input StatsOnProjectOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatsOnProjectOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  project: ProjectOrderByWithRelationInput
  projectId: SortOrder
  stat: StatOrderByWithRelationInput
  statId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

enum StatsOnProjectScalarFieldEnum {
  createdAt
  id
  projectId
  statId
  updatedAt
  value
}

input StatsOnProjectScalarWhereInput {
  AND: [StatsOnProjectScalarWhereInput!]
  NOT: [StatsOnProjectScalarWhereInput!]
  OR: [StatsOnProjectScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  projectId: StringFilter
  statId: StringFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input StatsOnProjectUpdateManyMutationInput {
  value: StringFieldUpdateOperationsInput
}

input StatsOnProjectUpdateManyWithWhereWithoutProjectInput {
  data: StatsOnProjectUpdateManyMutationInput!
  where: StatsOnProjectScalarWhereInput!
}

input StatsOnProjectUpdateManyWithoutProjectInput {
  connect: [StatsOnProjectWhereUniqueInput!]
  connectOrCreate: [StatsOnProjectCreateOrConnectWithoutProjectInput!]
  create: [StatsOnProjectCreateWithoutProjectInput!]
  createMany: StatsOnProjectCreateManyProjectInputEnvelope
  delete: [StatsOnProjectWhereUniqueInput!]
  deleteMany: [StatsOnProjectScalarWhereInput!]
  disconnect: [StatsOnProjectWhereUniqueInput!]
  set: [StatsOnProjectWhereUniqueInput!]
  update: [StatsOnProjectUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [StatsOnProjectUpdateManyWithWhereWithoutProjectInput!]
  upsert: [StatsOnProjectUpsertWithWhereUniqueWithoutProjectInput!]
}

input StatsOnProjectUpdateWithWhereUniqueWithoutProjectInput {
  data: StatsOnProjectUpdateWithoutProjectInput!
  where: StatsOnProjectWhereUniqueInput!
}

input StatsOnProjectUpdateWithoutProjectInput {
  stat: StatUpdateOneRequiredWithoutProjectsInput
  value: StringFieldUpdateOperationsInput
}

input StatsOnProjectUpsertWithWhereUniqueWithoutProjectInput {
  create: StatsOnProjectCreateWithoutProjectInput!
  update: StatsOnProjectUpdateWithoutProjectInput!
  where: StatsOnProjectWhereUniqueInput!
}

input StatsOnProjectWhereInput {
  AND: [StatsOnProjectWhereInput!]
  NOT: [StatsOnProjectWhereInput!]
  OR: [StatsOnProjectWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  project: ProjectRelationFilter
  projectId: StringFilter
  stat: StatRelationFilter
  statId: StringFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input StatsOnProjectWhereUniqueInput {
  id: String
}

input StoneCreateNestedOneWithoutHistoryInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutHistoryInput
  create: StoneCreateWithoutHistoryInput
}

input StoneCreateNestedOneWithoutInventoryInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutInventoryInput
  create: StoneCreateWithoutInventoryInput
}

input StoneCreateNestedOneWithoutProjectPartsInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutProjectPartsInput
  create: StoneCreateWithoutProjectPartsInput
}

input StoneCreateNestedOneWithoutSubthemesInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutSubthemesInput
  create: StoneCreateWithoutSubthemesInput
}

input StoneCreateOrConnectWithoutHistoryInput {
  create: StoneCreateWithoutHistoryInput!
  where: StoneWhereUniqueInput!
}

input StoneCreateOrConnectWithoutInventoryInput {
  create: StoneCreateWithoutInventoryInput!
  where: StoneWhereUniqueInput!
}

input StoneCreateOrConnectWithoutProjectPartsInput {
  create: StoneCreateWithoutProjectPartsInput!
  where: StoneWhereUniqueInput!
}

input StoneCreateOrConnectWithoutSubthemesInput {
  create: StoneCreateWithoutSubthemesInput!
  where: StoneWhereUniqueInput!
}

input StoneCreateWithoutHistoryInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  inventory: StoneInventoryCreateNestedManyWithoutStoneInput
  name: String!
  order: Int!
  projectParts: StonesOnProjectCreateNestedManyWithoutStoneInput
  stoneType: StoneTypeCreateNestedOneWithoutStonesInput!
  subthemes: StonesOnSubthemeCreateNestedManyWithoutStoneInput
}

input StoneCreateWithoutInventoryInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  history: StoneInventoryHistoryCreateNestedManyWithoutStoneInput
  name: String!
  order: Int!
  projectParts: StonesOnProjectCreateNestedManyWithoutStoneInput
  stoneType: StoneTypeCreateNestedOneWithoutStonesInput!
  subthemes: StonesOnSubthemeCreateNestedManyWithoutStoneInput
}

input StoneCreateWithoutProjectPartsInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  history: StoneInventoryHistoryCreateNestedManyWithoutStoneInput
  inventory: StoneInventoryCreateNestedManyWithoutStoneInput
  name: String!
  order: Int!
  stoneType: StoneTypeCreateNestedOneWithoutStonesInput!
  subthemes: StonesOnSubthemeCreateNestedManyWithoutStoneInput
}

input StoneCreateWithoutSubthemesInput {
  alias: String!
  alias2: String
  description: String
  hex: String!
  hex2: String
  history: StoneInventoryHistoryCreateNestedManyWithoutStoneInput
  inventory: StoneInventoryCreateNestedManyWithoutStoneInput
  name: String!
  order: Int!
  projectParts: StonesOnProjectCreateNestedManyWithoutStoneInput
  stoneType: StoneTypeCreateNestedOneWithoutStonesInput!
}

type StoneInventory {
  amount: Int!
  createdAt: DateTime!
  id: String!
  stoneId: String!
  updatedAt: DateTime!
  userId: String!
}

input StoneInventoryCreateManyStoneInput {
  amount: Int!
  userId: String!
}

input StoneInventoryCreateManyStoneInputEnvelope {
  data: [StoneInventoryCreateManyStoneInput!]!
  skipDuplicates: Boolean
}

input StoneInventoryCreateManyUserInput {
  amount: Int!
  stoneId: String!
}

input StoneInventoryCreateManyUserInputEnvelope {
  data: [StoneInventoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StoneInventoryCreateNestedManyWithoutStoneInput {
  connect: [StoneInventoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryCreateOrConnectWithoutStoneInput!]
  create: [StoneInventoryCreateWithoutStoneInput!]
  createMany: StoneInventoryCreateManyStoneInputEnvelope
}

input StoneInventoryCreateNestedManyWithoutUserInput {
  connect: [StoneInventoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryCreateOrConnectWithoutUserInput!]
  create: [StoneInventoryCreateWithoutUserInput!]
  createMany: StoneInventoryCreateManyUserInputEnvelope
}

input StoneInventoryCreateOrConnectWithoutStoneInput {
  create: StoneInventoryCreateWithoutStoneInput!
  where: StoneInventoryWhereUniqueInput!
}

input StoneInventoryCreateOrConnectWithoutUserInput {
  create: StoneInventoryCreateWithoutUserInput!
  where: StoneInventoryWhereUniqueInput!
}

input StoneInventoryCreateWithoutStoneInput {
  amount: Int!
  user: UserCreateNestedOneWithoutStoneInventoryInput!
}

input StoneInventoryCreateWithoutUserInput {
  amount: Int!
  stone: StoneCreateNestedOneWithoutInventoryInput!
}

type StoneInventoryHistory {
  createdAt: DateTime!
  fieldName: String!
  id: String!
  newValue: String!
  oldValue: String!
  stoneId: String!
  updatedAt: DateTime!
  userId: String!
}

input StoneInventoryHistoryCreateManyStoneInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  userId: String!
}

input StoneInventoryHistoryCreateManyStoneInputEnvelope {
  data: [StoneInventoryHistoryCreateManyStoneInput!]!
  skipDuplicates: Boolean
}

input StoneInventoryHistoryCreateManyUserInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  stoneId: String!
}

input StoneInventoryHistoryCreateManyUserInputEnvelope {
  data: [StoneInventoryHistoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StoneInventoryHistoryCreateNestedManyWithoutStoneInput {
  connect: [StoneInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryHistoryCreateOrConnectWithoutStoneInput!]
  create: [StoneInventoryHistoryCreateWithoutStoneInput!]
  createMany: StoneInventoryHistoryCreateManyStoneInputEnvelope
}

input StoneInventoryHistoryCreateNestedManyWithoutUserInput {
  connect: [StoneInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryHistoryCreateOrConnectWithoutUserInput!]
  create: [StoneInventoryHistoryCreateWithoutUserInput!]
  createMany: StoneInventoryHistoryCreateManyUserInputEnvelope
}

input StoneInventoryHistoryCreateOrConnectWithoutStoneInput {
  create: StoneInventoryHistoryCreateWithoutStoneInput!
  where: StoneInventoryHistoryWhereUniqueInput!
}

input StoneInventoryHistoryCreateOrConnectWithoutUserInput {
  create: StoneInventoryHistoryCreateWithoutUserInput!
  where: StoneInventoryHistoryWhereUniqueInput!
}

input StoneInventoryHistoryCreateWithoutStoneInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  user: UserCreateNestedOneWithoutStoneInventoryHistoryInput!
}

input StoneInventoryHistoryCreateWithoutUserInput {
  fieldName: String!
  newValue: String!
  oldValue: String!
  stone: StoneCreateNestedOneWithoutHistoryInput!
}

input StoneInventoryHistoryListRelationFilter {
  every: StoneInventoryHistoryWhereInput
  none: StoneInventoryHistoryWhereInput
  some: StoneInventoryHistoryWhereInput
}

input StoneInventoryHistoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input StoneInventoryHistoryOrderByWithRelationInput {
  createdAt: SortOrder
  fieldName: SortOrder
  id: SortOrder
  newValue: SortOrder
  oldValue: SortOrder
  stone: StoneOrderByWithRelationInput
  stoneId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum StoneInventoryHistoryScalarFieldEnum {
  createdAt
  fieldName
  id
  newValue
  oldValue
  stoneId
  updatedAt
  userId
}

input StoneInventoryHistoryScalarWhereInput {
  AND: [StoneInventoryHistoryScalarWhereInput!]
  NOT: [StoneInventoryHistoryScalarWhereInput!]
  OR: [StoneInventoryHistoryScalarWhereInput!]
  createdAt: DateTimeFilter
  fieldName: StringFilter
  id: StringFilter
  newValue: StringFilter
  oldValue: StringFilter
  stoneId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input StoneInventoryHistoryUpdateManyMutationInput {
  fieldName: StringFieldUpdateOperationsInput
  newValue: StringFieldUpdateOperationsInput
  oldValue: StringFieldUpdateOperationsInput
}

input StoneInventoryHistoryUpdateManyWithWhereWithoutStoneInput {
  data: StoneInventoryHistoryUpdateManyMutationInput!
  where: StoneInventoryHistoryScalarWhereInput!
}

input StoneInventoryHistoryUpdateManyWithWhereWithoutUserInput {
  data: StoneInventoryHistoryUpdateManyMutationInput!
  where: StoneInventoryHistoryScalarWhereInput!
}

input StoneInventoryHistoryUpdateManyWithoutStoneInput {
  connect: [StoneInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryHistoryCreateOrConnectWithoutStoneInput!]
  create: [StoneInventoryHistoryCreateWithoutStoneInput!]
  createMany: StoneInventoryHistoryCreateManyStoneInputEnvelope
  delete: [StoneInventoryHistoryWhereUniqueInput!]
  deleteMany: [StoneInventoryHistoryScalarWhereInput!]
  disconnect: [StoneInventoryHistoryWhereUniqueInput!]
  set: [StoneInventoryHistoryWhereUniqueInput!]
  update: [StoneInventoryHistoryUpdateWithWhereUniqueWithoutStoneInput!]
  updateMany: [StoneInventoryHistoryUpdateManyWithWhereWithoutStoneInput!]
  upsert: [StoneInventoryHistoryUpsertWithWhereUniqueWithoutStoneInput!]
}

input StoneInventoryHistoryUpdateManyWithoutUserInput {
  connect: [StoneInventoryHistoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryHistoryCreateOrConnectWithoutUserInput!]
  create: [StoneInventoryHistoryCreateWithoutUserInput!]
  createMany: StoneInventoryHistoryCreateManyUserInputEnvelope
  delete: [StoneInventoryHistoryWhereUniqueInput!]
  deleteMany: [StoneInventoryHistoryScalarWhereInput!]
  disconnect: [StoneInventoryHistoryWhereUniqueInput!]
  set: [StoneInventoryHistoryWhereUniqueInput!]
  update: [StoneInventoryHistoryUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [StoneInventoryHistoryUpdateManyWithWhereWithoutUserInput!]
  upsert: [StoneInventoryHistoryUpsertWithWhereUniqueWithoutUserInput!]
}

input StoneInventoryHistoryUpdateWithWhereUniqueWithoutStoneInput {
  data: StoneInventoryHistoryUpdateWithoutStoneInput!
  where: StoneInventoryHistoryWhereUniqueInput!
}

input StoneInventoryHistoryUpdateWithWhereUniqueWithoutUserInput {
  data: StoneInventoryHistoryUpdateWithoutUserInput!
  where: StoneInventoryHistoryWhereUniqueInput!
}

input StoneInventoryHistoryUpdateWithoutStoneInput {
  fieldName: StringFieldUpdateOperationsInput
  newValue: StringFieldUpdateOperationsInput
  oldValue: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStoneInventoryHistoryInput
}

input StoneInventoryHistoryUpdateWithoutUserInput {
  fieldName: StringFieldUpdateOperationsInput
  newValue: StringFieldUpdateOperationsInput
  oldValue: StringFieldUpdateOperationsInput
  stone: StoneUpdateOneRequiredWithoutHistoryInput
}

input StoneInventoryHistoryUpsertWithWhereUniqueWithoutStoneInput {
  create: StoneInventoryHistoryCreateWithoutStoneInput!
  update: StoneInventoryHistoryUpdateWithoutStoneInput!
  where: StoneInventoryHistoryWhereUniqueInput!
}

input StoneInventoryHistoryUpsertWithWhereUniqueWithoutUserInput {
  create: StoneInventoryHistoryCreateWithoutUserInput!
  update: StoneInventoryHistoryUpdateWithoutUserInput!
  where: StoneInventoryHistoryWhereUniqueInput!
}

input StoneInventoryHistoryWhereInput {
  AND: [StoneInventoryHistoryWhereInput!]
  NOT: [StoneInventoryHistoryWhereInput!]
  OR: [StoneInventoryHistoryWhereInput!]
  createdAt: DateTimeFilter
  fieldName: StringFilter
  id: StringFilter
  newValue: StringFilter
  oldValue: StringFilter
  stone: StoneRelationFilter
  stoneId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StoneInventoryHistoryWhereUniqueInput {
  id: String
}

input StoneInventoryListRelationFilter {
  every: StoneInventoryWhereInput
  none: StoneInventoryWhereInput
  some: StoneInventoryWhereInput
}

input StoneInventoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input StoneInventoryOrderByWithRelationInput {
  amount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  stone: StoneOrderByWithRelationInput
  stoneId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum StoneInventoryScalarFieldEnum {
  amount
  createdAt
  id
  stoneId
  updatedAt
  userId
}

input StoneInventoryScalarWhereInput {
  AND: [StoneInventoryScalarWhereInput!]
  NOT: [StoneInventoryScalarWhereInput!]
  OR: [StoneInventoryScalarWhereInput!]
  amount: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  stoneId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input StoneInventoryUpdateManyMutationInput {
  amount: IntFieldUpdateOperationsInput
}

input StoneInventoryUpdateManyWithWhereWithoutStoneInput {
  data: StoneInventoryUpdateManyMutationInput!
  where: StoneInventoryScalarWhereInput!
}

input StoneInventoryUpdateManyWithWhereWithoutUserInput {
  data: StoneInventoryUpdateManyMutationInput!
  where: StoneInventoryScalarWhereInput!
}

input StoneInventoryUpdateManyWithoutStoneInput {
  connect: [StoneInventoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryCreateOrConnectWithoutStoneInput!]
  create: [StoneInventoryCreateWithoutStoneInput!]
  createMany: StoneInventoryCreateManyStoneInputEnvelope
  delete: [StoneInventoryWhereUniqueInput!]
  deleteMany: [StoneInventoryScalarWhereInput!]
  disconnect: [StoneInventoryWhereUniqueInput!]
  set: [StoneInventoryWhereUniqueInput!]
  update: [StoneInventoryUpdateWithWhereUniqueWithoutStoneInput!]
  updateMany: [StoneInventoryUpdateManyWithWhereWithoutStoneInput!]
  upsert: [StoneInventoryUpsertWithWhereUniqueWithoutStoneInput!]
}

input StoneInventoryUpdateManyWithoutUserInput {
  connect: [StoneInventoryWhereUniqueInput!]
  connectOrCreate: [StoneInventoryCreateOrConnectWithoutUserInput!]
  create: [StoneInventoryCreateWithoutUserInput!]
  createMany: StoneInventoryCreateManyUserInputEnvelope
  delete: [StoneInventoryWhereUniqueInput!]
  deleteMany: [StoneInventoryScalarWhereInput!]
  disconnect: [StoneInventoryWhereUniqueInput!]
  set: [StoneInventoryWhereUniqueInput!]
  update: [StoneInventoryUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [StoneInventoryUpdateManyWithWhereWithoutUserInput!]
  upsert: [StoneInventoryUpsertWithWhereUniqueWithoutUserInput!]
}

input StoneInventoryUpdateWithWhereUniqueWithoutStoneInput {
  data: StoneInventoryUpdateWithoutStoneInput!
  where: StoneInventoryWhereUniqueInput!
}

input StoneInventoryUpdateWithWhereUniqueWithoutUserInput {
  data: StoneInventoryUpdateWithoutUserInput!
  where: StoneInventoryWhereUniqueInput!
}

input StoneInventoryUpdateWithoutStoneInput {
  amount: IntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStoneInventoryInput
}

input StoneInventoryUpdateWithoutUserInput {
  amount: IntFieldUpdateOperationsInput
  stone: StoneUpdateOneRequiredWithoutInventoryInput
}

input StoneInventoryUpsertWithWhereUniqueWithoutStoneInput {
  create: StoneInventoryCreateWithoutStoneInput!
  update: StoneInventoryUpdateWithoutStoneInput!
  where: StoneInventoryWhereUniqueInput!
}

input StoneInventoryUpsertWithWhereUniqueWithoutUserInput {
  create: StoneInventoryCreateWithoutUserInput!
  update: StoneInventoryUpdateWithoutUserInput!
  where: StoneInventoryWhereUniqueInput!
}

input StoneInventoryWhereInput {
  AND: [StoneInventoryWhereInput!]
  NOT: [StoneInventoryWhereInput!]
  OR: [StoneInventoryWhereInput!]
  amount: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  stone: StoneRelationFilter
  stoneId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StoneInventoryWhereUniqueInput {
  id: String
}

input StoneListRelationFilter {
  every: StoneWhereInput
  none: StoneWhereInput
  some: StoneWhereInput
}

input StoneOrderByRelationAggregateInput {
  _count: SortOrder
}

input StoneOrderByWithRelationInput {
  alias: SortOrder
  alias2: SortOrder
  createdAt: SortOrder
  description: SortOrder
  hex: SortOrder
  hex2: SortOrder
  history: StoneInventoryHistoryOrderByRelationAggregateInput
  id: SortOrder
  inventory: StoneInventoryOrderByRelationAggregateInput
  name: SortOrder
  order: SortOrder
  projectParts: StonesOnProjectOrderByRelationAggregateInput
  stoneType: StoneTypeOrderByWithRelationInput
  stoneTypeId: SortOrder
  subthemes: StonesOnSubthemeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input StoneRelationFilter {
  is: StoneWhereInput
  isNot: StoneWhereInput
}

type StoneType {
  _count: StoneTypeCount
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  order: Int!
  teamId: String!
  updatedAt: DateTime!
}

type StoneTypeCount {
  stones: Int!
}

input StoneTypeCreateNestedOneWithoutStonesInput {
  connect: StoneTypeWhereUniqueInput
  connectOrCreate: StoneTypeCreateOrConnectWithoutStonesInput
  create: StoneTypeCreateWithoutStonesInput
}

input StoneTypeCreateOrConnectWithoutStonesInput {
  create: StoneTypeCreateWithoutStonesInput!
  where: StoneTypeWhereUniqueInput!
}

input StoneTypeCreateWithoutStonesInput {
  description: String
  name: String!
  order: Int!
}

input StoneTypeListRelationFilter {
  every: StoneTypeWhereInput
  none: StoneTypeWhereInput
  some: StoneTypeWhereInput
}

input StoneTypeOrderByRelationAggregateInput {
  _count: SortOrder
}

input StoneTypeOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  order: SortOrder
  stones: StoneOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input StoneTypeRelationFilter {
  is: StoneTypeWhereInput
  isNot: StoneTypeWhereInput
}

enum StoneTypeScalarFieldEnum {
  createdAt
  description
  id
  name
  order
  teamId
  updatedAt
}

input StoneTypeUpdateOneRequiredWithoutStonesInput {
  connect: StoneTypeWhereUniqueInput
  connectOrCreate: StoneTypeCreateOrConnectWithoutStonesInput
  create: StoneTypeCreateWithoutStonesInput
  update: StoneTypeUpdateWithoutStonesInput
  upsert: StoneTypeUpsertWithoutStonesInput
}

input StoneTypeUpdateWithoutStonesInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  order: IntFieldUpdateOperationsInput
}

input StoneTypeUpsertWithoutStonesInput {
  create: StoneTypeCreateWithoutStonesInput!
  update: StoneTypeUpdateWithoutStonesInput!
}

input StoneTypeWhereInput {
  AND: [StoneTypeWhereInput!]
  NOT: [StoneTypeWhereInput!]
  OR: [StoneTypeWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  order: IntFilter
  stones: StoneListRelationFilter
  updatedAt: DateTimeFilter
}

input StoneTypeWhereUniqueInput {
  id: String
}

input StoneUpdateOneRequiredWithoutHistoryInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutHistoryInput
  create: StoneCreateWithoutHistoryInput
  update: StoneUpdateWithoutHistoryInput
  upsert: StoneUpsertWithoutHistoryInput
}

input StoneUpdateOneRequiredWithoutInventoryInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutInventoryInput
  create: StoneCreateWithoutInventoryInput
  update: StoneUpdateWithoutInventoryInput
  upsert: StoneUpsertWithoutInventoryInput
}

input StoneUpdateOneRequiredWithoutProjectPartsInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutProjectPartsInput
  create: StoneCreateWithoutProjectPartsInput
  update: StoneUpdateWithoutProjectPartsInput
  upsert: StoneUpsertWithoutProjectPartsInput
}

input StoneUpdateOneRequiredWithoutSubthemesInput {
  connect: StoneWhereUniqueInput
  connectOrCreate: StoneCreateOrConnectWithoutSubthemesInput
  create: StoneCreateWithoutSubthemesInput
  update: StoneUpdateWithoutSubthemesInput
  upsert: StoneUpsertWithoutSubthemesInput
}

input StoneUpdateWithoutHistoryInput {
  alias: StringFieldUpdateOperationsInput
  alias2: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  hex: StringFieldUpdateOperationsInput
  hex2: NullableStringFieldUpdateOperationsInput
  inventory: StoneInventoryUpdateManyWithoutStoneInput
  name: StringFieldUpdateOperationsInput
  order: IntFieldUpdateOperationsInput
  projectParts: StonesOnProjectUpdateManyWithoutStoneInput
  stoneType: StoneTypeUpdateOneRequiredWithoutStonesInput
  subthemes: StonesOnSubthemeUpdateManyWithoutStoneInput
}

input StoneUpdateWithoutInventoryInput {
  alias: StringFieldUpdateOperationsInput
  alias2: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  hex: StringFieldUpdateOperationsInput
  hex2: NullableStringFieldUpdateOperationsInput
  history: StoneInventoryHistoryUpdateManyWithoutStoneInput
  name: StringFieldUpdateOperationsInput
  order: IntFieldUpdateOperationsInput
  projectParts: StonesOnProjectUpdateManyWithoutStoneInput
  stoneType: StoneTypeUpdateOneRequiredWithoutStonesInput
  subthemes: StonesOnSubthemeUpdateManyWithoutStoneInput
}

input StoneUpdateWithoutProjectPartsInput {
  alias: StringFieldUpdateOperationsInput
  alias2: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  hex: StringFieldUpdateOperationsInput
  hex2: NullableStringFieldUpdateOperationsInput
  history: StoneInventoryHistoryUpdateManyWithoutStoneInput
  inventory: StoneInventoryUpdateManyWithoutStoneInput
  name: StringFieldUpdateOperationsInput
  order: IntFieldUpdateOperationsInput
  stoneType: StoneTypeUpdateOneRequiredWithoutStonesInput
  subthemes: StonesOnSubthemeUpdateManyWithoutStoneInput
}

input StoneUpdateWithoutSubthemesInput {
  alias: StringFieldUpdateOperationsInput
  alias2: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  hex: StringFieldUpdateOperationsInput
  hex2: NullableStringFieldUpdateOperationsInput
  history: StoneInventoryHistoryUpdateManyWithoutStoneInput
  inventory: StoneInventoryUpdateManyWithoutStoneInput
  name: StringFieldUpdateOperationsInput
  order: IntFieldUpdateOperationsInput
  projectParts: StonesOnProjectUpdateManyWithoutStoneInput
  stoneType: StoneTypeUpdateOneRequiredWithoutStonesInput
}

input StoneUpsertWithoutHistoryInput {
  create: StoneCreateWithoutHistoryInput!
  update: StoneUpdateWithoutHistoryInput!
}

input StoneUpsertWithoutInventoryInput {
  create: StoneCreateWithoutInventoryInput!
  update: StoneUpdateWithoutInventoryInput!
}

input StoneUpsertWithoutProjectPartsInput {
  create: StoneCreateWithoutProjectPartsInput!
  update: StoneUpdateWithoutProjectPartsInput!
}

input StoneUpsertWithoutSubthemesInput {
  create: StoneCreateWithoutSubthemesInput!
  update: StoneUpdateWithoutSubthemesInput!
}

input StoneWhereInput {
  AND: [StoneWhereInput!]
  NOT: [StoneWhereInput!]
  OR: [StoneWhereInput!]
  alias: StringFilter
  alias2: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  hex: StringFilter
  hex2: StringNullableFilter
  history: StoneInventoryHistoryListRelationFilter
  id: StringFilter
  inventory: StoneInventoryListRelationFilter
  name: StringFilter
  order: IntFilter
  projectParts: StonesOnProjectListRelationFilter
  stoneType: StoneTypeRelationFilter
  stoneTypeId: StringFilter
  subthemes: StonesOnSubthemeListRelationFilter
  updatedAt: DateTimeFilter
}

input StoneWhereUniqueInput {
  id: String
}

type StonesOnProject {
  amount: Int!
  createdAt: DateTime!
  id: String!
  projectPartId: String!
  stoneId: String!
  updatedAt: DateTime!
  userId: String!
}

input StonesOnProjectCreateManyProjectPartInput {
  amount: Int!
  stoneId: String!
  userId: String!
}

input StonesOnProjectCreateManyProjectPartInputEnvelope {
  data: [StonesOnProjectCreateManyProjectPartInput!]!
  skipDuplicates: Boolean
}

input StonesOnProjectCreateManyStoneInput {
  amount: Int!
  projectPartId: String!
  userId: String!
}

input StonesOnProjectCreateManyStoneInputEnvelope {
  data: [StonesOnProjectCreateManyStoneInput!]!
  skipDuplicates: Boolean
}

input StonesOnProjectCreateManyUserInput {
  amount: Int!
  projectPartId: String!
  stoneId: String!
}

input StonesOnProjectCreateManyUserInputEnvelope {
  data: [StonesOnProjectCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StonesOnProjectCreateNestedManyWithoutProjectPartInput {
  connect: [StonesOnProjectWhereUniqueInput!]
  connectOrCreate: [StonesOnProjectCreateOrConnectWithoutProjectPartInput!]
  create: [StonesOnProjectCreateWithoutProjectPartInput!]
  createMany: StonesOnProjectCreateManyProjectPartInputEnvelope
}

input StonesOnProjectCreateNestedManyWithoutStoneInput {
  connect: [StonesOnProjectWhereUniqueInput!]
  connectOrCreate: [StonesOnProjectCreateOrConnectWithoutStoneInput!]
  create: [StonesOnProjectCreateWithoutStoneInput!]
  createMany: StonesOnProjectCreateManyStoneInputEnvelope
}

input StonesOnProjectCreateNestedManyWithoutUserInput {
  connect: [StonesOnProjectWhereUniqueInput!]
  connectOrCreate: [StonesOnProjectCreateOrConnectWithoutUserInput!]
  create: [StonesOnProjectCreateWithoutUserInput!]
  createMany: StonesOnProjectCreateManyUserInputEnvelope
}

input StonesOnProjectCreateOrConnectWithoutProjectPartInput {
  create: StonesOnProjectCreateWithoutProjectPartInput!
  where: StonesOnProjectWhereUniqueInput!
}

input StonesOnProjectCreateOrConnectWithoutStoneInput {
  create: StonesOnProjectCreateWithoutStoneInput!
  where: StonesOnProjectWhereUniqueInput!
}

input StonesOnProjectCreateOrConnectWithoutUserInput {
  create: StonesOnProjectCreateWithoutUserInput!
  where: StonesOnProjectWhereUniqueInput!
}

input StonesOnProjectCreateWithoutProjectPartInput {
  amount: Int!
  stone: StoneCreateNestedOneWithoutProjectPartsInput!
  user: UserCreateNestedOneWithoutStonesOnProjectPartsInput!
}

input StonesOnProjectCreateWithoutStoneInput {
  amount: Int!
  projectPart: ProjectPartCreateNestedOneWithoutStonesInput!
  user: UserCreateNestedOneWithoutStonesOnProjectPartsInput!
}

input StonesOnProjectCreateWithoutUserInput {
  amount: Int!
  projectPart: ProjectPartCreateNestedOneWithoutStonesInput!
  stone: StoneCreateNestedOneWithoutProjectPartsInput!
}

input StonesOnProjectListRelationFilter {
  every: StonesOnProjectWhereInput
  none: StonesOnProjectWhereInput
  some: StonesOnProjectWhereInput
}

input StonesOnProjectOrderByRelationAggregateInput {
  _count: SortOrder
}

input StonesOnProjectOrderByWithRelationInput {
  amount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  projectPart: ProjectPartOrderByWithRelationInput
  projectPartId: SortOrder
  stone: StoneOrderByWithRelationInput
  stoneId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum StonesOnProjectScalarFieldEnum {
  amount
  createdAt
  id
  projectPartId
  stoneId
  updatedAt
  userId
}

input StonesOnProjectScalarWhereInput {
  AND: [StonesOnProjectScalarWhereInput!]
  NOT: [StonesOnProjectScalarWhereInput!]
  OR: [StonesOnProjectScalarWhereInput!]
  amount: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  projectPartId: StringFilter
  stoneId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input StonesOnProjectUpdateManyMutationInput {
  amount: IntFieldUpdateOperationsInput
}

input StonesOnProjectUpdateManyWithWhereWithoutProjectPartInput {
  data: StonesOnProjectUpdateManyMutationInput!
  where: StonesOnProjectScalarWhereInput!
}

input StonesOnProjectUpdateManyWithWhereWithoutStoneInput {
  data: StonesOnProjectUpdateManyMutationInput!
  where: StonesOnProjectScalarWhereInput!
}

input StonesOnProjectUpdateManyWithWhereWithoutUserInput {
  data: StonesOnProjectUpdateManyMutationInput!
  where: StonesOnProjectScalarWhereInput!
}

input StonesOnProjectUpdateManyWithoutProjectPartInput {
  connect: [StonesOnProjectWhereUniqueInput!]
  connectOrCreate: [StonesOnProjectCreateOrConnectWithoutProjectPartInput!]
  create: [StonesOnProjectCreateWithoutProjectPartInput!]
  createMany: StonesOnProjectCreateManyProjectPartInputEnvelope
  delete: [StonesOnProjectWhereUniqueInput!]
  deleteMany: [StonesOnProjectScalarWhereInput!]
  disconnect: [StonesOnProjectWhereUniqueInput!]
  set: [StonesOnProjectWhereUniqueInput!]
  update: [StonesOnProjectUpdateWithWhereUniqueWithoutProjectPartInput!]
  updateMany: [StonesOnProjectUpdateManyWithWhereWithoutProjectPartInput!]
  upsert: [StonesOnProjectUpsertWithWhereUniqueWithoutProjectPartInput!]
}

input StonesOnProjectUpdateManyWithoutStoneInput {
  connect: [StonesOnProjectWhereUniqueInput!]
  connectOrCreate: [StonesOnProjectCreateOrConnectWithoutStoneInput!]
  create: [StonesOnProjectCreateWithoutStoneInput!]
  createMany: StonesOnProjectCreateManyStoneInputEnvelope
  delete: [StonesOnProjectWhereUniqueInput!]
  deleteMany: [StonesOnProjectScalarWhereInput!]
  disconnect: [StonesOnProjectWhereUniqueInput!]
  set: [StonesOnProjectWhereUniqueInput!]
  update: [StonesOnProjectUpdateWithWhereUniqueWithoutStoneInput!]
  updateMany: [StonesOnProjectUpdateManyWithWhereWithoutStoneInput!]
  upsert: [StonesOnProjectUpsertWithWhereUniqueWithoutStoneInput!]
}

input StonesOnProjectUpdateManyWithoutUserInput {
  connect: [StonesOnProjectWhereUniqueInput!]
  connectOrCreate: [StonesOnProjectCreateOrConnectWithoutUserInput!]
  create: [StonesOnProjectCreateWithoutUserInput!]
  createMany: StonesOnProjectCreateManyUserInputEnvelope
  delete: [StonesOnProjectWhereUniqueInput!]
  deleteMany: [StonesOnProjectScalarWhereInput!]
  disconnect: [StonesOnProjectWhereUniqueInput!]
  set: [StonesOnProjectWhereUniqueInput!]
  update: [StonesOnProjectUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [StonesOnProjectUpdateManyWithWhereWithoutUserInput!]
  upsert: [StonesOnProjectUpsertWithWhereUniqueWithoutUserInput!]
}

input StonesOnProjectUpdateWithWhereUniqueWithoutProjectPartInput {
  data: StonesOnProjectUpdateWithoutProjectPartInput!
  where: StonesOnProjectWhereUniqueInput!
}

input StonesOnProjectUpdateWithWhereUniqueWithoutStoneInput {
  data: StonesOnProjectUpdateWithoutStoneInput!
  where: StonesOnProjectWhereUniqueInput!
}

input StonesOnProjectUpdateWithWhereUniqueWithoutUserInput {
  data: StonesOnProjectUpdateWithoutUserInput!
  where: StonesOnProjectWhereUniqueInput!
}

input StonesOnProjectUpdateWithoutProjectPartInput {
  amount: IntFieldUpdateOperationsInput
  stone: StoneUpdateOneRequiredWithoutProjectPartsInput
  user: UserUpdateOneRequiredWithoutStonesOnProjectPartsInput
}

input StonesOnProjectUpdateWithoutStoneInput {
  amount: IntFieldUpdateOperationsInput
  projectPart: ProjectPartUpdateOneRequiredWithoutStonesInput
  user: UserUpdateOneRequiredWithoutStonesOnProjectPartsInput
}

input StonesOnProjectUpdateWithoutUserInput {
  amount: IntFieldUpdateOperationsInput
  projectPart: ProjectPartUpdateOneRequiredWithoutStonesInput
  stone: StoneUpdateOneRequiredWithoutProjectPartsInput
}

input StonesOnProjectUpsertWithWhereUniqueWithoutProjectPartInput {
  create: StonesOnProjectCreateWithoutProjectPartInput!
  update: StonesOnProjectUpdateWithoutProjectPartInput!
  where: StonesOnProjectWhereUniqueInput!
}

input StonesOnProjectUpsertWithWhereUniqueWithoutStoneInput {
  create: StonesOnProjectCreateWithoutStoneInput!
  update: StonesOnProjectUpdateWithoutStoneInput!
  where: StonesOnProjectWhereUniqueInput!
}

input StonesOnProjectUpsertWithWhereUniqueWithoutUserInput {
  create: StonesOnProjectCreateWithoutUserInput!
  update: StonesOnProjectUpdateWithoutUserInput!
  where: StonesOnProjectWhereUniqueInput!
}

input StonesOnProjectWhereInput {
  AND: [StonesOnProjectWhereInput!]
  NOT: [StonesOnProjectWhereInput!]
  OR: [StonesOnProjectWhereInput!]
  amount: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  projectPart: ProjectPartRelationFilter
  projectPartId: StringFilter
  stone: StoneRelationFilter
  stoneId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StonesOnProjectWhereUniqueInput {
  id: String
}

type StonesOnSubtheme {
  amount: Int!
  createdAt: DateTime!
  id: String!
  stoneId: String!
  subthemeId: String!
  updatedAt: DateTime!
  userId: String!
}

input StonesOnSubthemeCreateManyStoneInput {
  amount: Int!
  subthemeId: String!
  userId: String!
}

input StonesOnSubthemeCreateManyStoneInputEnvelope {
  data: [StonesOnSubthemeCreateManyStoneInput!]!
  skipDuplicates: Boolean
}

input StonesOnSubthemeCreateManySubthemeInput {
  amount: Int!
  stoneId: String!
  userId: String!
}

input StonesOnSubthemeCreateManySubthemeInputEnvelope {
  data: [StonesOnSubthemeCreateManySubthemeInput!]!
  skipDuplicates: Boolean
}

input StonesOnSubthemeCreateManyUserInput {
  amount: Int!
  stoneId: String!
  subthemeId: String!
}

input StonesOnSubthemeCreateManyUserInputEnvelope {
  data: [StonesOnSubthemeCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StonesOnSubthemeCreateNestedManyWithoutStoneInput {
  connect: [StonesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [StonesOnSubthemeCreateOrConnectWithoutStoneInput!]
  create: [StonesOnSubthemeCreateWithoutStoneInput!]
  createMany: StonesOnSubthemeCreateManyStoneInputEnvelope
}

input StonesOnSubthemeCreateNestedManyWithoutSubthemeInput {
  connect: [StonesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [StonesOnSubthemeCreateOrConnectWithoutSubthemeInput!]
  create: [StonesOnSubthemeCreateWithoutSubthemeInput!]
  createMany: StonesOnSubthemeCreateManySubthemeInputEnvelope
}

input StonesOnSubthemeCreateNestedManyWithoutUserInput {
  connect: [StonesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [StonesOnSubthemeCreateOrConnectWithoutUserInput!]
  create: [StonesOnSubthemeCreateWithoutUserInput!]
  createMany: StonesOnSubthemeCreateManyUserInputEnvelope
}

input StonesOnSubthemeCreateOrConnectWithoutStoneInput {
  create: StonesOnSubthemeCreateWithoutStoneInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeCreateOrConnectWithoutSubthemeInput {
  create: StonesOnSubthemeCreateWithoutSubthemeInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeCreateOrConnectWithoutUserInput {
  create: StonesOnSubthemeCreateWithoutUserInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeCreateWithoutStoneInput {
  amount: Int!
  subtheme: SubthemeCreateNestedOneWithoutStonesInput!
  user: UserCreateNestedOneWithoutStonesOnSubthemesInput!
}

input StonesOnSubthemeCreateWithoutSubthemeInput {
  amount: Int!
  stone: StoneCreateNestedOneWithoutSubthemesInput!
  user: UserCreateNestedOneWithoutStonesOnSubthemesInput!
}

input StonesOnSubthemeCreateWithoutUserInput {
  amount: Int!
  stone: StoneCreateNestedOneWithoutSubthemesInput!
  subtheme: SubthemeCreateNestedOneWithoutStonesInput!
}

input StonesOnSubthemeListRelationFilter {
  every: StonesOnSubthemeWhereInput
  none: StonesOnSubthemeWhereInput
  some: StonesOnSubthemeWhereInput
}

input StonesOnSubthemeOrderByRelationAggregateInput {
  _count: SortOrder
}

input StonesOnSubthemeOrderByWithRelationInput {
  amount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  stone: StoneOrderByWithRelationInput
  stoneId: SortOrder
  subtheme: SubthemeOrderByWithRelationInput
  subthemeId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum StonesOnSubthemeScalarFieldEnum {
  amount
  createdAt
  id
  stoneId
  subthemeId
  updatedAt
  userId
}

input StonesOnSubthemeScalarWhereInput {
  AND: [StonesOnSubthemeScalarWhereInput!]
  NOT: [StonesOnSubthemeScalarWhereInput!]
  OR: [StonesOnSubthemeScalarWhereInput!]
  amount: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  stoneId: StringFilter
  subthemeId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input StonesOnSubthemeUpdateManyMutationInput {
  amount: IntFieldUpdateOperationsInput
}

input StonesOnSubthemeUpdateManyWithWhereWithoutStoneInput {
  data: StonesOnSubthemeUpdateManyMutationInput!
  where: StonesOnSubthemeScalarWhereInput!
}

input StonesOnSubthemeUpdateManyWithWhereWithoutSubthemeInput {
  data: StonesOnSubthemeUpdateManyMutationInput!
  where: StonesOnSubthemeScalarWhereInput!
}

input StonesOnSubthemeUpdateManyWithWhereWithoutUserInput {
  data: StonesOnSubthemeUpdateManyMutationInput!
  where: StonesOnSubthemeScalarWhereInput!
}

input StonesOnSubthemeUpdateManyWithoutStoneInput {
  connect: [StonesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [StonesOnSubthemeCreateOrConnectWithoutStoneInput!]
  create: [StonesOnSubthemeCreateWithoutStoneInput!]
  createMany: StonesOnSubthemeCreateManyStoneInputEnvelope
  delete: [StonesOnSubthemeWhereUniqueInput!]
  deleteMany: [StonesOnSubthemeScalarWhereInput!]
  disconnect: [StonesOnSubthemeWhereUniqueInput!]
  set: [StonesOnSubthemeWhereUniqueInput!]
  update: [StonesOnSubthemeUpdateWithWhereUniqueWithoutStoneInput!]
  updateMany: [StonesOnSubthemeUpdateManyWithWhereWithoutStoneInput!]
  upsert: [StonesOnSubthemeUpsertWithWhereUniqueWithoutStoneInput!]
}

input StonesOnSubthemeUpdateManyWithoutSubthemeInput {
  connect: [StonesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [StonesOnSubthemeCreateOrConnectWithoutSubthemeInput!]
  create: [StonesOnSubthemeCreateWithoutSubthemeInput!]
  createMany: StonesOnSubthemeCreateManySubthemeInputEnvelope
  delete: [StonesOnSubthemeWhereUniqueInput!]
  deleteMany: [StonesOnSubthemeScalarWhereInput!]
  disconnect: [StonesOnSubthemeWhereUniqueInput!]
  set: [StonesOnSubthemeWhereUniqueInput!]
  update: [StonesOnSubthemeUpdateWithWhereUniqueWithoutSubthemeInput!]
  updateMany: [StonesOnSubthemeUpdateManyWithWhereWithoutSubthemeInput!]
  upsert: [StonesOnSubthemeUpsertWithWhereUniqueWithoutSubthemeInput!]
}

input StonesOnSubthemeUpdateManyWithoutUserInput {
  connect: [StonesOnSubthemeWhereUniqueInput!]
  connectOrCreate: [StonesOnSubthemeCreateOrConnectWithoutUserInput!]
  create: [StonesOnSubthemeCreateWithoutUserInput!]
  createMany: StonesOnSubthemeCreateManyUserInputEnvelope
  delete: [StonesOnSubthemeWhereUniqueInput!]
  deleteMany: [StonesOnSubthemeScalarWhereInput!]
  disconnect: [StonesOnSubthemeWhereUniqueInput!]
  set: [StonesOnSubthemeWhereUniqueInput!]
  update: [StonesOnSubthemeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [StonesOnSubthemeUpdateManyWithWhereWithoutUserInput!]
  upsert: [StonesOnSubthemeUpsertWithWhereUniqueWithoutUserInput!]
}

input StonesOnSubthemeUpdateWithWhereUniqueWithoutStoneInput {
  data: StonesOnSubthemeUpdateWithoutStoneInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeUpdateWithWhereUniqueWithoutSubthemeInput {
  data: StonesOnSubthemeUpdateWithoutSubthemeInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeUpdateWithWhereUniqueWithoutUserInput {
  data: StonesOnSubthemeUpdateWithoutUserInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeUpdateWithoutStoneInput {
  amount: IntFieldUpdateOperationsInput
  subtheme: SubthemeUpdateOneRequiredWithoutStonesInput
  user: UserUpdateOneRequiredWithoutStonesOnSubthemesInput
}

input StonesOnSubthemeUpdateWithoutSubthemeInput {
  amount: IntFieldUpdateOperationsInput
  stone: StoneUpdateOneRequiredWithoutSubthemesInput
  user: UserUpdateOneRequiredWithoutStonesOnSubthemesInput
}

input StonesOnSubthemeUpdateWithoutUserInput {
  amount: IntFieldUpdateOperationsInput
  stone: StoneUpdateOneRequiredWithoutSubthemesInput
  subtheme: SubthemeUpdateOneRequiredWithoutStonesInput
}

input StonesOnSubthemeUpsertWithWhereUniqueWithoutStoneInput {
  create: StonesOnSubthemeCreateWithoutStoneInput!
  update: StonesOnSubthemeUpdateWithoutStoneInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeUpsertWithWhereUniqueWithoutSubthemeInput {
  create: StonesOnSubthemeCreateWithoutSubthemeInput!
  update: StonesOnSubthemeUpdateWithoutSubthemeInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeUpsertWithWhereUniqueWithoutUserInput {
  create: StonesOnSubthemeCreateWithoutUserInput!
  update: StonesOnSubthemeUpdateWithoutUserInput!
  where: StonesOnSubthemeWhereUniqueInput!
}

input StonesOnSubthemeWhereInput {
  AND: [StonesOnSubthemeWhereInput!]
  NOT: [StonesOnSubthemeWhereInput!]
  OR: [StonesOnSubthemeWhereInput!]
  amount: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  stone: StoneRelationFilter
  stoneId: StringFilter
  subtheme: SubthemeRelationFilter
  subthemeId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StonesOnSubthemeWhereUniqueInput {
  id: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subtheme {
  _count: SubthemeCount
  color: String!
  createdAt: DateTime!
  eventId: String!
  id: String!
  name: String!
  order: Int!
  slug: String!
  updatedAt: DateTime!
}

type SubthemeCount {
  attributes: Int!
  projects: Int!
  stones: Int!
}

input SubthemeCreateNestedOneWithoutAttributesInput {
  connect: SubthemeWhereUniqueInput
  connectOrCreate: SubthemeCreateOrConnectWithoutAttributesInput
  create: SubthemeCreateWithoutAttributesInput
}

input SubthemeCreateNestedOneWithoutProjectsInput {
  connect: SubthemeWhereUniqueInput
  connectOrCreate: SubthemeCreateOrConnectWithoutProjectsInput
  create: SubthemeCreateWithoutProjectsInput
}

input SubthemeCreateNestedOneWithoutStonesInput {
  connect: SubthemeWhereUniqueInput
  connectOrCreate: SubthemeCreateOrConnectWithoutStonesInput
  create: SubthemeCreateWithoutStonesInput
}

input SubthemeCreateOrConnectWithoutAttributesInput {
  create: SubthemeCreateWithoutAttributesInput!
  where: SubthemeWhereUniqueInput!
}

input SubthemeCreateOrConnectWithoutProjectsInput {
  create: SubthemeCreateWithoutProjectsInput!
  where: SubthemeWhereUniqueInput!
}

input SubthemeCreateOrConnectWithoutStonesInput {
  create: SubthemeCreateWithoutStonesInput!
  where: SubthemeWhereUniqueInput!
}

input SubthemeCreateWithoutAttributesInput {
  color: String!
  event: EventCreateNestedOneWithoutSubthemesInput!
  name: String!
  order: Int!
  projects: ProjectCreateNestedManyWithoutSubthemeInput
  slug: String!
  stones: StonesOnSubthemeCreateNestedManyWithoutSubthemeInput
}

input SubthemeCreateWithoutProjectsInput {
  attributes: AttributesOnSubthemeCreateNestedManyWithoutSubthemeInput
  color: String!
  event: EventCreateNestedOneWithoutSubthemesInput!
  name: String!
  order: Int!
  slug: String!
  stones: StonesOnSubthemeCreateNestedManyWithoutSubthemeInput
}

input SubthemeCreateWithoutStonesInput {
  attributes: AttributesOnSubthemeCreateNestedManyWithoutSubthemeInput
  color: String!
  event: EventCreateNestedOneWithoutSubthemesInput!
  name: String!
  order: Int!
  projects: ProjectCreateNestedManyWithoutSubthemeInput
  slug: String!
}

input SubthemeListRelationFilter {
  every: SubthemeWhereInput
  none: SubthemeWhereInput
  some: SubthemeWhereInput
}

input SubthemeOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubthemeOrderByWithRelationInput {
  attributes: AttributesOnSubthemeOrderByRelationAggregateInput
  color: SortOrder
  createdAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  name: SortOrder
  order: SortOrder
  projects: ProjectOrderByRelationAggregateInput
  slug: SortOrder
  stones: StonesOnSubthemeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input SubthemeRelationFilter {
  is: SubthemeWhereInput
  isNot: SubthemeWhereInput
}

input SubthemeUpdateOneRequiredWithoutAttributesInput {
  connect: SubthemeWhereUniqueInput
  connectOrCreate: SubthemeCreateOrConnectWithoutAttributesInput
  create: SubthemeCreateWithoutAttributesInput
  update: SubthemeUpdateWithoutAttributesInput
  upsert: SubthemeUpsertWithoutAttributesInput
}

input SubthemeUpdateOneRequiredWithoutProjectsInput {
  connect: SubthemeWhereUniqueInput
  connectOrCreate: SubthemeCreateOrConnectWithoutProjectsInput
  create: SubthemeCreateWithoutProjectsInput
  update: SubthemeUpdateWithoutProjectsInput
  upsert: SubthemeUpsertWithoutProjectsInput
}

input SubthemeUpdateOneRequiredWithoutStonesInput {
  connect: SubthemeWhereUniqueInput
  connectOrCreate: SubthemeCreateOrConnectWithoutStonesInput
  create: SubthemeCreateWithoutStonesInput
  update: SubthemeUpdateWithoutStonesInput
  upsert: SubthemeUpsertWithoutStonesInput
}

input SubthemeUpdateWithoutAttributesInput {
  color: StringFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutSubthemesInput
  name: StringFieldUpdateOperationsInput
  order: IntFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutSubthemeInput
  slug: StringFieldUpdateOperationsInput
  stones: StonesOnSubthemeUpdateManyWithoutSubthemeInput
}

input SubthemeUpdateWithoutProjectsInput {
  attributes: AttributesOnSubthemeUpdateManyWithoutSubthemeInput
  color: StringFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutSubthemesInput
  name: StringFieldUpdateOperationsInput
  order: IntFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  stones: StonesOnSubthemeUpdateManyWithoutSubthemeInput
}

input SubthemeUpdateWithoutStonesInput {
  attributes: AttributesOnSubthemeUpdateManyWithoutSubthemeInput
  color: StringFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutSubthemesInput
  name: StringFieldUpdateOperationsInput
  order: IntFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutSubthemeInput
  slug: StringFieldUpdateOperationsInput
}

input SubthemeUpsertWithoutAttributesInput {
  create: SubthemeCreateWithoutAttributesInput!
  update: SubthemeUpdateWithoutAttributesInput!
}

input SubthemeUpsertWithoutProjectsInput {
  create: SubthemeCreateWithoutProjectsInput!
  update: SubthemeUpdateWithoutProjectsInput!
}

input SubthemeUpsertWithoutStonesInput {
  create: SubthemeCreateWithoutStonesInput!
  update: SubthemeUpdateWithoutStonesInput!
}

input SubthemeWhereInput {
  AND: [SubthemeWhereInput!]
  NOT: [SubthemeWhereInput!]
  OR: [SubthemeWhereInput!]
  attributes: AttributesOnSubthemeListRelationFilter
  color: StringFilter
  createdAt: DateTimeFilter
  event: EventRelationFilter
  eventId: StringFilter
  id: StringFilter
  name: StringFilter
  order: IntFilter
  projects: ProjectListRelationFilter
  slug: StringFilter
  stones: StonesOnSubthemeListRelationFilter
  updatedAt: DateTimeFilter
}

input SubthemeWhereUniqueInput {
  id: String
  slug: String
}

type Team {
  _count: TeamCount
  attributes(cursor: AttributeWhereUniqueInput, distinct: [AttributeScalarFieldEnum!], orderBy: [AttributeOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeWhereInput): [Attribute!]!
  createdAt: DateTime!
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  id: String!
  members(cursor: MemberWhereUniqueInput, distinct: [MemberScalarFieldEnum!], orderBy: [MemberOrderByWithRelationInput!], skip: Int, take: Int, where: MemberWhereInput): [Member!]!
  name: String!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  stats(cursor: StatWhereUniqueInput, distinct: [StatScalarFieldEnum!], orderBy: [StatOrderByWithRelationInput!], skip: Int, take: Int, where: StatWhereInput): [Stat!]!
  stoneTypes(cursor: StoneTypeWhereUniqueInput, distinct: [StoneTypeScalarFieldEnum!], orderBy: [StoneTypeOrderByWithRelationInput!], skip: Int, take: Int, where: StoneTypeWhereInput): [StoneType!]!
  updatedAt: DateTime!
}

type TeamCount {
  attributes: Int!
  events: Int!
  members: Int!
  sessions: Int!
  stats: Int!
  stoneTypes: Int!
}

input TeamOrderByWithRelationInput {
  attributes: AttributeOrderByRelationAggregateInput
  createdAt: SortOrder
  events: EventOrderByRelationAggregateInput
  id: SortOrder
  members: MemberOrderByRelationAggregateInput
  name: SortOrder
  sessions: SessionOrderByRelationAggregateInput
  stats: StatOrderByRelationAggregateInput
  stoneTypes: StoneTypeOrderByRelationAggregateInput
  updatedAt: SortOrder
}

enum TeamScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  attributes: AttributeListRelationFilter
  createdAt: DateTimeFilter
  events: EventListRelationFilter
  id: StringFilter
  members: MemberListRelationFilter
  name: StringFilter
  sessions: SessionListRelationFilter
  stats: StatListRelationFilter
  stoneTypes: StoneTypeListRelationFilter
  updatedAt: DateTimeFilter
}

input TeamWhereUniqueInput {
  id: String
}

type TokenPayload {
  access: String!
  accessExpiresAt: DateTime
}

type User {
  _count: UserCount
  attributeInventory(cursor: AttributeInventoryWhereUniqueInput, distinct: [AttributeInventoryScalarFieldEnum!], orderBy: [AttributeInventoryOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeInventoryWhereInput): [AttributeInventory!]!
  attributeInventoryHistory(cursor: AttributeInventoryHistoryWhereUniqueInput, distinct: [AttributeInventoryHistoryScalarFieldEnum!], orderBy: [AttributeInventoryHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: AttributeInventoryHistoryWhereInput): [AttributeInventoryHistory!]!
  attributesOnProjectParts(cursor: AttributesOnProjectWhereUniqueInput, distinct: [AttributesOnProjectScalarFieldEnum!], orderBy: [AttributesOnProjectOrderByWithRelationInput!], skip: Int, take: Int, where: AttributesOnProjectWhereInput): [AttributesOnProject!]!
  attributesOnSubthemes(cursor: AttributesOnSubthemeWhereUniqueInput, distinct: [AttributesOnSubthemeScalarFieldEnum!], orderBy: [AttributesOnSubthemeOrderByWithRelationInput!], skip: Int, take: Int, where: AttributesOnSubthemeWhereInput): [AttributesOnSubtheme!]!
  avatar: String
  createdAt: DateTime!
  createdProjects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
  displayName: String!
  email: String!
  firstName: String!
  id: String!
  isAdmin: Boolean!
  lastName: String!
  projectHistory(cursor: ProjectHistoryWhereUniqueInput, distinct: [ProjectHistoryScalarFieldEnum!], orderBy: [ProjectHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectHistoryWhereInput): [ProjectHistory!]!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  slug: String!
  stoneInventory(cursor: StoneInventoryWhereUniqueInput, distinct: [StoneInventoryScalarFieldEnum!], orderBy: [StoneInventoryOrderByWithRelationInput!], skip: Int, take: Int, where: StoneInventoryWhereInput): [StoneInventory!]!
  stoneInventoryHistory(cursor: StoneInventoryHistoryWhereUniqueInput, distinct: [StoneInventoryHistoryScalarFieldEnum!], orderBy: [StoneInventoryHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: StoneInventoryHistoryWhereInput): [StoneInventoryHistory!]!
  stonesOnProjectParts(cursor: StonesOnProjectWhereUniqueInput, distinct: [StonesOnProjectScalarFieldEnum!], orderBy: [StonesOnProjectOrderByWithRelationInput!], skip: Int, take: Int, where: StonesOnProjectWhereInput): [StonesOnProject!]!
  stonesOnSubthemes(cursor: StonesOnSubthemeWhereUniqueInput, distinct: [StonesOnSubthemeScalarFieldEnum!], orderBy: [StonesOnSubthemeOrderByWithRelationInput!], skip: Int, take: Int, where: StonesOnSubthemeWhereInput): [StonesOnSubtheme!]!
  supervisingProjects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!

  """The teams this user is a member of"""
  teams(cursor: MemberWhereUniqueInput, distinct: [MemberScalarFieldEnum!], orderBy: [MemberOrderByWithRelationInput!], skip: Int, take: Int, where: MemberWhereInput): [Member!]!
  updatedAt: DateTime!
}

type UserCount {
  attributeInventory: Int!
  attributeInventoryHistory: Int!
  attributesOnProjectParts: Int!
  attributesOnSubthemes: Int!
  createdProjects: Int!
  projectHistory: Int!
  sessions: Int!
  stoneInventory: Int!
  stoneInventoryHistory: Int!
  stonesOnProjectParts: Int!
  stonesOnSubthemes: Int!
  supervisingProjects: Int!
  teams: Int!
}

input UserCreateInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateNestedOneWithoutAttributeInventoryHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributeInventoryHistoryInput
  create: UserCreateWithoutAttributeInventoryHistoryInput
}

input UserCreateNestedOneWithoutAttributeInventoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributeInventoryInput
  create: UserCreateWithoutAttributeInventoryInput
}

input UserCreateNestedOneWithoutAttributesOnProjectPartsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributesOnProjectPartsInput
  create: UserCreateWithoutAttributesOnProjectPartsInput
}

input UserCreateNestedOneWithoutAttributesOnSubthemesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributesOnSubthemesInput
  create: UserCreateWithoutAttributesOnSubthemesInput
}

input UserCreateNestedOneWithoutCreatedProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatedProjectsInput
  create: UserCreateWithoutCreatedProjectsInput
}

input UserCreateNestedOneWithoutProjectHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectHistoryInput
  create: UserCreateWithoutProjectHistoryInput
}

input UserCreateNestedOneWithoutStoneInventoryHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStoneInventoryHistoryInput
  create: UserCreateWithoutStoneInventoryHistoryInput
}

input UserCreateNestedOneWithoutStoneInventoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStoneInventoryInput
  create: UserCreateWithoutStoneInventoryInput
}

input UserCreateNestedOneWithoutStonesOnProjectPartsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStonesOnProjectPartsInput
  create: UserCreateWithoutStonesOnProjectPartsInput
}

input UserCreateNestedOneWithoutStonesOnSubthemesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStonesOnSubthemesInput
  create: UserCreateWithoutStonesOnSubthemesInput
}

input UserCreateNestedOneWithoutSupervisingProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSupervisingProjectsInput
  create: UserCreateWithoutSupervisingProjectsInput
}

input UserCreateOrConnectWithoutAttributeInventoryHistoryInput {
  create: UserCreateWithoutAttributeInventoryHistoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAttributeInventoryInput {
  create: UserCreateWithoutAttributeInventoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAttributesOnProjectPartsInput {
  create: UserCreateWithoutAttributesOnProjectPartsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAttributesOnSubthemesInput {
  create: UserCreateWithoutAttributesOnSubthemesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCreatedProjectsInput {
  create: UserCreateWithoutCreatedProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProjectHistoryInput {
  create: UserCreateWithoutProjectHistoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStoneInventoryHistoryInput {
  create: UserCreateWithoutStoneInventoryHistoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStoneInventoryInput {
  create: UserCreateWithoutStoneInventoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStonesOnProjectPartsInput {
  create: UserCreateWithoutStonesOnProjectPartsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStonesOnSubthemesInput {
  create: UserCreateWithoutStonesOnSubthemesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSupervisingProjectsInput {
  create: UserCreateWithoutSupervisingProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAttributeInventoryHistoryInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutAttributeInventoryInput {
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutAttributesOnProjectPartsInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutAttributesOnSubthemesInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutCreatedProjectsInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutProjectHistoryInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStoneInventoryHistoryInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStoneInventoryInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStonesOnProjectPartsInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStonesOnSubthemesInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  supervisingProjects: ProjectCreateNestedManyWithoutSupervisorInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSupervisingProjectsInput {
  attributeInventory: AttributeInventoryCreateNestedManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryCreateNestedManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectCreateNestedManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeCreateNestedManyWithoutUserInput
  avatar: String
  createdProjects: ProjectCreateNestedManyWithoutCreatedByInput
  displayName: String!
  email: String!
  firstName: String!
  isAdmin: Boolean
  lastName: String!
  password: String
  projectHistory: ProjectHistoryCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  slug: String!
  stoneInventory: StoneInventoryCreateNestedManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryCreateNestedManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectCreateNestedManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeCreateNestedManyWithoutUserInput
  teams: MemberCreateNestedManyWithoutUserInput
}

input UserOrderByWithRelationInput {
  attributeInventory: AttributeInventoryOrderByRelationAggregateInput
  attributeInventoryHistory: AttributeInventoryHistoryOrderByRelationAggregateInput
  attributesOnProjectParts: AttributesOnProjectOrderByRelationAggregateInput
  attributesOnSubthemes: AttributesOnSubthemeOrderByRelationAggregateInput
  avatar: SortOrder
  createdAt: SortOrder
  createdProjects: ProjectOrderByRelationAggregateInput
  displayName: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  lastName: SortOrder
  password: SortOrder
  projectHistory: ProjectHistoryOrderByRelationAggregateInput
  sessions: SessionOrderByRelationAggregateInput
  slug: SortOrder
  stoneInventory: StoneInventoryOrderByRelationAggregateInput
  stoneInventoryHistory: StoneInventoryHistoryOrderByRelationAggregateInput
  stonesOnProjectParts: StonesOnProjectOrderByRelationAggregateInput
  stonesOnSubthemes: StonesOnSubthemeOrderByRelationAggregateInput
  supervisingProjects: ProjectOrderByRelationAggregateInput
  teams: MemberOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  avatar
  createdAt
  displayName
  email
  firstName
  id
  isAdmin
  lastName
  password
  slug
  updatedAt
}

input UserUpdateOneRequiredWithoutAttributeInventoryHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributeInventoryHistoryInput
  create: UserCreateWithoutAttributeInventoryHistoryInput
  update: UserUpdateWithoutAttributeInventoryHistoryInput
  upsert: UserUpsertWithoutAttributeInventoryHistoryInput
}

input UserUpdateOneRequiredWithoutAttributeInventoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributeInventoryInput
  create: UserCreateWithoutAttributeInventoryInput
  update: UserUpdateWithoutAttributeInventoryInput
  upsert: UserUpsertWithoutAttributeInventoryInput
}

input UserUpdateOneRequiredWithoutAttributesOnProjectPartsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributesOnProjectPartsInput
  create: UserCreateWithoutAttributesOnProjectPartsInput
  update: UserUpdateWithoutAttributesOnProjectPartsInput
  upsert: UserUpsertWithoutAttributesOnProjectPartsInput
}

input UserUpdateOneRequiredWithoutAttributesOnSubthemesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAttributesOnSubthemesInput
  create: UserCreateWithoutAttributesOnSubthemesInput
  update: UserUpdateWithoutAttributesOnSubthemesInput
  upsert: UserUpsertWithoutAttributesOnSubthemesInput
}

input UserUpdateOneRequiredWithoutProjectHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectHistoryInput
  create: UserCreateWithoutProjectHistoryInput
  update: UserUpdateWithoutProjectHistoryInput
  upsert: UserUpsertWithoutProjectHistoryInput
}

input UserUpdateOneRequiredWithoutStoneInventoryHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStoneInventoryHistoryInput
  create: UserCreateWithoutStoneInventoryHistoryInput
  update: UserUpdateWithoutStoneInventoryHistoryInput
  upsert: UserUpsertWithoutStoneInventoryHistoryInput
}

input UserUpdateOneRequiredWithoutStoneInventoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStoneInventoryInput
  create: UserCreateWithoutStoneInventoryInput
  update: UserUpdateWithoutStoneInventoryInput
  upsert: UserUpsertWithoutStoneInventoryInput
}

input UserUpdateOneRequiredWithoutStonesOnProjectPartsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStonesOnProjectPartsInput
  create: UserCreateWithoutStonesOnProjectPartsInput
  update: UserUpdateWithoutStonesOnProjectPartsInput
  upsert: UserUpsertWithoutStonesOnProjectPartsInput
}

input UserUpdateOneRequiredWithoutStonesOnSubthemesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStonesOnSubthemesInput
  create: UserCreateWithoutStonesOnSubthemesInput
  update: UserUpdateWithoutStonesOnSubthemesInput
  upsert: UserUpsertWithoutStonesOnSubthemesInput
}

input UserUpdateOneWithoutCreatedProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatedProjectsInput
  create: UserCreateWithoutCreatedProjectsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCreatedProjectsInput
  upsert: UserUpsertWithoutCreatedProjectsInput
}

input UserUpdateOneWithoutSupervisingProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSupervisingProjectsInput
  create: UserCreateWithoutSupervisingProjectsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutSupervisingProjectsInput
  upsert: UserUpsertWithoutSupervisingProjectsInput
}

input UserUpdateWithoutAttributeInventoryHistoryInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpdateWithoutAttributeInventoryInput {
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpdateWithoutAttributesOnProjectPartsInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpdateWithoutAttributesOnSubthemesInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpdateWithoutCreatedProjectsInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutProjectHistoryInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpdateWithoutStoneInventoryHistoryInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpdateWithoutStoneInventoryInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpdateWithoutStonesOnProjectPartsInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpdateWithoutStonesOnSubthemesInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  supervisingProjects: ProjectUpdateManyWithoutSupervisorInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpdateWithoutSupervisingProjectsInput {
  attributeInventory: AttributeInventoryUpdateManyWithoutUserInput
  attributeInventoryHistory: AttributeInventoryHistoryUpdateManyWithoutUserInput
  attributesOnProjectParts: AttributesOnProjectUpdateManyWithoutUserInput
  attributesOnSubthemes: AttributesOnSubthemeUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdProjects: ProjectUpdateManyWithoutCreatedByInput
  displayName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  projectHistory: ProjectHistoryUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  slug: StringFieldUpdateOperationsInput
  stoneInventory: StoneInventoryUpdateManyWithoutUserInput
  stoneInventoryHistory: StoneInventoryHistoryUpdateManyWithoutUserInput
  stonesOnProjectParts: StonesOnProjectUpdateManyWithoutUserInput
  stonesOnSubthemes: StonesOnSubthemeUpdateManyWithoutUserInput
  teams: MemberUpdateManyWithoutUserInput
}

input UserUpsertWithoutAttributeInventoryHistoryInput {
  create: UserCreateWithoutAttributeInventoryHistoryInput!
  update: UserUpdateWithoutAttributeInventoryHistoryInput!
}

input UserUpsertWithoutAttributeInventoryInput {
  create: UserCreateWithoutAttributeInventoryInput!
  update: UserUpdateWithoutAttributeInventoryInput!
}

input UserUpsertWithoutAttributesOnProjectPartsInput {
  create: UserCreateWithoutAttributesOnProjectPartsInput!
  update: UserUpdateWithoutAttributesOnProjectPartsInput!
}

input UserUpsertWithoutAttributesOnSubthemesInput {
  create: UserCreateWithoutAttributesOnSubthemesInput!
  update: UserUpdateWithoutAttributesOnSubthemesInput!
}

input UserUpsertWithoutCreatedProjectsInput {
  create: UserCreateWithoutCreatedProjectsInput!
  update: UserUpdateWithoutCreatedProjectsInput!
}

input UserUpsertWithoutProjectHistoryInput {
  create: UserCreateWithoutProjectHistoryInput!
  update: UserUpdateWithoutProjectHistoryInput!
}

input UserUpsertWithoutStoneInventoryHistoryInput {
  create: UserCreateWithoutStoneInventoryHistoryInput!
  update: UserUpdateWithoutStoneInventoryHistoryInput!
}

input UserUpsertWithoutStoneInventoryInput {
  create: UserCreateWithoutStoneInventoryInput!
  update: UserUpdateWithoutStoneInventoryInput!
}

input UserUpsertWithoutStonesOnProjectPartsInput {
  create: UserCreateWithoutStonesOnProjectPartsInput!
  update: UserUpdateWithoutStonesOnProjectPartsInput!
}

input UserUpsertWithoutStonesOnSubthemesInput {
  create: UserCreateWithoutStonesOnSubthemesInput!
  update: UserUpdateWithoutStonesOnSubthemesInput!
}

input UserUpsertWithoutSupervisingProjectsInput {
  create: UserCreateWithoutSupervisingProjectsInput!
  update: UserUpdateWithoutSupervisingProjectsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  attributeInventory: AttributeInventoryListRelationFilter
  attributeInventoryHistory: AttributeInventoryHistoryListRelationFilter
  attributesOnProjectParts: AttributesOnProjectListRelationFilter
  attributesOnSubthemes: AttributesOnSubthemeListRelationFilter
  avatar: StringNullableFilter
  createdAt: DateTimeFilter
  createdProjects: ProjectListRelationFilter
  displayName: StringFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  isAdmin: BoolFilter
  lastName: StringFilter
  password: StringNullableFilter
  projectHistory: ProjectHistoryListRelationFilter
  sessions: SessionListRelationFilter
  slug: StringFilter
  stoneInventory: StoneInventoryListRelationFilter
  stoneInventoryHistory: StoneInventoryHistoryListRelationFilter
  stonesOnProjectParts: StonesOnProjectListRelationFilter
  stonesOnSubthemes: StonesOnSubthemeListRelationFilter
  supervisingProjects: ProjectListRelationFilter
  teams: MemberListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  slug: String
}
