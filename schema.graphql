### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Attribute {
  attributeLists: [AttributeList!]!
  createdAt: DateTime!
  id: ID!
  name: String!
  projects: [AttributesOnProject!]!
  subthemes: [AttributesOnSubtheme!]!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
}

type AttributeList {
  amount: Int!
  attribute: Attribute!
  attributeId: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type AttributesOnProject {
  amount: Int!
  attribute: Attribute!
  attributeId: String!
  createdAt: DateTime!
  id: ID!
  project: Project!
  projectId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type AttributesOnSubtheme {
  amount: Int!
  attribute: Attribute!
  attributeId: String!
  createdAt: DateTime!
  id: ID!
  subtheme: Subtheme!
  subthemeId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

type Event {
  createdAt: DateTime!
  date: DateTime!
  id: ID!
  name: String!
  slug: String!
  subthemes: [Subtheme!]!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Member {
  createdAt: DateTime!
  id: ID!
  role: Role!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type Mutation {
  """Generate a new session for a user with an active account"""
  login(email: String!, isPermanent: Boolean!, password: String!): String!

  """Invalidate an active session"""
  logout(token: String!): Session!

  """Set the `team` field of an active session"""
  setSessionTeam(teamId: String!, token: String!): Session!
}

type Project {
  attributes: [AttributesOnProject!]!
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  number: Int!
  slug: String!
  stats: [StatsOnProject!]!
  status: ProjectStatus!
  stones: [StonesOnProject!]!
  subNumber: Int!
  subtheme: Subtheme!
  subthemeId: String!
  supervisor: User!
  supervisorId: String!
  type: ProjectType!
  updatedAt: DateTime!
}

enum ProjectStatus {
  BUILDING
  BUILT
  CANCELLED
  PLANNED
  PLANNING
  READY
  STARTING
}

enum ProjectType {
  DECOR
  FALLWALL
  FIELD_CIRCLE
  FIELD_CROSS_L2
  FIELD_FLAT
  FIELD_L1
  FIELD_L2
  FIELD_M50
  HANDSET
  OTHER
  SPIRAL
  STRUCTURE
  WALL_CUBE
  WALL_OCTO
  WALL_S
  WALL_SPEED
  WALL_T
  WALL_X
}

type Query {
  event(eventSlug: String!): Event
  events: [Event!]!

  """Get session by its token"""
  session(token: String!): Session

  """Get stonelist of a user in a team"""
  stoneList(userSlug: String!): [StoneList!]!

  """Find all users of this team that have a nonzero stonelist in this team"""
  stoneListUsers: [User!]!

  """Get all stonetypes of a team"""
  stoneTypes: [StoneType!]!

  """Get all stones of a team"""
  stones: [Stone!]!

  """Fetch the teams that the user is a member of"""
  teams: [Team!]!

  """Find user by its slug"""
  user(userSlug: String!): User
}

enum Role {
  BUILDER
  CAPTAIN
  GUEST
}

type Session {
  createdAt: DateTime!
  expiresAt: DateTime
  id: ID!
  member: Member
  team: Team
  teamId: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type Stat {
  createdAt: DateTime!
  id: ID!
  name: String!
  projects: [StatsOnProject!]!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
}

type StatsOnProject {
  amount: Int!
  createdAt: DateTime!
  id: ID!
  project: Project!
  projectId: String!
  stat: Stat!
  statId: String!
  updatedAt: DateTime!
}

type Stone {
  alias: String!
  alias2: String
  createdAt: DateTime!
  description: String
  hex: String!
  hex2: String
  id: ID!
  name: String!
  order: Int!
  projects: [StonesOnProject!]!
  stoneLists: [StoneList!]!
  stoneType: StoneType!
  stoneTypeId: String!
  subthemes: [StonesOnSubtheme!]!
  updatedAt: DateTime!
}

type StoneList {
  amount: Int!
  createdAt: DateTime!
  id: ID!
  stone: Stone!
  stoneId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type StoneType {
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  order: Int!
  stones: [Stone!]!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
}

type StonesOnProject {
  amount: Int!
  createdAt: DateTime!
  id: ID!
  project: Project!
  projectId: String!
  stone: Stone!
  stoneId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type StonesOnSubtheme {
  amount: Int!
  createdAt: DateTime!
  id: ID!
  stone: Stone!
  stoneId: String!
  subtheme: Subtheme!
  subthemeId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type Subtheme {
  attributes: [AttributesOnSubtheme!]!
  color: String!
  createdAt: DateTime!
  event: Event!
  eventId: String!
  id: ID!
  name: String!
  order: Int!
  projects: [Project!]!
  slug: String!
  stones: [StonesOnSubtheme!]!
  updatedAt: DateTime!
}

type Team {
  attributes: [Attribute!]!
  createdAt: DateTime!
  events: [Event!]!
  id: ID!
  members: [Member!]!
  name: String!
  sessions: [Session!]!
  stats: [Stat!]!
  stoneTypes: [StoneType!]!
  updatedAt: DateTime!
}

type User {
  attributeLists: [AttributeList!]!
  attributesOnProjects: [AttributesOnProject!]!
  attributesOnSubthemes: [AttributesOnSubtheme!]!
  avatar: String
  createdAt: DateTime!
  displayName: String!
  email: String!
  firstName: String!
  id: ID!
  isAdmin: Boolean!
  lastName: String!

  """The projects that this user supervises"""
  projects: [Project!]!
  sessions: [Session!]!
  slug: String!
  stoneLists: [StoneList!]!
  stonesOnProjects: [StonesOnProject!]!
  stonesOnSubthemes: [StonesOnSubtheme!]!

  """The teams this user is a member of"""
  teams: [Member!]!
  updatedAt: DateTime!
}
