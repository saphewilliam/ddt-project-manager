datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

// Authentication

model User {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  firstName   String
  lastName    String
  displayName String
  slug        String   @unique
  password    String?
  avatar      String?
  email       String   @unique
  isAdmin     Boolean  @default(false)

  sessions              Session[]
  stoneLists            StoneList[]
  stonesOnProjects      StonesOnProject[]
  stonesOnSubthemes     StonesOnSubtheme[]
  attributeLists        AttributeList[]
  attributesOnProjects  AttributesOnProject[]
  attributesOnSubthemes AttributesOnSubtheme[]

  /// The teams this user is a member of
  teams    Member[]
  /// The projects that this user supervises
  projects Project[]
}

model Session {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  token     String    @unique

  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull)
}

// Teams

enum Role {
  CAPTAIN
  BUILDER
  GUEST
}

model Member {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  members    Member[]
  sessions   Session[]
  events     Event[]
  stoneTypes StoneType[]
  attributes Attribute[]
  stats      Stat[]
}

// Events

model Event {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  date      DateTime
  slug      String   @unique

  subthemes Subtheme[]

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Subtheme {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  color     String
  order     Int
  slug      String   @unique

  projects   Project[]
  attributes AttributesOnSubtheme[]
  stones     StonesOnSubtheme[]

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

enum ProjectStatus {
  CANCELLED
  STARTING
  PLANNING
  PLANNED
  READY
  BUILDING
  BUILT
  COUNTED
}

enum ProjectType {
  FIELD_L1
  FIELD_L2
  FIELD_M50
  FIELD_FLAT
  FIELD_CROSS_L2
  FIELD_CIRCLE
  WALL_X
  WALL_S
  WALL_T
  WALL_SPEED
  WALL_CUBE
  WALL_OCTO
  FALLWALL
  SPIRAL
  STRUCTURE
  HANDSET
  DECOR
  OTHER
}

model Project {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  slug        String   @unique
  description String
  number      Int
  subNumber   Int

  type       ProjectType
  status     ProjectStatus
  attributes AttributesOnProject[]
  stones     StonesOnProject[]
  stats      StatsOnProject[]

  subthemeId   String
  subtheme     Subtheme @relation(fields: [subthemeId], references: [id], onDelete: Cascade)
  supervisorId String?
  supervisor   User?    @relation(fields: [supervisorId], references: [id], onDelete: SetNull)
}

model Stat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  projects StatsOnProject[]

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model StatsOnProject {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     String

  statId    String
  stat      Stat    @relation(fields: [statId], references: [id], onDelete: Restrict)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Lists

model StoneType {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  order       Int

  stones Stone[]

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Stone {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  alias       String
  alias2      String?
  hex         String
  hex2        String?
  description String?
  order       Int

  stoneLists StoneList[]
  projects   StonesOnProject[]
  subthemes  StonesOnSubtheme[]

  stoneTypeId String
  stoneType   StoneType @relation(fields: [stoneTypeId], references: [id], onDelete: Cascade)
}

model StoneList {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Int

  stoneId String
  stone   Stone  @relation(fields: [stoneId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StonesOnProject {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Int

  stoneId   String
  stone     Stone   @relation(fields: [stoneId], references: [id], onDelete: Restrict)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model StonesOnSubtheme {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Int

  stoneId    String
  stone      Stone    @relation(fields: [stoneId], references: [id], onDelete: Restrict)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  subthemeId String
  subtheme   Subtheme @relation(fields: [subthemeId], references: [id], onDelete: Cascade)
}

model Attribute {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  attributeLists AttributeList[]
  projects       AttributesOnProject[]
  subthemes      AttributesOnSubtheme[]

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model AttributeList {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Int

  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AttributesOnProject {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Int

  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Restrict)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model AttributesOnSubtheme {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Int

  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Restrict)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  subthemeId  String
  subtheme    Subtheme  @relation(fields: [subthemeId], references: [id], onDelete: Cascade)
}
